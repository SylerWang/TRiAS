
#line 2 "ddsp.y"
/* Datenbasis-Struktur-Definitionssprachprozessor               */
/* File: DDSP.Y                                                 */

#if defined(sccs)
static char SccsId[] = "%W%	%E%";
#endif

#include "StdAfx.h"

#include "ddspprot.h"		// Prototypen
 
ID_INFO *id_list, *currid;
int var_size;                   /* Anzahl der Basistypvariablen im field */
int type_size;                  /* Variablengroesse */
char var_str[80];               /* aktuelle Variablendeklaration */
char db_name[NAMELEN];          /* Datenbasisname */
int  multidim = 0;              /* multi-dimensional array flag */

char dbd_ext[4];				/* Erweiterung für DictionaryDatei */
 
extern int line;				/* aktuelle Eingabezeile */
 
#ifdef BACKUP
extern short backup_flag;
#endif

long DBVersion = 0L; 			/* VersionsNummer */
long PageSize = 1024L;			/* PageGröße */


#line 35 "ddsp.y"
typedef union  {
	STRTOK tstr;
	NUMTOK tnum;
} YYSTYPE;
#define T_CONTAINS 257
#define T_DATA 258
#define T_DATABASE 259
#define T_DOUBLE 260
#define T_FILE 261
#define T_FLOAT 262
#define T_DB_ADDR 263
#define T_CHAR 264
#define T_INT 265
#define T_LONG 266
#define T_BACKUP 267
#define T_TO 268
#define T_ENABLE 269
#define T_DISABLE 270
#define T_UNIQUE 271
#define T_ONLY 272
#define T_KEY 273
#define T_AND 274
#define T_BTREE 275
#define T_HTREE 276
#define T_QTREE 277
#define T_CTREE 278
#define T_RECORD 279
#define T_SHORT 280
#define T_STRUCT 281
#define T_NUMBER 282
#define T_UNION 283
#define T_VERSION 284
#define T_IDENT 285
#define T_STRING 286
#define T_EXTENSION 287
#define yyclearin yychar = -1
#define yyerrok yyerrflag = 0
extern int yychar;
extern short yyerrflag;
#ifndef YYMAXDEPTH
#define YYMAXDEPTH 150
#endif
YYSTYPE yylval, yyval;
#define YYERRCODE 256

#line 410 "ddsp.y"


short yyexca[] = {-1, 1,
	0, -1,
	-2, 0,
	};
#define YYNPROD 71
#define YYLAST 220
short yyact[]={

  66,  29,  65,  68,  67,  62,  64,  50, 100, 119,
  80,  81, 137,   9,  98,  17,  79, 132, 113, 123,
  63,  60, 124,  61,  42,  69,  20,  21, 125,  92,
  88,  26,  22,  24,  23,  25,  16,  80,  81,  49,
  33,  10,  38,  80,  81,  80,  81, 112, 141, 121,
 110,  89,  87,  43,  29, 116,  94,  39,  40,  41,
  72,  73,  74,  46,  45,  85,  32,  48,  47, 101,
 139,  83,  82,  44,   3, 114,  95,  84,  29, 111,
 108, 107, 140, 104,  77,  70,  35,  78, 135, 134,
 103, 142, 109,  34, 126, 126, 126, 144, 131, 128,
 117, 115, 106, 102,  96,  71,  86,  55,  31, 145,
 138, 127,  53, 133, 105,  54,  15,  18,  14,   5,
  13,  57,  27, 109,  28,  12,  11,   8,   7,   6,
   4,   2,  30,  37,  17,  19,  36,  59,  91,  90,
   1,   0,   0,   0,   0,  20,  21,   0,   0,   0,
   0,  22,  24,  23,  25,  16,   0,  56,   0,   0,
  10,   0,   0,   0,  93,  75,   0,   0,   0,   0,
  97,  99,  52, 120,   0,   0,   0,   0,   0,   0,
  57,  38,   0,   0,   0,  58,   0,   0, 122, 118,
   0,   0,   0,   0, 129,   0,  39,  40,  41,   0,
  39,  40,  41,  51, 130,   0,   0, 136,   0,  76,
   0,   0,   0,   0,   0,   0,   0, 122,   0, 143 };
short yypact[]={

-185,-1000,-243,-254,-124,-1000,-1000,-1000,-1000,  49,
-216,-1000,-1000,-1000,-1000,-214,-232,-188,-209,-210,
-199,-200,-1000,-1000,-1000,-1000, -84,-1000,-1000,  53,
  49,-1000,  69,  48, -71,-1000,-260, -38,  46,-212,
-211,-1000, -47, -39,-240,-189,-190,-191,  47,-1000,
-230,-255,-1000,-1000,-231,-1000,-1000,-1000,  46,-256,
-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,-1000,
-214,-1000,-217,-1000,-1000,-1000,-1000,-1000,-181,  45,
-1000,-1000,-242,-248,-192,  44,-1000,  -3, -40,  68,
  43,   1,-1000, -75,-1000,-238,-1000,-182,  42,-219,
  41,-275,-1000,-114,-1000,-233,-1000,   1,-1000,-263,
-257,  52,-1000,  40,-238,-1000,-275,-1000,  39,-1000,
-268,  67,-1000,  -4,  -5,   1,-273,-1000,-1000,  51,
-187,-1000, -41,-234,-1000,-1000,  32,-1000,-1000,-238,
-1000,  38,-1000,  50,-1000,-1000 };
short yypgo[]={

   0, 140,  87, 139, 138, 137,  80,  81, 136, 135,
 133, 131, 130, 122,  79, 119, 129, 128, 127, 126,
 125, 120, 118, 117, 116,  93,  86 };

short yyr1[]={
   0,   1,  13,  13,  13,  11,  11,  11,  11,  11,
  14,  14,  14,  12,  12,  15,  15,  15,  15,  17,
  17,  17,  17,  19,  19,  20,  20,  23,  23,  21,
  21,   9,   9,   9,  22,  22,  22,  16,  16,   8,
   8,   8,   8,   8,   2,   2,  18,  18,  24,  25,
  25,  26,  26,  26,  10,  10,   5,   5,   5,   5,
   5,   5,   5,   5,   3,   4,   7,   7,   7,   6,
   6 };

short yyr2[]={
   0,   3,   1,   2,   1,   3,   6,   5,   8,   3,
   1,   3,   2,   1,   2,   1,   1,   1,   2,   1,
   1,   1,   1,   6,   4,   7,   5,   0,   1,   9,
   5,   1,   1,   1,   6,   3,   4,   9,   3,   3,
   2,   2,   1,   0,   1,   1,   3,   3,   3,   1,
   2,   4,   7,   2,   2,   2,   1,   1,   1,   1,
   1,   1,   1,   1,   2,   1,   0,   1,   2,   3,
   3 };

short yychk[]={
-1000,  -1, -11, 259, -12, -15, -16, -17, -18, 256,
 284, -19, -20, -21, -22, -24, 279, 258, -23,  -9,
 269, 270, 275, 277, 276, 278, 285, -13, -15, 125,
 256,  59, 282, 256, -25, -26,  -8, -10, 256, 271,
 272, 273, 256, 285, 261, 273, 273, 267, 267, 123,
  91, 287, 256,  59,  46,  59, -13, -26, 256,  -5,
 281, 283, 265, 280, 266, 262, 260, 264, 263, 285,
 123,  59, 272, 273, 273, -13, 256, 123,  -2, 256,
 285, 286, 261, 261, 268, 256,  59, 282, 285, 282,
  -3,  -4, 285, -25, 273, 257,  59,  -2, 256,  -2,
 256, 261,  59,  93, 123,  46,  59,  -7,  -6,  91,
 125, -14, 285, 256, 257,  59, 274,  59,  -2, 123,
 287, 282,  -6, 282, 285, 285,  44,  59,  59, -14,
  -2,  59, 285,  46,  93,  93,  -7, 285,  59, 257,
 123, 282,  59, -14,  59,  59 };

short yydef[]={
   0,  -2,  27,   0,  27,  13,  15,  16,  17,   0,
   0,  19,  20,  21,  22,  43,   0,   0,   0,   0,
   0,   0,  28,  31,  32,  33,   0,   1,  14,   2,
   4,  18,   0,   0,  43,  49,   0,   0,   0,   0,
   0,  42,   0,   0,   0,   0,   0,   0,   0,   5,
   0,   0,   9,   3,   0,  38,  46,  50,   4,   0,
  54,  55,  56,  57,  58,  59,  60,  61,  62,  63,
  43,  53,   0,  40,  41,  47,   4,  48,   0,   0,
  44,  45,   0,   0,   0,   0,  35,   0,   0,   0,
   0,  66,  65,  43,  39,   0,  24,   0,   0,   0,
   0,   0,  36,   0,   7,   0,  51,  64,  67,   0,
   0,   0,  10,   0,   0,  26,   0,  30,   0,   6,
   0,   0,  68,   0,   0,  66,   0,  23,  12,   0,
   0,  34,   0,   0,  69,  70,   0,  11,  25,   0,
   8,   0,  52,   0,  37,  29 };
# define YYFLAG -1000
# define YYERROR goto yyerrlab
# define YYACCEPT return(0)
# define YYABORT return(1)

// Funktionsdefinitionen
void yyerror (const char *);
int yylex (void);
int yyparse (void);

/*	parser for yacc output	*/

#if defined(YYDEBUG)
int yydebug = 0; /* 1 for debugging */
#endif

YYSTYPE yyv[YYMAXDEPTH]; /* where the values are stored */
int yychar = -1; /* current input token number */
int yynerrs = 0;  /* number of errors */
short yyerrflag = 0;  /* error recovery flag */

int 
yyparse(void) {

	short yys[YYMAXDEPTH];
	short yyj, yym;
	register YYSTYPE *yypvt;
	register short yystate, *yyps, yyn;
	register YYSTYPE *yypv;
	register short *yyxi;

	yystate = 0;
	yychar = -1;
	yynerrs = 0;
	yyerrflag = 0;
	yyps= &yys[-1];
	yypv= &yyv[-1];

 yystack:    /* put a state and value onto the stack */

#if defined(YYDEBUG)
	if( yydebug  ) printf( "state %d, char 0%o\n", yystate, yychar );
#endif
		if( ++yyps> &yys[YYMAXDEPTH] ) { yyerror( "yacc stack overflow" ); return(1); }
		*yyps = yystate;
		++yypv;
//		memcpy (yypv, &yyval, sizeof (yyval));
		*yypv = yyval;	

 yynewstate:

	yyn = yypact[yystate];

	if( yyn<= YYFLAG ) goto yydefault; /* simple state */

	if( yychar<0 ) if( (yychar=yylex())<0 ) yychar=0;
	if( (yyn += yychar)<0 || yyn >= YYLAST ) goto yydefault;

	if( yychk[ yyn=yyact[ yyn ] ] == yychar ){ /* valid shift */
		yychar = -1;
//		memcpy (&yyval, &yylval, sizeof (yyval));
		yyval = yylval;
		yystate = yyn;
		if( yyerrflag > 0 ) --yyerrflag;
		goto yystack;
		}

 yydefault:
	/* default state action */

	if( (yyn=yydef[yystate]) == -2 ) {
		if( yychar<0 ) if( (yychar=yylex())<0 ) yychar = 0;
		/* look through exception table */

		for( yyxi=yyexca; (*yyxi!= (-1)) || (yyxi[1]!=yystate) ; yyxi += 2 ) ; /* VOID */

		while( *(yyxi+=2) >= 0 ){
			if( *yyxi == yychar ) break;
			}
		if( (yyn = yyxi[1]) < 0 ) return(0);   /* accept */
		}

	if( yyn == 0 ){ /* error */
		/* error ... attempt to resume parsing */

		switch( yyerrflag ){

		case 0:   /* brand new error */

			yyerror( "syntax error" );
		yyerrlab:
			++yynerrs;

		case 1:
		case 2: /* incompletely recovered error ... try again */

			yyerrflag = 3;

			/* find a state where "error" is a legal shift action */

			while ( yyps >= yys ) {
			   yyn = yypact[*yyps] + YYERRCODE;
			   if( yyn>= 0 && yyn < YYLAST && yychk[yyact[yyn]] == YYERRCODE ){
			      yystate = yyact[yyn];  /* simulate a shift of "error" */
			      goto yystack;
			      }
			   yyn = yypact[*yyps];

			   /* the current yyps has no shift onn "error", pop stack */

#if defined (YYDEBUG)
			   if( yydebug ) printf( "error recovery pops state %d, uncovers %d\n", *yyps, yyps[-1] );
#endif
			   --yyps;
			   --yypv;
			   }

			/* there is no state on the stack with an error shift ... abort */

	yyabort:
			return(1);


		case 3:  /* no shift yet; clobber input char */

#if defined(YYDEBUG)
			if( yydebug ) printf( "error recovery discards char %d\n", yychar );
#endif

			if( yychar == 0 ) goto yyabort; /* don't discard EOF, quit */
			yychar = -1;
			goto yynewstate;   /* try again in the same state */

			}

		}

	/* reduction by production yyn */

#if defined(YYDEBUG)
		if( yydebug ) printf("reduce %d\n",yyn);
#endif
		yyps -= yyr2[yyn];
		yypvt = yypv;
		yypv -= yyr2[yyn];
//		memcpy (&yyval, &(yypv[1]), sizeof (yyval));
		yyval = yypv[1];
		yym=yyn;
			/* consult goto table to find next state */
		yyn = yyr1[yyn];
		yyj = yypgo[yyn] + *yyps + 1;
		if( yyj>=YYLAST || yychk[ yystate = yyact[yyj] ] != -yyn ) yystate = yyact[yypgo[yyn]];
		switch(yym){
			
case 3:
#line 61 "ddsp.y"
{
			dderror("';' ist nach '}' nicht erforderlich", yypvt[-0].tnum.numline);
        } break;
case 4:
#line 65 "ddsp.y"
{
			yyerrok;
			dderror("Fehlende schlieszende '}'",line);
		} break;
case 5:
#line 73 "ddsp.y"
{
			strcpy (db_name, yypvt[-1].tstr.str);
			open_files ();
			PageSize = PAGESIZE;
			strcpy (dbd_ext, "stb");
			dbd_ext[3] = '\0';
        } break;
case 6:
#line 81 "ddsp.y"
{
			strcpy (db_name, yypvt[-4].tstr.str);
			open_files();
			PageSize = yypvt[-2].tnum.num;
			strcpy (dbd_ext, "stb");
			dbd_ext[3] = '\0';
		} break;
case 7:
#line 89 "ddsp.y"
{
			strcpy (db_name, yypvt[-3].tstr.str);
			open_files ();
			PageSize = PAGESIZE;
			strncpy (dbd_ext, yypvt[-1].tstr.str, 3);
			dbd_ext[3] = '\0';
		} break;
case 8:
#line 97 "ddsp.y"
{
			strcpy (db_name, yypvt[-6].tstr.str);
			open_files();
			PageSize = yypvt[-4].tnum.num;
			strncpy (dbd_ext, yypvt[-1].tstr.str, 3);
			dbd_ext[3] = '\0';
		} break;
case 9:
#line 105 "ddsp.y"
{
			yyerrok;
			dderror ("Fehlende oeffnende '{'", yypvt[-1].tstr.strline);
			strcpy (db_name, yypvt[-1].tstr.str);
			open_files();
		} break;
case 10:
#line 115 "ddsp.y"
{
			id_list = (ID_INFO *)calloc (1, sizeof (ID_INFO));
			if (id_list == NULL)
				abort ("Kein Speicherplatz");
			strcpy (id_list->id_name, yypvt[-0].tstr.str);
			id_list->next_id = NULL;
			currid = id_list;
		} break;
case 11:
#line 124 "ddsp.y"
{
			currid->next_id = (ID_INFO *)calloc (1, sizeof (ID_INFO));
			if ((currid = currid->next_id) == NULL)
				abort ("Kein Speicherplatz");
			strcpy (currid->id_name, yypvt[-0].tstr.str);
			currid->next_id = NULL;
		} break;
case 12:
#line 132 "ddsp.y"
{
			dderror ("Name ist kein Identifier", yypvt[-0].tnum.numline);
			unput (';');
		} break;
case 18:
#line 148 "ddsp.y"
{
			dderror ("Fragwürdiger dds Operator", yypvt[-0].tnum.numline);
		} break;
case 23:
#line 161 "ddsp.y"
{
			add_file (yypvt[-3].tstr.str, 'd', id_list);
        } break;
case 24:
#line 165 "ddsp.y"
{
			dderror ("Fragwürdige Dateideklaration", yypvt[-2].tnum.numline);
		} break;
case 25:
#line 171 "ddsp.y"
{
			add_file (yypvt[-3].tstr.str, 'k', id_list);
		} break;
case 26:
#line 175 "ddsp.y"
{
			dderror ("Fragwürdige Btree Keydateideklaration", yypvt[-3].tnum.numline);
		} break;
case 29:
#line 186 "ddsp.y"
{
			add_file (yypvt[-5].tstr.str, yypvt[-8].tnum.num, id_list);
			add_file (yypvt[-3].tstr.str, 'K', id_list);
		} break;
case 30:
#line 191 "ddsp.y"
{
			dderror ("Fragwürdige GeoTree Keydateideklaration", yypvt[-3].tnum.numline);
		} break;
case 31:
#line 197 "ddsp.y"
{ yyval.tnum.num = 'q'; } break;
case 32:
#line 199 "ddsp.y"
{ yyval.tnum.num = 'h'; } break;
case 33:
#line 201 "ddsp.y"
{ yyval.tnum.num = 'c'; } break;
case 34:
#line 205 "ddsp.y"
{
#ifdef BACKUP
                        add_file (yypvt[-1].tstr.str, 'b', NULL);
#else
                        dderror ("Backup nicht generiert", yypvt[-4].tnum.numline);
#endif
                } break;
case 35:
#line 213 "ddsp.y"
{
#ifdef BACKUP
                        backup_flag = -1;
#else
                        dderror ("Backup nicht generiert", yypvt[-1].tnum.numline);
#endif
                } break;
case 36:
#line 221 "ddsp.y"
{
#ifdef BACKUP
                        dderror ("Fragwürdige Backup-Dateideklaration", yypvt[-2].tnum.numline);
#else
                        dderror ("Backup nicht generiert", yypvt[-2].tnum.numline);
#endif
                } break;
case 37:
#line 231 "ddsp.y"
{
		// VersionsNummer (optional)
			DBVersion = ((long)yypvt[-7].tnum.num << 24) + ((long)yypvt[-5].tnum.num << 16) +
				    (yypvt[-3].tnum.num <<  8) +  yypvt[-1].tnum.num;
		} break;
case 38:
#line 237 "ddsp.y"
{
			dderror ("Fragwürdige Versionsnummer", yypvt[-2].tnum.numline);
		} break;
case 39:
#line 243 "ddsp.y"
{ yyval.tnum.num = 'U'; } break;
case 40:
#line 245 "ddsp.y"
{ yyval.tnum.num = 'u'; } break;
case 41:
#line 247 "ddsp.y"
{ yyval.tnum.num = 'D'; } break;
case 42:
#line 249 "ddsp.y"
{ yyval.tnum.num = 'd'; } break;
case 43:
#line 251 "ddsp.y"
{ yyval.tnum.num = 'n'; } break;
case 46:
#line 259 "ddsp.y"
{
                        close_record ();
                } break;
case 47:
#line 263 "ddsp.y"
{
                        dderror ("Fragwürdige Recorddeklaration", yypvt[-2].tnum.numline);
                } break;
case 48:
#line 270 "ddsp.y"
{
			add_record (yypvt[-1].tstr.str);
        } break;
case 51:
#line 282 "ddsp.y"
{
			strcat(var_str, ";");
			if (yypvt[-2].tnum.num == 'c' && multidim )
				yypvt[-2].tnum.num = 'C';
			add_field (yypvt[-1].tstr.str, yypvt[-2].tnum.num, type_size*var_size, yypvt[-3].tnum.num, var_str);
		} break;
case 52:
#line 289 "ddsp.y"
{
			if (multidim == 2)
				dderror ("Struktur-/Unionfelder mit mehreren Dimensionen nicht erlaubt", yypvt[-5].tnum.numline);
			close_struct (yypvt[-6].tnum.num, yypvt[-2].tstr.str, yypvt[-1].tnum.num);
		} break;
case 53:
#line 295 "ddsp.y"
{
			dderror ("Fragwürdige Felddeklaration",yypvt[-0].tnum.numline);
		} break;
case 54:
#line 302 "ddsp.y"
{
			add_field ("struct", 'g', 0, yypvt[-1].tnum.num, "struct {");
			yyval.tnum.num = yypvt[-1].tnum.num;
		} break;
case 55:
#line 307 "ddsp.y"
{
			add_field ("union", 'G', 0, yypvt[-1].tnum.num, "union {");
			yyval.tnum.num = yypvt[-1].tnum.num;
		} break;
case 56:
#line 315 "ddsp.y"
{
			strcpy(var_str,"int ");
			yyval.tnum.num = 'i';
			type_size = INT_SIZE; 
		} break;
case 57:
#line 321 "ddsp.y"
{
			strcpy(var_str,"short ");
			yyval.tnum.num = 's';
			type_size = SHORT_SIZE; 
		} break;
case 58:
#line 327 "ddsp.y"
{
			strcpy(var_str,"long ");
			yyval.tnum.num = 'l';
			type_size = LONG_SIZE; 
		} break;
case 59:
#line 333 "ddsp.y"
{
			strcpy(var_str,"float ");
			yyval.tnum.num = 'f';
			type_size = FLOAT_SIZE; 
		} break;
case 60:
#line 339 "ddsp.y"
{
			strcpy(var_str,"double ");
			yyval.tnum.num = 'F';
			type_size = DOUBLE_SIZE; 
		} break;
case 61:
#line 345 "ddsp.y"
{
			strcpy(var_str,"char ");
			yyval.tnum.num = 'c';
			type_size = CHAR_SIZE; 
		} break;
case 62:
#line 351 "ddsp.y"
{
			strcpy(var_str,"DB_ADDR ");
			yyval.tnum.num = 'd';
			type_size = DB_ADDR_SIZE; 
		} break;
case 63:
#line 357 "ddsp.y"
{
			dderror("Fragwürdiger Datentyp", yypvt[-0].tstr.strline);
		} break;
case 64:
#line 363 "ddsp.y"
{
			strcpy(yyval.tstr.str, yypvt[-1].tstr.str);
			var_size = yypvt[-0].tnum.num;
		} break;
case 65:
#line 370 "ddsp.y"
{
			strcat(var_str,yypvt[-0].tstr.str);
			strcpy(yyval.tstr.str, yypvt[-0].tstr.str);
		} break;
case 66:
#line 378 "ddsp.y"
{
			multidim = 0;
			yyval.tnum.num = 1;
		} break;
case 67:
#line 383 "ddsp.y"
{
			multidim = 1;
			yyval.tnum.num = yypvt[-0].tnum.num;
		} break;
case 68:
#line 388 "ddsp.y"
{
			multidim = 2;
			yyval.tnum.num = yypvt[-1].tnum.num * yypvt[-0].tnum.num;
		} break;
case 69:
#line 396 "ddsp.y"
{
			strcat(var_str, "[");
			strcat(var_str, itos(yypvt[-1].tnum.num));
			strcat(var_str, "]");
			yyval.tnum.num = yypvt[-1].tnum.num;
		} break;
case 70:
#line 403 "ddsp.y"
{
			dderror("Fragwürdige Feldgrößendeklaration", yypvt[-1].tstr.strline);
			var_str[0] = '\0';
			yyval.tnum.num = 2;
		} break;
		}
		goto yystack;  /* stack new state and value */

	}


