#define YY_DEFAULT_ACTION YY_FATAL_ERROR("flex scanner jammed");
/* A lexical scanner generated by pclex */

#define YY_END_TOK 0
#define YY_NEW_FILE -1
#define YY_DO_DEFAULT -2
#if !defined(BUFSIZ)
#if defined(__cplusplus)
extern "C" {
#endif
#include <stdio.h>
#if defined(__cplusplus)
}
#endif
#endif
#define F_BUFSIZ 128
#define YY_BUF_SIZE (F_BUFSIZ * 2)
#define YY_BUF_MAX (YY_BUF_SIZE - 1)
#ifndef YY_MAX_LINE
#define YY_MAX_LINE F_BUFSIZ
#endif
#define YY_BUF_LIM (YY_BUF_MAX - YY_MAX_LINE)
#define ECHO fputs(yytext, yyout)
#define YY_INPUT(buf,result,max_size) \
	memset(buf,'\0',max_size); \
	if (fgets(buf, max_size, yyin) != NULL) \
	    result = strlen(buf); \
	else if (!ferror(yyin)) \
	    result = YY_NULL; \
	else \
	    YY_FATAL_ERROR("fgets() in pclex scanner failed");
#define YY_NULL 0
#define YY_OUTPUT(c) fputc(c, yyout);
#define YY_FATAL_ERROR(msg) \
	{ \
	fputs(msg, stderr); \
	putc('\n', stderr); \
	exit(1); \
	}
#define YY_FIRST_CHAR yy_ch_buf[yy_b_buf_p]
#define yywrap() 1
#define BEGIN yy_start = 1 +
#define YY_SET_BOL(array,pos) array[pos - 1] = '\n';
#define YY_DECL int yylex()
#define yyless(n) \
	{ \
	YY_DO_BEFORE_SCAN; \
	yy_c_buf_p = yy_b_buf_p + n - 1; \
	YY_DO_BEFORE_ACTION; \
	}
#define YY_BREAK break;
#define YY_INIT \
	{ \
	yyleng = yy_c_buf_p = yy_e_buf_p = 0; \
	yy_hold_char = yy_ch_buf[yy_c_buf_p] = '\n'; \
	yytext = &yy_ch_buf[yy_c_buf_p]; \
	yy_saw_eof = 0; \
	}
#define YY_LENG (yy_c_buf_p - yy_b_buf_p + 1)
#define YY_DO_BEFORE_SCAN \
	yytext[yyleng] = yy_hold_char;
#define YY_DO_BEFORE_ACTION \
	yytext = &yy_ch_buf[yy_b_buf_p]; \
	yyleng = YY_LENG; \
	yy_hold_char = yytext[yyleng]; \
	yytext[yyleng] = '\0';
#define REJECT \
        { \
	YY_DO_BEFORE_SCAN; \
	yy_c_buf_p = yy_full_match; \
        ++yy_lp; \
        goto find_rule; \
        }

static int input(void);
static void unput(char);

#define __INITIAL 0
/* Scanner fuer ASCPUT (Analyse des ASCII-Formates)             */
/* File: ASCPARS.LX                                             */

#if defined(sccs)
static char SccsId[] = "ASCPARS: %W%	%E%";
#endif

#include <stdlib.h>
#include <string.h>
#include <ctype.h>

#include "ascbna.h"
#include "ascbnay.h"

#define FALSE (0)
#define TRUE (1)

int yylineno = 0;

struct keyentry {               /* Tabelleneintrag fuer reservierte Worte */
	int  lx;
	char *id;
};

// lokale Prototypen
static void toUpper (char *);

/* reservierte Worte, die vom Scanner identifiziert werden */
struct keyentry keywords[] = {
	{       T_OFFSET, "OFFSET"      },
	{       T_SCALE, "SCALE"        },
	{	T_ENTRYROSYS, "ENTRYROSYS"	},
	{	T_ENTRYRO, "ENTRYRO"	},
	{	T_ENTRYSYS, "ENTRYSYS"	},
	{	T_ENTRY, "ENTRY"	},
	{	T_PBDNAME, "PBDNAME"	},
	{       0, NULL                 },
};

#define merkmal 2
#define textmerkmal 4
#define Control 6
#define Relation 8
#define YY_JAM 70
#define YY_JAM_BASE 689
static char a[166] =
    {   0,
       32,   32,   32,   32,   32,   32,   32,   32,   32,   32,
       34,   35,   32,   34,   35,   21,   35,   22,   34,   35,
       23,   34,   35,   34,   35,   34,   35,   25,   34,   35,
       25,   34,   35,   33,   34,   35,   20,   34,   35,    8,
       33,   34,   35,   18,   33,   34,   35,    6,   33,   34,
       35,   16,   33,   34,   35,    2,   33,   34,   35,    7,
       33,   34,   35,    5,   33,   34,   35,    9,   33,   34,
       35,   17,   33,   34,   35,    3,   33,   34,   35,   10,
       33,   34,   35,    1,   33,   34,   35,   11,   33,   34,
       35,   15,   33,   34,   35,    4,   33,   34,   35,   31,

       33,   34,   35,   30,   33,   34,   35,   29,   33,   34,
       35,    2,   30,   33,   34,   35,    9,   29,   33,   34,
       35,   19,   33,   34,   35,   14,   33,   34,   35,   12,
       33,   34,   35,   13,   33,   34,   35,    8,   14,   33,
       34,   35,    5,   12,   33,   34,   35,   13,   17,   33,
       34,   35,   32,   25,   27,   26,   33,   26,   27,   28,
       24,   27,   26,   26,   27
    } ;

static short int l[72] =
    {   0,
       -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,   -2,
       11,   13,   16,   18,   21,   24,   26,   28,   31,   34,
       37,   40,   44,   48,   52,   56,   60,   64,   68,   72,
       76,   80,   84,   88,   92,   96,  100,  104,  108,  112,
      117,  122,  126,  130,  134,  138,  143,  148,  153,  154,
      154,  155,  156,  157,  157,  157,  158,  158,  160,  160,
      160,  161,  162,  162,  163,  163,  163,  164,  164,  166,
      166
    } ;

static short int b[73] =
    {   0,
        0,   69,   82,   95,    0,  117,   43,  139,  152,  163,
      689,  125,  689,  689,  689,  203,  213,  225,  249,    0,
      689,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  141,  235,
      283,  305,  339,  366,    0,    0,  381,  393,  415,  315,
      425,    0,  435,  447,  462,  472,  482,  492,  502,  689,
      512,  587
    } ;

static short int d[73] =
    {   0,
       70,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   71,
       70,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   70,   70,
       70,   70,   70,   70,   72,   71,   70,   70,   70,   70,
       70,   72,   70,   70,   70,   70,   70,   70,   70,-32767,
       70,   70
    } ;

static short int n[817] =
    {   0,
       11,   11,   11,   11,   11,   11,   11,   11,   12,   13,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   12,   11,   14,   11,   11,   11,   11,   15,   11,
       11,   11,   16,   11,   16,   17,   11,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   11,   11,   11,
       11,   11,   11,   11,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       11,   11,   11,   11,   20,   11,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   11,   11,   11,   11,   11,   21,   42,   70,
       70,   70,   70,   49,   22,   23,   24,   25,   26,   27,
       28,   29,   70,   30,   31,   32,   37,   70,   33,   49,
       34,   38,   35,   21,   39,   36,   49,   70,   70,   37,
       22,   23,   24,   25,   40,   27,   28,   41,   70,   30,
       31,   32,   49,   70,   33,   21,   34,   70,   35,   70,
       70,   36,   22,   23,   24,   25,   26,   27,   28,   29,
       70,   30,   31,   32,   70,   70,   33,   21,   34,   70,

       35,   70,   70,   36,   22,   23,   24,   25,   26,   27,
       28,   29,   70,   30,   31,   32,   70,   43,   33,   70,
       34,   21,   35,   44,   42,   36,   45,   70,   46,   23,
       24,   25,   26,   27,   47,   29,   70,   48,   31,   32,
       70,   70,   33,   70,   34,   70,   35,   70,   50,   36,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       53,   70,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   54,   54,   53,   70,   51,   51,   51,   51,

       51,   51,   51,   51,   51,   51,   70,   70,   70,   70,
       70,   70,   55,   70,   70,   70,   54,   54,   70,   70,
       70,   70,   70,   70,   54,   54,   70,   70,   53,   70,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       70,   70,   70,   70,   55,   70,   70,   70,   54,   54,
       54,   54,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   57,   57,   70,   70,   70,   70,   70,   70,
       70,   70,   54,   54,   70,   70,   58,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   70,   70,   70,   70,

       70,   70,   70,   70,   57,   57,   59,   59,   60,   70,
       60,   70,   70,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   61,   63,   70,   63,   70,   70,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   59,   59,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       70,   70,   70,   70,   70,   70,   70,   66,   70,   66,
       65,   65,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   65,   65,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   68,   70,   68,   70,   70,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   70,
       70,   70,   70,   70,   70,   70,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   70,   70,   70,   70,   56,   70,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   70,   70,   70,   70,   70,   70,
       70,   62,   62,   62,   62,   62,   62,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   62,   62,   62,   62,   62,   62,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70
    } ;

static short int c[817] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,    7,    0,
        0,    0,    0,   12,    2,    2,    2,    2,    2,    2,
        2,    2,    0,    2,    2,    2,    3,    0,    2,   49,
        2,    3,    2,    4,    3,    2,   12,    0,    0,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    0,    4,
        4,    4,   49,    0,    4,    6,    4,    0,    4,    0,
        0,    4,    6,    6,    6,    6,    6,    6,    6,    6,
        0,    6,    6,    6,    0,    0,    6,    8,    6,    0,

        6,    0,    0,    6,    8,    8,    8,    8,    8,    8,
        8,    8,    0,    8,    8,    8,    0,    9,    8,    0,
        8,   10,    8,    9,    8,    8,    9,    0,   10,   10,
       10,   10,   10,   10,   10,   10,    0,   10,   10,   10,
        0,    0,   10,    0,   10,    0,   10,    0,   16,   10,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       18,    0,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   18,   18,   19,    0,   19,   19,   19,   19,

       19,   19,   19,   19,   19,   19,    0,    0,    0,    0,
        0,    0,   18,    0,    0,    0,   19,   19,    0,    0,
        0,    0,    0,    0,   18,   18,    0,    0,   51,    0,
       51,   51,   51,   51,   51,   51,   51,   51,   51,   51,
        0,    0,    0,    0,   18,    0,    0,    0,   19,   19,
       51,   51,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   52,   52,    0,    0,    0,    0,    0,    0,
        0,    0,   51,   51,    0,    0,   53,   53,   53,   53,
       53,   53,   53,   53,   53,   53,    0,    0,    0,    0,

        0,    0,    0,    0,   52,   52,   53,   53,   54,    0,
       54,    0,    0,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   57,    0,   57,    0,    0,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,   53,   53,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
        0,    0,    0,    0,    0,    0,    0,   59,    0,   59,
       58,   58,   59,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   61,   61,   61,   61,   61,   61,   61,   61,
       61,   61,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   58,   58,   64,   64,   64,   64,   64,   64,

       64,   64,   64,   64,   65,    0,   65,    0,    0,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   66,
       66,   66,   66,   66,   66,   66,   66,   66,   66,   67,
       67,   67,   67,   67,   67,   67,   67,   67,   67,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,    0,
        0,    0,    0,    0,    0,    0,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

       71,   71,    0,    0,    0,    0,   71,    0,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,    0,    0,    0,    0,    0,    0,
        0,   72,   72,   72,   72,   72,   72,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,   72,   72,   72,   72,   72,   72,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,

       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70
    } ;


FILE *yyin = stdin, *yyout = stdout;
static int yy_start, yy_b_buf_p, yy_c_buf_p, yy_e_buf_p;
static int yy_saw_eof = 1, yy_init = 1;
static char yy_ch_buf[YY_BUF_SIZE + 1];
static int yy_st_buf[YY_BUF_SIZE];
static char yy_hold_char;
char *yytext;
int yyleng;

static int input(void)
{
  int c;

  YY_DO_BEFORE_SCAN
  if (yy_c_buf_p == yy_e_buf_p) {
    int yy_n_chars;

    if (yy_saw_eof) {
      if (yywrap())
	 return (EOF);

      YY_INIT;
    }

    yy_b_buf_p = 0;
    YY_INPUT(yy_ch_buf, yy_n_chars, YY_MAX_LINE);

    if (yy_n_chars == YY_NULL) {
      yy_saw_eof = 1;

      if (yywrap())
	return (EOF);

      YY_INIT;
      return (input());
    }

    yy_c_buf_p = -1;
    yy_e_buf_p = yy_n_chars - 1;
  }

  c = yy_ch_buf[++yy_c_buf_p];

  YY_DO_BEFORE_ACTION;

  return (c);
}


static void unput(char c)
{
    YY_DO_BEFORE_SCAN;

    if (yy_c_buf_p == 0) {
	register int i;
	register int yy_buf_pos = YY_BUF_MAX;

	for (i = yy_e_buf_p; i >= yy_c_buf_p; --i) {
	    yy_ch_buf[yy_buf_pos] = yy_ch_buf[i];
	    yy_st_buf[yy_buf_pos] = yy_st_buf[i];
	    --yy_buf_pos;
	}

	yy_c_buf_p = YY_BUF_MAX - yy_e_buf_p;
	yy_e_buf_p = YY_BUF_MAX;
    }

    if (yy_c_buf_p <= 0)
	YY_FATAL_ERROR("pclex scanner push-back overflow");

    if (yy_c_buf_p >= yy_b_buf_p && yy_ch_buf[yy_c_buf_p] == '\n')
	yy_ch_buf[yy_c_buf_p - 1] = '\n';

    yy_ch_buf[yy_c_buf_p--] = c;

    YY_DO_BEFORE_ACTION;
}


YY_DECL
{
  register int yy_curst;
  register char yy_sym;
  int yy_n_chars, yy_lp, yy_iii, yy_buf_pos, yy_act, yy_full_match;




  if (yy_init) {
    YY_INIT;
    yy_start = 1;
    yy_init = 0;
  }
  goto get_next_token;

do_action:
  yy_full_match = yy_c_buf_p;

  for ( ; ; )	{
    YY_DO_BEFORE_ACTION

    switch (yy_act) {
case 1:
{       /* Identifikatorsatz Punkt */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return (T_PSATZ);
			}
	YY_BREAK
case 2:
{       /* Identifikatorsatz Flaeche */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return (T_FSATZ);
			}
	YY_BREAK
case 3:
{       /* Identifikatorsatz Linie */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return (T_LSATZ);
			}
	YY_BREAK
case 4:
{       /* Wertesatz (Merkmalswerte, Relationen) */
				yylval.numtok.num_line = yylineno;
				return (T_WSATZ);
			}
	YY_BREAK
case 5:
{       /* Kopfsatz */
				BEGIN 0;
				read_string (yylval.strtok.string);
				yylval.strtok.str_line = yylineno;
				return (T_HSATZ);
			}
	YY_BREAK
case 6:
{       /* Beschreibungssatz */
				BEGIN 0;
				yylval.strtok.str_line = yylineno;
				return (T_DSATZ);
			}
	YY_BREAK
case 7:
{       /* Geometriesatz */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return (T_GSATZ);
			}
	YY_BREAK
case 8:
{	/* BegleitObjektSatz */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return T_BSATZ;
			}
	YY_BREAK
case 9:
{	/* Text eines Begleitobjektes */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return T_ISATZ;
			}
	YY_BREAK
case 10:
{       /* Merkmalssatz */
				BEGIN merkmal;
				yylval.numtok.num_line = yylineno;
				return (T_MSATZ);
			}
	YY_BREAK
case 11:
{       /* Relationssatz */
				BEGIN Relation;
				yylval.numtok.num_line = yylineno;
				return (T_RSATZ);
			}
	YY_BREAK
case 12:
{	/* gleichrangige Relation */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return T_HRELSATZ;
			}
	YY_BREAK
case 13:
{	/* Komplexrelation */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return T_KRELSATZ;
			}
	YY_BREAK
case 14:
{	/* Begleitobjektrelation */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return T_BRELSATZ;
			}
	YY_BREAK
case 15:
{       /* Trennsatz */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return (T_TSATZ);
			}
	YY_BREAK
case 16:
{       /* EndeSatz */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return (T_ESATZ);
			}
	YY_BREAK
case 17:
{       /* KomplexObjekt */
				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				return T_KOSATZ;
			}
	YY_BREAK
case 18:
{	/* SteuerSatz */
				BEGIN Control;
				yylval.numtok.num_line = yylineno;
				return T_CSATZ;
			}
	YY_BREAK
case 19:
{	/* VerschnittDirektive */
			char NextIn;

				BEGIN 0;
				yylval.numtok.num_line = yylineno;
				NextIn = input();
				while (isspace(NextIn)) 
					NextIn = input();
				yylval.numtok.intnum = (NextIn == '-') ? TRUE : FALSE;
				return T_VSATZ;
			}
	YY_BREAK
case 20:
{       /* Kommentarsatz */
				BEGIN 0;
				read_string (yylval.strtok.string);
				yylval.strtok.str_line = yylineno;
				return (T_KSATZ);
			}
	YY_BREAK
case 21:
{       /* Zeilen zaehlen */
				yylval.numtok.num_line = yylineno++;
				return ('\n');
			}
	YY_BREAK
case 22:
case 23:
{
			register int scope_char = yytext[0];
			register int inchar;
			register char *cptr = yylval.strtok.string;

				BEGIN 0;
				while ((inchar = input()) != scope_char)
					*cptr++ = inchar;
				*cptr = '\0';
				yylval.strtok.str_line = yylineno;
				return (T_STRING);
			}
	YY_BREAK
case 24:
{       /* HexIntegerzahl */
				yylval.numtok.intnum = strtoul (yytext, NULL, 16);
				yylval.numtok.num_line = yylineno;
				return (T_HEXINTEGER);
			}
	YY_BREAK
case 25:
{       /* Integerzahl */
				yylval.numtok.intnum = atol (yytext);
				yylval.numtok.num_line = yylineno;
				return (T_INTEGER);
			}
	YY_BREAK
case 26:
case 27:
case 28:
{       /* Floatpointzahl */
				yylval.flttok.fltnum = atof (yytext);
				yylval.flttok.flt_line = yylineno;
				return (T_FLOAT);
			}
	YY_BREAK
case 29:
case 30:
{
				BEGIN 0;
				yylval.strtok.str_line = yylineno;
				return (*yytext);
			}
	YY_BREAK
case 31:
{
				BEGIN textmerkmal;
				yylval.strtok.str_line = yylineno;
				return ('A');
			}
	YY_BREAK
case 32:
;               /* ignorieren */
	YY_BREAK
case 33:
{
			/* Keyword */
			register int i;

			strncpy (yylval.strtok.string, yytext, NAMELEN);
			toUpper (yylval.strtok.string);
			/* ist ID ein reserviertes Wort ? */
			for (i = 0; keywords[i].lx ; i++) {
				if (!stricmp (keywords[i].id, yylval.strtok.string))
					break;
			}
			if (keywords[i].lx) {   /* ID ist Schluesselwort */
				yylval.strtok.str_line = yylineno;
/*				if (keywords[i].lx == T_ENTRY) {
				// alles bis zum ZeilenEnde als Token liefern
				register char *cptr = yylval.strtok.string;
				register int InChar;

					do {	// Leerraum ueberspringen
						InChar = input();
						if (!isspace(InChar))
							break;
					} while (TRUE);
					unput (InChar);
					while ((InChar = input()) != '\n')
						*cptr++ = InChar;
					unput (InChar);
				}
*/				return (keywords[i].lx);
			} 
			else {          /* kein Keyword --> Fehler */
				yylval.numtok.num_line = yylineno;
				return (T_IDENT);
			}
			}
	YY_BREAK
case 34:
;       /* alles andere schlicht ignorieren */
	YY_BREAK
case 35:
YY_DEFAULT_ACTION;
	YY_BREAK

    case YY_NEW_FILE:
      break;
    case YY_END_TOK:
      return (YY_END_TOK);
    default:
      YY_FATAL_ERROR("fatal pclex scanner internal error");
    }

get_next_token:
    YY_DO_BEFORE_SCAN

    yy_curst = yy_start;

    if (yy_ch_buf[yy_c_buf_p] == '\n')
      ++yy_curst;

    yy_b_buf_p = yy_c_buf_p + 1;

    do {
      if (yy_c_buf_p == yy_e_buf_p) {
	if (yy_e_buf_p >= YY_BUF_LIM) {
	  yy_n_chars = yy_e_buf_p - yy_b_buf_p;

	  if (yy_n_chars >= 0) {
	    for (yy_iii = 0; yy_iii <= yy_n_chars; ++yy_iii) {
	      yy_buf_pos = yy_b_buf_p + yy_iii;
	      yy_ch_buf[yy_iii] = yy_ch_buf[yy_buf_pos];
	      yy_st_buf[yy_iii] = yy_st_buf[yy_buf_pos];
	    }
	  }

	  yy_b_buf_p = 0;
	  yy_e_buf_p = yy_n_chars;

	  if (yy_e_buf_p >= YY_BUF_LIM)
	    YY_FATAL_ERROR("pclex input buffer overflowed");

	    yy_c_buf_p = yy_e_buf_p;
	  } else if (yy_saw_eof) {
saweof:		
	  if (yy_b_buf_p <= yy_e_buf_p)
	    break;
	  if (yywrap())
	    yy_act = YY_END_TOK;
	  else {
	    YY_INIT;
	    yy_act = YY_NEW_FILE;
	  }
	  goto do_action;
	}

	YY_INPUT((yy_ch_buf + yy_c_buf_p + 1), yy_n_chars, YY_MAX_LINE);

	if (yy_n_chars == YY_NULL) {
	  if (yy_saw_eof)
	    YY_FATAL_ERROR("pclex scanner saw EOF twice - shouldn't happen");
	  yy_saw_eof = 1;
	  goto saweof;
	}

	yy_e_buf_p += yy_n_chars;
      }

      ++yy_c_buf_p;
      yy_sym = yy_ch_buf[yy_c_buf_p];

      while (c[b[yy_curst] + yy_sym] != yy_curst)
	yy_curst = d[yy_curst];

      yy_curst = n[b[yy_curst] + yy_sym];
      yy_st_buf[yy_c_buf_p] = yy_curst;

    } while (b[yy_curst] != YY_JAM_BASE);

    if (yy_c_buf_p >= yy_b_buf_p) {
      yy_curst = yy_st_buf[yy_c_buf_p];
      yy_lp = l[yy_curst];

find_rule:
      for ( ; ; ) {
	if (yy_lp && yy_lp < l[yy_curst + 1]) {
	  yy_act = a[yy_lp];
	  goto do_action;
	}

	if (--yy_c_buf_p < yy_b_buf_p)
	  break;

	yy_curst = yy_st_buf[yy_c_buf_p];
	yy_lp = l[yy_curst];
      }
    }
    ++yy_c_buf_p;

    yy_act = YY_DO_DEFAULT;
  }
}


char *read_string (register char *cptr)
{
register char *cptr_old = cptr;

	while ((*cptr++ = input ()) != '\n')
		;
	*--cptr = '\0';
	unput ('\n');

return (cptr_old);
}

void skip_lines (char *pattern) {
register int c;

/* Satz suchen, der mit Kennzeichen aus pattern beginnt */
	do {
		c = next_line ();
	} while (strchr (pattern, c) == NULL);
	unput (c);
}

int next_line (void) {

	while (input () != '\n')
		;

return (input ());
}

static void toUpper (char *String) {
register char *cptr = String;

	while (*cptr) {
		if (islower(*cptr)) 
			*cptr = toupper(*cptr);
		cptr++;
	}
}
