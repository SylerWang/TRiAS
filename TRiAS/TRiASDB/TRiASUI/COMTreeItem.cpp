/*
  *****************************************************
  * Copyright:
  *   Datenmanagement- & Präsentationssysteme
  *   Weimarer Str. 1B
  *   D-98693 Ilmenau
  *   GERMANY
  *****************************************************
  * Module: Implementation, Klasse COMTreeItem: 
  *		Container für Informationen zu einem COM-Objekt
  *
  * Function: Klasse, welche alle Informationen zu 
  *		einem COM-Objekt aufnimmt, das in das 
  *		TreeControl des Dialogs CStdCtrlDlg eingefügt 
  *		wird
  *****************************************************
  * Created:        28.07.98  TWI
  * Last modified:  24.08.98  TWI   
  *****************************************************
  * Automated generated by D&P Documenter
  * DV: 1.0 *** FV: 1.0 *** Last documented: 25.08.98
  *****************************************************
*/

// COMTreeItem.cpp: Implementierung der Klasse CCOMTreeItem.
//
//////////////////////////////////////////////////////////////////////

#include "StdAfx.h"

#include "Strings.h"
#include "COMTreeItem.h"

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

//////////////////////////////////////////////////////////////////////
// Konstruktion/Destruktion
//////////////////////////////////////////////////////////////////////

/*
  *****************************************************
  * Routine:	CCOMTreeItem
  *
  * Function:	Copy-Konstruktor für CCOMTreeItem
  *****************************************************
  * input parameter:
  * - (CCOMTreeItem):
  *
  * - none
  *****************************************************
  * Created:        28.07.98  TWI
  * Last modified:  24.08.98  TWI   
  *****************************************************
  * Automated generated by D&P Documenter
  * DV: 1.0 *** FV: 1.0 *** Last documented: 25.08.98
  *****************************************************
*/

CCOMTreeItem::CCOMTreeItem( const CCOMTreeItem &cti )
{
	m_id			= cti.m_id;
	m_Unk			= cti.m_Unk;
	m_name			= cti.m_name;
	m_parentId		= cti.m_parentId;
	m_ParentUnk		= cti.m_ParentUnk;
	m_hBmpExp = cti.m_hBmpExp;
	m_hBmpColl = cti.m_hBmpColl;
	m_fIsIcon = cti.m_fIsIcon;
	m_imageIndex = cti.m_imageIndex;
	m_imageIndexExp = cti.m_imageIndexExp;

	m_hItem			= cti.m_hItem;
	m_selected		= cti.m_selected;
	m_expanded		= cti.m_expanded;
	m_HasChildren	= cti.m_HasChildren;
}

CCOMTreeItem &CCOMTreeItem::operator=(const CCOMTreeItem &cti)
{
	if (this != &cti) {
		m_id			= cti.m_id;
		m_Unk			= cti.m_Unk;
		m_name			= cti.m_name;
		m_parentId		= cti.m_parentId;
		m_ParentUnk		= cti.m_ParentUnk;
		m_hBmpExp = cti.m_hBmpExp;
		m_hBmpColl = cti.m_hBmpColl;
		m_fIsIcon = cti.m_fIsIcon;
		m_imageIndex = cti.m_imageIndex;
		m_imageIndexExp = cti.m_imageIndexExp;
		m_hItem			= cti.m_hItem;
		m_selected		= cti.m_selected;
		m_expanded		= cti.m_expanded;
		m_HasChildren	= cti.m_HasChildren;
	}
	return *this;
}

/*
  *****************************************************
  * Routine:	CCOMTreeItem
  *
  * Function:	Standard-Konstruktor für CCOMTreeItem
  *****************************************************
  * input parameter:
  * - none
  *
  * - none
  *****************************************************
  * Created:        28.07.98  TWI
  * Last modified:  24.08.98  TWI   
  *****************************************************
  * Automated generated by D&P Documenter
  * DV: 1.0 *** FV: 1.0 *** Last documented: 25.08.98
  *****************************************************
*/

CCOMTreeItem::CCOMTreeItem()
{
	m_id			= 0;
	m_name			= g_cbNil;
	m_Unk			= NULL;
	m_ParentUnk		= NULL;
	m_hItem			= NULL;
	m_selected		= FALSE;
	m_expanded		= FALSE;
	m_HasChildren	= FALSE;
	m_hBmpExp.hBmp  = NULL;
	m_hBmpColl.hBmp = NULL;
	m_fIsIcon		= false;
	m_imageIndex = -1;
	m_imageIndexExp = -1;
}

/*
  *****************************************************
  * Routine:	~CCOMTreeItem
  *
  * Function:	Destruktor für CCOMTreeItem
  *****************************************************
  * input parameter:
  * - none
  *
  * - none
  *****************************************************
  * Created:        28.07.98  TWI
  * Last modified:  24.08.98  TWI   
  *****************************************************
  * Automated generated by D&P Documenter
  * DV: 1.0 *** FV: 1.0 *** Last documented: 25.08.98
  *****************************************************
*/

CCOMTreeItem::~CCOMTreeItem()
{
}

HRESULT CCOMTreeItem::Save(LPSTREAM pStm)
{
ULONG _bytesWritten;

// Länge des Namens
int	_nameLength = m_name.GetLength() + 1; // wg. Null-terminiert

	RETURN_FAILED_HRESULT(pStm->Write(&_nameLength, sizeof(int), &_bytesWritten));
	RETURN_FAILED_HRESULT(pStm -> Write (m_name, _nameLength+1, &_bytesWritten));		// Name 
	RETURN_FAILED_HRESULT(pStm->Write(&m_parentId, sizeof(ULONG), &_bytesWritten));		// ID des Parent-Objektes
	RETURN_FAILED_HRESULT(pStm->Write(&m_expanded, sizeof(BOOL), &_bytesWritten));		// Attribut Expanded
	RETURN_FAILED_HRESULT(pStm->Write(&m_selected, sizeof(BOOL), &_bytesWritten));		// Attribut Selected

	return S_OK;
}

HRESULT CCOMTreeItem::Load(LPSTREAM pStm)
{
ULONG _bytesRead;
int _nameLength;

	RETURN_FAILED_HRESULT(pStm->Read(&_nameLength, sizeof(int), &_bytesRead));					// Länge des Namens

// Name 
LPSTR pName = m_name.GetBufferSetLength (_nameLength+1);

	RETURN_FAILED_HRESULT(pStm->Read(pName, sizeof(TCHAR), &_bytesRead));
	RETURN_FAILED_HRESULT(pStm->Read(&m_parentId, sizeof(ULONG), &_bytesRead));	// ID des Parent-Objektes
	RETURN_FAILED_HRESULT(pStm->Read(&m_expanded, sizeof(BOOL), &_bytesRead));	// Attribut Expanded
	RETURN_FAILED_HRESULT(pStm->Read(&m_selected, sizeof(BOOL), &_bytesRead));	// Attribut Selected
	return S_OK;
}

