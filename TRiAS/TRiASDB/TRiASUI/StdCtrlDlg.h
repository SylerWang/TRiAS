///////////////////////////////////////////////////////////////////////////
// @doc 
// @module StdCtrlDlg.h | Description goes here
// @end

#if !defined(_STDCTRLDLG_H__3460D3E8_62C9_11D2_9EDE_006008447800__INCLUDED_)
#define _STDCTRLDLG_H__3460D3E8_62C9_11D2_9EDE_006008447800__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000


/*
  *****************************************************
  * Copyright:
  *   Datenmanagement- & Präsentationssysteme
  *   Weimarer Str. 1B
  *   D-98693 Ilmenau
  *   GERMANY
  *****************************************************
  * Module: Header, Klasse CStdCtrlDlg: 
  *		Dialog, der die Anzeige eines Eigenschaften-
  *		dialoges ermöglicht
  *
  * Function: enthält das TreeViewControl des Stingray
  *		Objective Toolkit 5.2 zur Anzeige der 
  *		Eigenschaftsdialoge der selektierten COM-
  *		Objekte
  *****************************************************
  * Created:        17.06.98  TWI
  * Last modified:  24.08.98  TWI   
  *****************************************************
  * Automated generated by D&P Documenter
  * DV: 1.0 *** FV: 1.0 *** Last documented: 25.08.98
  *****************************************************
*/

#include <ospace/std/map>
#include <secall.h>

#include "COMHelper.h"
#include "COMTreeItem.h"
#include "PopupMenu.h"
#include "CoolBtn.h"

using namespace ospace::std;

#include "resource.h"

/////////////////////////////////////////////////////////////////////////////
// SmartIF's
DefineSmartInterface(PropertyPage);		// WPropertyPage
DefineSmartInterface(PropertyPageSite);	// WPropertyPageSite

/////////////////////////////////////////////////////////////////////////////
// Dialogfeld CStdCtrlDlg 

class SECTreeCtrl;
class CTRiASOptionDlg;

class CStdCtrlDlg : public CDialog
{
//	typedef list<CCOMTreeItem> CComTreeItems;
	typedef map<ULONG, CCOMTreeItem, less<ULONG> > CComTreeItems;

private:
    DECLARE_SERIAL(CStdCtrlDlg);

// Membervariablen für das TreeControl
	CImageList			m_imageList;
	SECTreeCtrl			m_SECTreeCtrl;

// Membervariablen für das TabControl
	WPropertyPageSite	m_IPropPageSite;
	list<WPropertyPage> m_IPPList;

	CSize				m_curMaxPageSize;

	CCoolBtn			m_Actions;
	
// Membervariablen für den Dialogzustand...
// ...für Laufzeit
	BOOL m_DlgIsModified;
	BOOL m_DataChanged;
	BOOL m_WasShown;
	BOOL m_StateLoaded;
	BOOL m_fEnabled;
	BOOL m_fShowApply;

// ...für Persistenz
	BOOL				m_WordWrapEnabled;
	BOOL				m_HasLinesEnabled;
	BOOL				m_HasButtonsEnabled;
	BOOL				m_MultiSelectEnabled;

	CString				m_strCaption;
	CTRiASOptionDlg	*m_pTarget;
	CPopUpMenu *m_pPopup;
	UINT m_uiDefault;
	INT_PTR m_ContextHandle;
		
// Konstruktion
public:

	// Membervariable für den Zustand des TreeControls
	BOOL				m_TreeExpanded;

	// <TEST>
	CComTreeItems	m_CTIList;
	// <\TEST>

// Dialogfelddaten
	//{{AFX_DATA(CStdCtrlDlg)
	enum { IDD = IDD_STDCTRLDLG };
	CButton	m_Frame;
	CStatic	m_Text;
	CStatic	m_Rectangle;
	CTabCtrl	m_PropSheet;
	CButton		m_OKBtn;
	CButton		m_CancelBtn;
	//}}AFX_DATA
	CButton	m_ApplyBtn;

// Überschreibungen
	// Vom Klassen-Assistenten generierte virtuelle Funktionsüberschreibungen
	//{{AFX_VIRTUAL(CStdCtrlDlg)
	public:
	virtual void OnFinalRelease();
	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV-Unterstützung
	//}}AFX_VIRTUAL

// Implementierung
public:

// Memberfunktionen für das Einfügen von COM-Objekten vor der Dialoganzeige
	unsigned long InsertFolderItem(
			LPCSTR name,					// in:	Bezeichnung des COM-Objektes für das TreeControl
			unsigned long parent = 0);		// in:	ID des Parent-COM-Objektes
	unsigned long InsertItem(
			REFCLSID clsid,					// in:	CLSID des COM-Objektes
			LPCSTR name,					// in:	Bezeichnung des COM-Objektes für das TreeControl
			unsigned long parent = 0);		// in:	ID des Parent-COM-Objektes
	unsigned long InsertItem(
			IUnknown * pUnk,				// in:	Ptr auf IUnknown-Interface des COM-Objektes
			LPCSTR name,					// in:	Bezeichnung des COM-Objektes für das TreeControl
			BOOL fHasIcons,					// folgende HANDLE's sind HICON's 
			HANDLE hBmpCollapsed,			// in:	(GDI-)Handle der Bitmap collapsed
			HANDLE hBmpExpanded = NULL,		// in:	(GDI-)Handle der Bitmap expanded
			unsigned long parent = 0);		// in:	ID des Parent-COM-Objektes

//	unsigned long InsertItem(
//			REFCLSID clsid,					// in:	CLSID des COM-Objektes
//			IUnknown * pUnk,				// in:	Ptr auf IUnknown-Interface des COM-Objektes
//			LPCSTR name,					// in:	Bezeichnung des COM-Objektes für das TreeControl
//			HINSTANCE hInst,				// in:	Handle auf das Modul
//			long int rID,					// in:	ResourceID des Bitmaps im Modul hInst
//			unsigned long parent = 0);		// in:	ID des Parent-COM-Objektes
//	unsigned long InsertItem(
//			REFCLSID clsid,					// in:	ClassID des Objektes
//			IUnknown * pUnk,				// in:	Ptr auf IUnknown-Interface des COM-Objektes
//			LPCSTR name,					// in:	Bezeichnung des COM-Objektes für das TreeControl
//			unsigned long parent = 0);		// in:	ID des Parent-COM-Objektes

	BOOL HasDataChanged();
	BOOL DlgWasShown();

// Memberfunktionen für Persistenz
	HRESULT Load(LPSTREAM pStm);
	HRESULT Save(LPSTREAM pStm, BOOL fClearDirty);

	CStdCtrlDlg(CWnd* pParent = NULL);	// Standardkonstruktor
	virtual ~CStdCtrlDlg();				// Destruktor
	BOOL Create();
	BOOL FillTreeCtrl(void);
	void SetCallback (CTRiASOptionDlg *pTarget) { m_pTarget = pTarget; }
	void ShutDown();

	DECLARE_INTERFACE_MAP()

	BEGIN_INTERFACE_PART(PersistStreamInit, IPersistStreamInit)
		STDMETHOD_(HRESULT, GetClassID)(CLSID* pClassID);
		STDMETHOD_(HRESULT, IsDirty)(void);
		STDMETHOD_(HRESULT, Load)(LPSTREAM pStm);
		STDMETHOD_(HRESULT, Save)(LPSTREAM pStm, BOOL fClearDirty);
		STDMETHOD_(HRESULT, GetSizeMax)(ULARGE_INTEGER* pcbSize);
		STDMETHOD_(HRESULT, InitNew)(void);
	END_INTERFACE_PART(PersistStreamInit)

public:
// Properties
	void SetCaption (LPCSTR pcCaption)
	{
		m_strCaption = pcCaption;
		if (IsWindow(GetSafeHwnd()))
			SetWindowText (pcCaption);
	}
	CString GetCaption() { return m_strCaption; }

	void SetContextHandle (INT_PTR hCtx)
	{
		m_ContextHandle = hCtx;
	}
	INT_PTR GetContextHandle() { return m_ContextHandle; }

	void SetMultiSelect(BOOL fFlag)
	{
		m_MultiSelectEnabled = fFlag;
		if (IsWindow(GetSafeHwnd()))
			m_SECTreeCtrl.EnableMultiSelect(fFlag);
	}
	BOOL GetMultiSelect() { return m_MultiSelectEnabled; }

	void SetHasApply(BOOL fFlag)
	{
		ASSERT(!IsWindow(GetSafeHwnd()));		// muß bei Initialisierung passieren
		m_fShowApply = fFlag;
	}
	BOOL GetHasApply() { return m_fShowApply; }

	void SetWordWrap(BOOL fFlag)
	{
		m_WordWrapEnabled = fFlag;
		if (IsWindow(GetSafeHwnd()))
			m_SECTreeCtrl.EnableWordWrap(fFlag);
	}
	BOOL GetWordWrap() { return m_WordWrapEnabled; }

	void SetHasLines(BOOL fFlag)
	{
		m_HasLinesEnabled = fFlag;
		if (IsWindow(GetSafeHwnd()))
			ToggleStyle(TVS_HASLINES, m_HasLinesEnabled);
	}
	BOOL GetHasLines() { return m_HasLinesEnabled; }

	void SetHasButtons(BOOL fFlag)
	{
		m_HasButtonsEnabled = fFlag;
		if (IsWindow(GetSafeHwnd()))
			ToggleStyle(TVS_HASBUTTONS, m_HasButtonsEnabled);
	}
	BOOL GetHasButtons() { return m_HasButtonsEnabled; }

	void SetParentWnd(CWnd *pWnd)
	{
		m_pParentWnd = pWnd;
		if (IsWindow(GetSafeHwnd()))
			SetParent(pWnd);
	}
	CWnd *GetParentWnd() { return m_pParentWnd; }

	HRESULT SelectItem (ULONG ulItem, BOOL fSelect);
	HRESULT GetChildItem (ULONG ulParent, ULONG *pulItem);
	HRESULT GetNextItem (ULONG ulItem, DWORD dwMode, ULONG *pulNextItem);
	BOOL GetItemName (ULONG ulItem, CString &rStr);
	HRESULT GetItemObject (ULONG ulItem, IUnknown **ppIObj);
	HRESULT RefreshAllItems();
	HRESULT RefreshItem (ULONG ulItem);

	HRESULT get_ActItem (ULONG *pulActItem);
	HRESULT SetFirstVisible (ULONG ulItem);
	HRESULT GetParentItem (ULONG ulChild, ULONG *pulParent);

protected:

	BEGIN_INTERFACE_PART(PropPageSite, IPropertyPageSite)
		STDMETHOD_(HRESULT, OnStatusChange)(DWORD dwFlags);
		STDMETHOD_(HRESULT, GetLocaleID)(LCID * pLocaleID);
		STDMETHOD_(HRESULT, GetPageContainer)(IUnknown ** ppUnk);
		STDMETHOD_(HRESULT, TranslateAccelerator)(LPMSG pMsg);
	END_INTERFACE_PART(PropPageSite)

// IPropertyPageSite
	HRESULT OnStatusChange(DWORD dwFlags);
	HRESULT GetLocaleID(LCID * pLocaleID);
	HRESULT GetPageContainer(IUnknown ** ppUnk);
	HRESULT TranslateAccelerator(LPMSG pMsg);

// IPersistStreamInit
	HRESULT GetClassID(CLSID* pClassID);
	HRESULT IsDirty(void);
	HRESULT GetSizeMax(ULARGE_INTEGER* pcbSize);
	HRESULT InitNew(void);

// Memberfunktionen für den Dialogzustand
	void InitTreeCtrlEnv();

	void InitDlgState();
	void UpdateTreeCtrlState(CComTreeItems ctiList);
	void SetModifiedFlag(BOOL state);
	void SetDataChangedFlag(BOOL state);
	void SetShownFlag(BOOL state);
	void SetStateLoadedFlag(BOOL state);
	BOOL IsModified();
	BOOL StateWasLoaded();
	void GetSelectedItems(
		CComTreeItems &ctiList,		// in:	Liste der CCOMTreeItem-Objekte
		CComTreeItems &objList);		// out:	Liste der selektierten Objekte
	void ClearIPPList(list<WPropertyPage> &ippList);
	void ClearCAUUIDList(list<CAUUID *> &list);
	void ClearCTIList(CComTreeItems &ctiList);

// Memberfunktionen für COM-Objekte
	HRESULT GetCurIPPOfTab(
		IPropertyPage **ppIPP);				// out:	Ptr auf IPropertyPage-Interface der aktuellen PropertyPage
	HRESULT Apply();
	void PropPageHelp();

// Memberfunktionen für die Anzeige der Eigenschaften der COM-Objekte im Tree
//	int GetBitmapOfCOMObject(CCOMTreeItem cti);
	int GetBitmapOfCOMObject(
		HINSTANCE hInst,					// in:	Handle auf das Modul
		long int bmpID);					// in:	ResourceID des Bitmaps
	int GetBitmapOfCOMObject(
		BOOL fIsIcon, HBITMAPICON hBmp);						// in:	(GDI-)Handle der Bitmap

	HRESULT GetPropsOfTreeItemList(
		CComTreeItems objects,			// in:	Liste der CCOMTreeItem-Objekte
		list<CAUUID *> &pps);				// out:	Liste der Ptr auf die entsprechenden CAUUID-Strukturen
	HRESULT ShowObjectProps(
		CComTreeItems selItems);		// in: Liste der selektierten Objekte
	HRESULT ShowEmptyPP(UINT uiMsg);
	HRESULT ShowEmptyPP(LPCTSTR pcMsg);
	HRESULT UpdateTabCtrl(
		unsigned long cObjects,				// in:	Anzahl der betroffenen Objekte
		IUnknown ** ppUnk,					// in:	Ptr auf Array der IUnknown's der COM-Objekte
		CAUUID * pPages);					// in:	Ptr auf CAUUID-Struktur der gemeinsamen Eigenschaften der COM-Objekte
	void CalcPageRect(
		CRect &tabRect,						// in:	Rectangle des TabControls
		CSize &maxSize,						// in:	maximale Größe der einzuhängenden PropertyPages
		CRect &rect);						// out:	Rectangle der Seite
	HRESULT InitPages(
		IPropertyPageSite * pIPPS,			// in:	Ptr auf IPropertyPageSite-Interface des Rahmens
		CAUUID * pPages,					// in:	Ptr auf Array der CLSIDs der darzustellenden PropertyPages
		unsigned long cObjects,				// in:	Anzahl der COM-Objekte
		IUnknown ** ppUnk,					// in:	Ptr auf Array der IUnknown's der COM-Objekte
		list<WPropertyPage> &ippList,		// out:	Liste der IPropertyPage-Interface-Ptr der PropertyPage-Objekte
		SIZE &maxSize);						// out:	Maße der größten Property Page in pPages


// Memberfunktionen für die Verwaltung der internen Objektliste
	unsigned long InsertItem(CCOMTreeItem &item);

//	unsigned long InsertItem(CTIPERSISTSTRUCT ctiPS);
//	unsigned long InsertItem(
//			REFCLSID clsid,					// in:	CLSID des COM-Objektes
//			IUnknown * pUnk,				// in:	Ptr auf IUnknown-Interface des COM-Objektes
//			LPCSTR name,					// in:	Bezeichnung des COM-Objektes für das TreeControl
//			CString objPath,				// in:	Pfad, unter dem das Modul (*.DLL/*.OCX) zu finden ist
//			CString modPath,				// in:	Pfad, unter dem das Modul (*.DLL/*.OCX) zu finden ist,welches das
//											//		zugehörige Bitmap enthält
//			HINSTANCE hInst,				// in:	Handle auf das Modul
//			long int rID,					// in:	ResourceID des Bitmaps im Modul hInst
//			unsigned long parent);			// in:	ID des Parent-COM-Objektes

	BOOL IsRootObject(CCOMTreeItem &item);	// in:	Objekt, dessen CLSID überprüft wird
	BOOL IsRootObject(
			CComTreeItems &l,			// in:	Liste aller zu durchsuchenden Objekte
			unsigned long id);				// in:	Objekt-ID, die gesucht wird
	BOOL IsRootObject(unsigned long id);	// in:	eine Zahl, die auf 0 geprüft wird

	BOOL IsListElement(
			unsigned long id);				// in:	Objekt-ID, die gesucht wird
	BOOL GetListElement(
			CComTreeItems &objList,	// in:	Liste aller zu durchsuchenden Objekte
			unsigned long id,				// in:	ID zur Identifizierung des Objektes
			CCOMTreeItem &item);			// out:	ermitteltes CCOMTreeItem
	BOOL GetListElement(
			CComTreeItems &objList,	// in:	Liste aller zu durchsuchenden Objekte
			HTREEITEM hti,					// in:	HTREEITEM, das gesucht wird
			CCOMTreeItem &item);			// out:	ermitteltes CCOMTreeItem
	HTREEITEM GetHandleOfElement(
			unsigned long id);				// in:	ID zur Identifizierung des Objektes
	BOOL GetElementOfHandle(
			HTREEITEM hItem,				// in:	ID zur Identifizierung des Objektes
			CCOMTreeItem &rItem);
	BOOL UpdateListElement(
			CComTreeItems &objList,	// out:	Liste der Objekte
			CCOMTreeItem &item);				// in:	zu aktualisierendes Item
	void GetChildObjects(
			CComTreeItems &objList,	// in:	Liste aller zu durchsuchenden Objekte
			CComTreeItems &childList);	// out: Liste der Parent-Objekte
	void GetChildObjects(
			CCOMTreeItem &item,				// in:	Parent-Objekt
			CComTreeItems &objList,	// in:	Liste aller zu durchsuchenden Objekte
			CComTreeItems &childList);	// out: Liste der Child-Objekte
	void RecurseChildren(
			CComTreeItems &itemsList);	// out: Liste der Child-Objekte einer Ebene
	void InsertTreeObject(
			HTREEITEM h,					// in:	Handle auf das Parent-Item im TreeCtrl
			CCOMTreeItem &curItem);			// out:	einzufügendes Objekt
//	void InsertTreeObject(
//			CCOMTreeItem &curItem);			// out:	einzufügendes Objekt
	void UpdateSelectedItems(
		CComTreeItems &objList);
	void UpdateExpandedItems(
		CComTreeItems &objList);

// Memberfunktionen für die Verwaltung des TabControls
	HRESULT UpdatePropApplyBtn();
	HRESULT UpdatePropHelpBtn();

// Memberfunktionen für die Verwaltung des TreeControls
	void ToggleStyle(DWORD lStyleMask, BOOL fSetFlag);				// in:	Style, dessen Ausprägung umgeschaltet wird
	void HandleEmptyPage (BOOL fEnable, LPCTSTR pcText = NULL);		// zwischen PPages und static controls hin und herschalten
	HRESULT FreeCurrentPages(bool *pfHideEmtyPP = NULL);

// Funktionen für Popupmenu
	HTREEITEM MatchPositionToHTreeItem (UINT *puiFlags = NULL);
	BOOL InitPopupMenu (CPopUpMenu *pPopup, BOOL fMenuBtn = FALSE);
	LRESULT ExecuteCommand (UINT uiCmd);
	void InitCoolButton(BOOL fMenuBtn);

// Generierte Nachrichtenzuordnungsfunktionen
	//{{AFX_MSG(CStdCtrlDlg)
	virtual void OnOK();
	virtual BOOL OnInitDialog();
	afx_msg void OnClickTree(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnItemexpandedTree(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnSelchangedTree(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnSelChangingTab(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnSelChangeTab(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnGetdispinfoTree(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnItemexpandingTree(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnRclickTree(NMHDR* pNMHDR, LRESULT* pResult);
	afx_msg void OnApply();
	afx_msg void OnMenuSelect(UINT nItemID, UINT nFlags, HMENU hSysMenu);
	afx_msg LRESULT OnPreparePopupMenu(WPARAM, LPARAM);
	afx_msg LRESULT OnDestroyPopupMenu(WPARAM, LPARAM);
	afx_msg LRESULT OnInitCoolButton(WPARAM, LPARAM);
	virtual void OnCancel();
	afx_msg void OnActions();
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};

///////////////////////////////////////////////////////////////////////////////
// Offsets der Bitmaps in der Imagelist
#define IMG_DEFAULTICON		0
#define IMG_FOLDERCOLLAPSED	2
#define IMG_FOLDEREXPANDED	3

#endif // !defined(_STDCTRLDLG_H__3460D3E8_62C9_11D2_9EDE_006008447800__INCLUDED_)
