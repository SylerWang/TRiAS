// $Header: $
// Copyright© 1998-2000 TRiAS GmbH Potsdam, All rights reserved
// Created: 25.02.2000 11:15:18
//
// This file was generated by the TRiASDB Data Server Wizard V1.01.076 (#HK000225)
//
// @doc 
// @module FastdbDatabase.h | Datenbankobjekt TRiASDB Data Server Fastdb

#if !defined(_FASTDBDATABASE_H__0CEE8B38_48B4_4B1E_8EA8_9C660D70CC12__INCLUDED_)
#define _FASTDBDATABASE_H__0CEE8B38_48B4_4B1E_8EA8_9C660D70CC12__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

// Header include diagnostics
#if defined(_TRIAS_DBG_HEADER_DIAGNOSTICS)
#pragma message(__TIME__": include " __FILE__ )
#endif

#include "resource.h"       // main symbols

#include <Com/OleItemContainerSupport.h>
#include <Atl/CieThis.h>

#include "FastdbPropertyBase.h"
#include "FastdbPropertySupport.h"

/////////////////////////////////////////////////////////////////////////////
// SmartIF's
DefineSmartInterface(Moniker);
DefineSmartInterface(TRiASCSTransform);
DefineSmartInterface(TRiASObjectsCollection);

/////////////////////////////////////////////////////////////////////////////
// ProgID des zugehörigen Database-Objektes
extern "C" const OLECHAR __declspec(selectany) g_cbDatabase[] = L"TRiASDB.FastdbDatabase.1";

/////////////////////////////////////////////////////////////////////////////
// CFastdbDatabase
class ATL_NO_VTABLE CFastdbDatabase : 
	public CComObjectRootEx<CComObjectThreadModel>,
	public CComCoClass<CFastdbDatabase, &CLSID_FastdbDatabase>,
	public CErrSupport<CFastdbDatabase, &IID_ITRiASDatabase>,
	public CManagePropertyBase<CFastdbDatabase>,
	public CManagePropertySupport<CFastdbDatabase>,
	public COleItemContainerSupport<CFastdbDatabase>,
	public IDispatchImpl<ITRiASAccessDatabase, &IID_ITRiASAccessDatabase, &LIBID_TRiASDB,
		TYPELIB_TRiASDB_VERSION_MAJOR, TYPELIB_TRiASDB_VERSION_MINOR>,
	public IDispatchImpl<ITRiASDatabase, &IID_ITRiASDatabase, &LIBID_TRiASDB,
		TYPELIB_TRiASDB_VERSION_MAJOR, TYPELIB_TRiASDB_VERSION_MINOR>
{
public:
	CFastdbDatabase() :
		m_bstrName(g_cbNil)
	{
	}

	DECLARE_REGISTRY_RESOURCEID(IDR_FASTDBDATABASE_RGS)
	DECLARE_PROTECT_FINAL_CONSTRUCT()

	BEGIN_COM_MAP(CFastdbDatabase)
		COM_INTERFACE_ENTRY(ITRiASDatabase)
		COM_INTERFACE_ENTRY(ITRiASAccessDatabase)
		COM_INTERFACE_ENTRY(ITRiASBase)
		COM_INTERFACE_ENTRY(ITRiASPropertyBase)			// --> CManagePropertyBase
		COM_INTERFACE_ENTRY(ITRiASPropertySupport)		// --> CManagePropertySupport
		COM_INTERFACE_ENTRY(ISupportErrorInfo)
		COM_INTERFACE_ENTRY(IOleItemContainer)			// --> COleItemContainerSupport
		COM_INTERFACE_ENTRY(IOleContainer)				// --> COleItemContainerSupport
		COM_INTERFACE_ENTRY(IParseDisplayName)			// --> COleItemContainerSupport
		COM_INTERFACE_ENTRY2(IDispatch, ITRiASDatabase)
		COM_INTERFACE_ENTRY_THIS()
	END_COM_MAP()

	BEGIN_PROPERTYSUPPORT_MAP(CFastdbDatabase)
		PROPERTYSUPPORT_ENTRY(g_cbObjectMap, CLSID_GenObjectMap)		// Zuordnung ObjectCursor --> pIObject
		PROPERTYSUPPORT_ENTRY(g_cbObjectsMap, CLSID_GenObjectMap)		// Zuordnung ObjectsCursor --> pIObjects
		PROPERTYSUPPORT_ENTRY(g_cbFeatureMap, CLSID_GenObjectMap)		// Zuordnung FeatureCursor --> pIFeature
		PROPERTYSUPPORT_ENTRY_DEFAULT(CLSID_TRiASAutoSaveProperty)
	END_PROPERTYSUPPORT_MAP()

	BEGIN_OLEITEMCONTAINERSUPPORT_MAP(CFastdbDatabase)
		OLEITEMCONTAINERSUPPORT_ENTRYEX(g_cbMkObjectsDef, GetObjectsDef, ParseObjectsDef)
		OLEITEMCONTAINERSUPPORT_ENTRYEX(g_cbMkObjectDef, GetObjectDef, ParseObjectDef)
	END_OLEITEMCONTAINERSUPPORT_MAP()

	HRESULT FinalConstruct();
	void FinalRelease();

	IDispatch *GetDispatch() { return static_cast<ITRiASDatabase *>(this); }

// ISupportsErrorInfo
	STDMETHOD(InterfaceSupportsErrorInfo)(REFIID riid);

public:
// ITRiASDatabase
	STDMETHOD(get_VersionLong)(LONG * pVal);
	STDMETHOD(get_Handle)(INT_PTR * pVal);
	STDMETHOD(get_IsDirty)(VARIANT_BOOL * pVal);
	STDMETHOD(put_IsDirty)(VARIANT_BOOL pVal);
	STDMETHOD(get_OpenedAsCopy)(VARIANT_BOOL * pVal);
	STDMETHOD(get_CouldOpenTarget)(VARIANT_BOOL * pVal);
	STDMETHOD(get_SchemaUpdatable)(VARIANT_BOOL * pVal);
	STDMETHOD(get_Name)(BSTR * pVal);
	STDMETHOD(get_Version)(BSTR * pVal);
	STDMETHOD(get_CollatingOrder)(LONG * pVal);
	STDMETHOD(get_Connect)(BSTR * pVal);
	STDMETHOD(get_Transactions)(VARIANT_BOOL * pVal);
	STDMETHOD(get_Updatable)(VARIANT_BOOL * pVal);
	STDMETHOD(get_Temporary)(VARIANT_BOOL * pVal);
	STDMETHOD(put_Temporary)(VARIANT_BOOL pVal);
	STDMETHOD(get_TemporaryName)(BSTR * pVal);
	STDMETHOD(get_Type)(BSTR * pVal);
	STDMETHOD(get_StorageMode)(DATABASESTORAGEMODE * pVal);
	STDMETHOD(CreateDatabase)(BSTR Name, BSTR Locale, BSTR Source);
	STDMETHOD(CreateDatabaseFromFiles)(IUnknown * FileNames, BSTR Locale, BSTR Source);
	STDMETHOD(CreateDatabaseOnStg)(IUnknown *pIUnk, BSTR Name, BSTR Locale, BSTR Source);
	STDMETHOD(OpenDatabase)(BSTR Name, VARIANT_BOOL Exclusive, VARIANT_BOOL ReadOnly, VARIANT_BOOL ModTrack, BSTR Source);
	STDMETHOD(OpenFilesAsDatabase)(IUnknown * FileNames, VARIANT_BOOL Exclusive, VARIANT_BOOL ReadOnly, VARIANT_BOOL ModTrack, BSTR Source);
	STDMETHOD(OpenStorageAsDatabase)(IUnknown *pIStorage, VARIANT_BOOL Exclusive, VARIANT_BOOL fReadOnly, VARIANT_BOOL ModTrack, BSTR Source);
	STDMETHOD(Save)();
	STDMETHOD(SaveAs)(BSTR NewName);
	STDMETHOD(Close)();
	STDMETHOD(BeginTrans)();
	STDMETHOD(ClearModificationLog)(LONG Entry);
	STDMETHOD(CommitTrans)();
	STDMETHOD(Rollback)();
	STDMETHOD(ReLoad)(RELOADDATABASE ToReLoad);
	STDMETHOD(RefreshChangesFromModificationLog)(/*[in]*/ ITRiASRefreshChangesCallback *pICallback);

// ITRiASBase
	STDMETHODIMP get_Application(IDispatch **pVal);
	STDMETHODIMP put_Application(IDispatch *newVal);
	STDMETHODIMP get_Parent(IDispatch **pVal);
	STDMETHODIMP put_Parent(IDispatch *newVal);

// ITRiASAccessDatabase
	STDMETHOD(get_Views)(ITRiASViews **pVal);
	STDMETHOD(get_StartViewName)(BSTR *pVal);
	STDMETHOD(get_ObjectsDefs)(ITRiASObjectsCollection **pVal);
	STDMETHOD(get_ObjectsDef)(VARIANT vItem, VARIANT_BOOL fCreate, BSTR Type, ITRiASObjects * *pVal);
	STDMETHOD(get_Envelope)(ENVELOPETYPE rgType, IDispatch **pVal);
	STDMETHOD(get_ObjectCount)(long *pVal);
	STDMETHOD(get_AttachedCS)(BSTR bstrDbName, BSTR *pbstrAssocCS);
	STDMETHOD(get_ConnectionFilter)(/*[out, retval]*/ ITRiASConnectionFilter **ppIGeom);
	STDMETHOD(put_ConnectionFilter)(/*[in]*/ ITRiASConnectionFilter *pIGeom);

// ITRiASPropertyBase
	STDMETHOD(CreateProperty)(BSTR bstrKey, ITRiASProperty **ppIProp)
		{ return CManagePropertySupport<CFastdbDatabase>::CreateProperty (bstrKey, ppIProp); }
	STDMETHOD(RemoveProperty)(BSTR bstrKey)
		{ return CManagePropertySupport<CFastdbDatabase>::RemoveProperty (bstrKey); }

protected:
// Koordinatensystem behandeln
	HRESULT InitCoordSystemService();
	HRESULT ShutdownCoordSystemService();

// ReLoad-Funktionalität
	HRESULT OnReLoadObjects();
	HRESULT OnReLoadEnvelope();

	HRESULT EnsureObjectsDefs (ITRiASObjectsCollection **pVal = NULL);

// Datenbank ist geöffnet
	BOOL IsOpened() { return m_DB.IsOpened(); }

// OleItemContainerSupport (s. BEGIN_OLEITEMCONTAINERSUPPORT_MAP)
	HRESULT GetObjectsDef (LPCTSTR pcItem, DWORD dwSpeedNeeded, REFIID riid, LPVOID *ppvObj, bool fTestRunningOnly);
	HRESULT GetObjectDef (LPCTSTR pcItem, DWORD dwSpeedNeeded, REFIID riid, LPVOID *ppvObj, bool fTestRunningOnly);
	HRESULT ParseObjectsDef (LPCTSTR pcItem, ULONG ulSkipped, ULONG *pulEaten, IMoniker **ppmkOut);
	HRESULT ParseObjectDef (LPCTSTR pcItem, ULONG ulSkipped, ULONG *pulEaten, IMoniker **ppmkOut);

public:
// direkter Zugriff auf Datenbank
	dbDatabase *GetDatabase() { return &m_DB; }

private:
	__Interface<IDispatch> m_Application;
	__Interface<IDispatch> m_Parent;

	CComBSTR m_bstrName;		// Name dieser Database
	CIID m_CtfGuid;				// Guid des Koordinatensystems dieser Datenquelle

	WTRiASObjectsCollection m_ObjectsDefs;	// alle Objektklassen dieser Datenquelle

// spezifische Datenmember
	CDBDatabase m_DB;			// Datenbank
};

///////////////////////////////////////////////////////////////////////////////
// Zugriff auf die zugehörige Datenbank+
inline dbDatabase *GetRelatedDatabase(IUnknown *pTarget)
{
dbDatabase *pDB = NULL;

	COM_TRY {
	__Interface<ITRiASDatabase> DB;
	CFastdbDatabase *pFastDB = NULL;

		THROW_FAILED_HRESULT(FindSpecificParent(pTarget, DB.ppi()));
		THROW_FAILED_HRESULT(QueryImplementation(DB, &pFastDB));
		pDB = pFastDB -> GetDatabase();

	} COM_CATCH_RETURN(NULL);
	return pDB;
}

#endif // !defined(_FASTDBDATABASE_H__0CEE8B38_48B4_4B1E_8EA8_9C660D70CC12__INCLUDED_)
