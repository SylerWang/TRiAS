// $Header: $
// Copyright© 1998-2001 TRiAS GmbH Potsdam, All rights reserved
// Created: 27.04.2001 16:50:09
//
// This file was generated by the TRiASDB Data Server Wizard V1.02.115 (#HK010427)
//
// @doc 
// @module TRiASOGCEngine.h | Databaseengine für TRiASDB Data Server TRiASOGC

#if !defined(_TRIASOGCDBENGINE_H__BCAF4E8F_B105_4058_B0B4_A8253B12702A__INCLUDED_)
#define _TRIASOGCDBENGINE_H__BCAF4E8F_B105_4058_B0B4_A8253B12702A__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

// Header include diagnostics
#if defined(_TRIAS_DBG_HEADER_DIAGNOSTICS)
#pragma message(__TIME__": include " __FILE__ )
#endif

#include "resource.h"       // main symbols
#include "CPTRiASOGCDBEngineEvents.h"
#include "OGISDataProviderEnum.h"

/////////////////////////////////////////////////////////////////////////////
// CTRiASOGCDBEngine
class ATL_NO_VTABLE CTRiASOGCDBEngine : 
	public CComObjectRootEx<CComObjectThreadModel>,
	public CErrSupport<CTRiASOGCDBEngine, &IID_ITRiASDBEngine>,
	public CComCoClass<CTRiASOGCDBEngine, &CLSID_TRiASOGCDBEngine>,
	public IConnectionPointContainerImpl<CTRiASOGCDBEngine>,
	public CProxyITRiASDBEngineEvents<CTRiASOGCDBEngine>,
	public IDispatchImpl<ITRiASDBEngine, &IID_ITRiASDBEngine, &LIBID_TRiASDB,
		TYPELIB_TRiASDB_VERSION_MAJOR, TYPELIB_TRiASDB_VERSION_MINOR>
{
public:
	CTRiASOGCDBEngine()
		: m_fIsStarted(false),
		  m_bstrUserName(g_cbNil), m_bstrPassword(g_cbNil)
	{
	}

	_ATLX_DEBUG_OBJECTCOUNT_IMPL(CTRiASOGCDBEngine)

//	DECLARE_REGISTRY_RESOURCEID(IDR_TRIASOGCDBENGINE_RGS)
	static HRESULT WINAPI UpdateRegistry(BOOL bRegister);

	DECLARE_PROTECT_FINAL_CONSTRUCT()
	DECLARE_CLASSFACTORY_SINGLETON(CTRiASOGCDBEngine)	// DBEngines existieren nur einmal

	BEGIN_COM_MAP(CTRiASOGCDBEngine)
		COM_INTERFACE_ENTRY(ITRiASDBEngine)
		COM_INTERFACE_ENTRY(ISupportErrorInfo)
		COM_INTERFACE_ENTRY(IDispatch)
	END_COM_MAP()

	BEGIN_CONNECTION_POINT_MAP(CTRiASOGCDBEngine)
		CONNECTION_POINT_ENTRY(IID_ITRiASDBEngineEvents)
	END_CONNECTION_POINT_MAP()

	HRESULT FinalConstruct();
	void FinalRelease();

// ISupportsErrorInfo
	STDMETHOD(InterfaceSupportsErrorInfo)(REFIID riid);

// ITRiASDBEngine
public:
	STDMETHOD(get_Version)(BSTR *pVal);
	STDMETHOD(put_Password)(BSTR bstrPwd);
	STDMETHOD(put_UserName)(BSTR bstrUser);
	STDMETHOD(get_Description)(BSTR *pVal);

	STDMETHOD(Start)(STARTMODE Mode);
	STDMETHOD(EnumDataBaseTypes)(IUnknown **ppIEnum);
	STDMETHOD(Stop)();

public:
// Konvertieren Blob <--> _DGMGeometry
	HRESULT StorageToGeometry (const VARIANT &Blob, GEOMETRYTYPE *prgType, IDispatch **ppIGeometry) throw(_com_error &)
	{
		_ASSERTE(m_Service.IsValid());
		return m_Service -> StorageToGeometry (Blob, prgType, ppIGeometry);
	}
	HRESULT GeometryToStorage (GEOMETRYTYPE rgType, IDispatch *pIGeometry, VARIANT *pBlob) throw(_com_error &)
	{
		_ASSERTE(m_Service.IsValid());
		return m_Service -> GeometryToStorage (rgType, pIGeometry, pBlob);
	}

protected:
	static HRESULT UpdateRegistry(BOOL bRegister, COGISDataProviderEnum& rEnum, BSTR bstrProgId);

private:
	bool m_fIsStarted;			// Engine wurde gestartet
	CComBSTR m_bstrUserName;	// Nutzername (optional)
	CComBSTR m_bstrPassword;	// Paßword (optional)

	WTRiASCSStorageService m_Service;	// Service für Geometrieoperationen
};

/////////////////////////////////////////////////////////////////////////////
// globale Instanz der DBEngine
extern CTRiASOGCDBEngine *g_pDBEngine;
extern STARTMODE g_rgStartMode;

#endif // !defined(_TRIASOGCDBENGINE_H__BCAF4E8F_B105_4058_B0B4_A8253B12702A__INCLUDED_)
