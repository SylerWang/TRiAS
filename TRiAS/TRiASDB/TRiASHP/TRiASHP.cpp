// $Header: $
// Copyright© 1998-2000 TRiAS GmbH Potsdam, All rights reserved
// Created: 10.05.2000 19:36:40
//
// This file was generated by the TRiASDB Data Server Wizard V1.02.086 (#HK000510)
//
// @doc
// TRiASHP.cpp : Implementation of DLL Exports.

// Note: Proxy/Stub Information
//      To merge the proxy/stub code into the object DLL, add the file 
//      dlldatax.c to the project.  Make sure precompiled headers 
//      are turned off for this file, and add _MERGE_PROXYSTUB to the 
//      defines for the project.  
//
//      If you are not running WinNT4.0 or Win95 with DCOM, then you
//      need to remove the following define from dlldatax.c
//      #define _WIN32_WINNT 0x0400
//
//      Further, if you are running MIDL without /Oicf switch, you also 
//      need to remove the following define from dlldatax.c.
//      #define USE_STUBLESS_PROXY
//
//      Modify the custom build rule for TRiASHP.idl by adding the following 
//      files to the Outputs.
//          TRiASHP_p.c
//          dlldata.c
//      To build a separate proxy/stub DLL, 
//      run nmake -f TRiASHPps.mk in the project directory.

#include "stdafx.h"
#include "resource.h"

#include <initguid.h>
#if defined(_DEBUG)
#include <ospace/file/path.h>
#endif // defined(_DEBUG)

#include "TRiASHP.h"
#include "dlldatax.h"
#include "Strings.h"

#include "TRiASHP_i.c"

#include "TRiASHPApp.h"

#include "TRiASHPDBEngine.h"
#include "TRiASHPDatabase.h"
#include "TRiASHPObjectsCollection.h"
#include "TRiASHPObjects.h"
#include "TRiASHPObject.h"
#include "TRiASHPFeatures.h"
#include "TRiASHPFeature.h"
#include "TRiASHPGeoFeatures.h"
#include "TRiASHPGeoFeature.h"
#include "TRiASHPCursorProperty.h"

#ifdef _MERGE_PROXYSTUB
extern "C" HINSTANCE hProxyDll;
#endif

CComModule _Module;

BEGIN_OBJECT_MAP(ObjectMap)
	OBJECT_ENTRY(CLSID_TRiASHPDBEngine, CTRiASHPDBEngine)
	OBJECT_ENTRY(CLSID_TRiASHPDatabase, CTRiASHPDatabase)
	OBJECT_ENTRY(CLSID_TRiASHPObjectsCollection, CTRiASHPObjectsCollection)
	OBJECT_ENTRY(CLSID_TRiASHPObjects, CTRiASHPObjects)
	OBJECT_ENTRY(CLSID_TRiASHPObject, CTRiASHPObject)
	OBJECT_ENTRY(CLSID_TRiASHPFeatures, CTRiASHPFeatures)
	OBJECT_ENTRY(CLSID_TRiASHPFeature, CTRiASHPFeature)
	OBJECT_ENTRY(CLSID_TRiASHPGeoFeatures, CTRiASHPGeoFeatures)
	OBJECT_ENTRY(CLSID_TRiASHPGeoFeature, CTRiASHPGeoFeature)
	OBJECT_ENTRY(CLSID_TRiASHPCursorProperty, CTRiASHPCursorProperty)
END_OBJECT_MAP()

BEGIN_MESSAGE_MAP(CTRiASHPApp, CWinApp)
	//{{AFX_MSG_MAP(CTRiASHPApp)
		// NOTE - the ClassWizard will add and remove mapping macros here.
		//    DO NOT EDIT what you see in these blocks of generated code!
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

CTRiASHPApp theApp;

///////////////////////////////////////////////////////////////////////////////
// Callback zu TRiAS
DEXEXTENSIONPROC g_pDexExtensionProc = NULL;

#if defined(_DEBUG)
bool g_fGlobalLic = false;
#endif // defined(_DEBUG)

#if _TRiAS_VER < 0x0400
DWORD g_dwVer4 = 0;
#endif // _TRiAS_VER < 0x0400

///////////////////////////////////////////////////////////////////////////////
// WindowsVersion
bool IsWin31 (void) { return theApp.IsWin31(); }
bool IsWin40 (void) { return theApp.IsWin40(); }
bool IsWin41 (void) { return theApp.IsWin41(); }
bool IsWin50 (void) { return theApp.IsWin50(); }
bool IsWin32s (void) { return theApp.IsWin32s(); }
bool IsWinNT (void) { return theApp.IsWinNT(); }

BOOL CTRiASHPApp::InitInstance()
{
#ifdef _MERGE_PROXYSTUB
    hProxyDll = m_hInstance;
#endif

#if defined(_DEBUG)
// globalen Lizensierungsstatus abfragen
	{
	CRegKey key;

		if (ERROR_SUCCESS == key.Open(HKEY_CURRENT_USER, TEXT("Software")) &&
			ERROR_SUCCESS == key.Open(key, REG_COMPANY_KEY) &&
			ERROR_SUCCESS == key.Open(key, REG_PRODUCT_KEY) && 
			ERROR_SUCCESS == key.Open(key, TEXT("Config")))
		{
		DWORD dwFlags = 0;

			key.QueryValue (dwFlags, TEXT("GlobalLicense"));
			g_fGlobalLic = (0 != dwFlags) ? true : false;
		}
	}
#endif // defined(_DEBUG)

#if _TRiAS_VER < 0x0400
// FakeTRiAS4
	{
	CRegKey key;

		if (ERROR_SUCCESS == key.Open(HKEY_CURRENT_USER, TEXT("Software")) &&
			ERROR_SUCCESS == key.Open(key, REG_COMPANY_KEY) &&
			ERROR_SUCCESS == key.Open(key, REG_PRODUCT_KEY) && 
			ERROR_SUCCESS == key.Open(key, TEXT("Config")))
		{
			g_dwVer4 = 0;
			key.QueryValue (g_dwVer4, TEXT("FakeTRiAS4"));
		}
	}
#endif // _TRiAS_VER < 0x0400

// TRiAS-Kopplung
HMODULE hTrias = GetModuleHandle (NULL);

	g_pDexExtensionProc = (DEXEXTENSIONPROC)GetProcAddress (hTrias, TEXT("DEXEXTENSIONPROC"));
	_ASSERTE(NULL != g_pDexExtensionProc);
	
    _Module.Init(ObjectMap, m_hInstance, &LIBID_TRiASHPLib);
    return CWinApp::InitInstance();
}

int CTRiASHPApp::ExitInstance()
{
// TRiAS-Kopplung rücksetzen
	g_pDexExtensionProc = NULL;

// jetzt alles aufgeben
    _Module.Term();

#if defined(_DEBUG)
char cbBuffer[_MAX_PATH];

	::GetModuleFileName (m_hInstance, cbBuffer, sizeof(cbBuffer));

os_path path (cbBuffer);
os_string str (path.filename());

	TRACE1(TEXT("%s: exiting: \r\n"), str.c_str());
	if (_Module.GetLockCount() != 0) 
		TRACE1(TEXT("\tInfo: Global ATL lock count: %ld\r\n"), _Module.GetLockCount());
	
	TRACE0(TEXT("\t"));

HRESULT hr = AfxDllCanUnloadNow();

	if (S_OK != hr)
		TRACE1(TEXT("Info: AfxDllCanUnloadNow returns: 0x%lx\r\n"), hr);
#endif // _DEBUG

    return CWinApp::ExitInstance();
}

/////////////////////////////////////////////////////////////////////////////
// Used to determine whether the DLL can be unloaded by OLE

STDAPI DllCanUnloadNow(void)
{
#ifdef _MERGE_PROXYSTUB
    if (PrxDllCanUnloadNow() != S_OK)
        return S_FALSE;
#endif
    AFX_MANAGE_STATE(AfxGetStaticModuleState());
    return (AfxDllCanUnloadNow()==S_OK && _Module.GetLockCount()==0) ? S_OK : S_FALSE;
}

/////////////////////////////////////////////////////////////////////////////
// Returns a class factory to create an object of the requested type

STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
{
#ifdef _MERGE_PROXYSTUB
    if (PrxDllGetClassObject(rclsid, riid, ppv) == S_OK)
        return S_OK;
#endif
    return _Module.GetClassObject(rclsid, riid, ppv);
}

/////////////////////////////////////////////////////////////////////////////
// DllRegisterServer - Adds entries to the system registry

STDAPI DllRegisterServer(void)
{
#ifdef _MERGE_PROXYSTUB
    HRESULT hRes = PrxDllRegisterServer();
    if (FAILED(hRes))
        return hRes;
#endif
    // registers object, typelib and all interfaces in typelib
    return _Module.RegisterServer(TRUE);
}

/////////////////////////////////////////////////////////////////////////////
// DllUnregisterServer - Removes entries from the system registry

STDAPI DllUnregisterServer(void)
{
#ifdef _MERGE_PROXYSTUB
    PrxDllUnregisterServer();
#endif
    return _Module.UnregisterServer(TRUE);
}


