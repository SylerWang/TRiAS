// $Header: $
// Copyright© 1998-2000 TRiAS GmbH Potsdam, All rights reserved
// Created: 10.05.2000 19:36:40 
//
// This file was generated by the TRiASDB Data Server Wizard V1.02.086 (#HK000510)
//
// @doc
// @module TRiASHPGeometryBlob.h | Geometrie eines Objektes GeoMedia-like aufbereiten

#if !defined(_TRIASHPGEOMETRYBLOB_H__234BC95B_1FE8_4D7D_A18A_F962CFFBEEFD__INCLUDED_)
#define _TRIASHPGEOMETRYBLOB_H__234BC95B_1FE8_4D7D_A18A_F962CFFBEEFD__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

// Header include diagnostics
#if defined(_TRIAS_DBG_HEADER_DIAGNOSTICS)
#pragma message(__TIME__": include " __FILE__ )
#endif

#include <ospace/std/vector>
#include <ospace/std/algorithm>

namespace geometryblob {

// Geometrie-Basisstruktur
	typedef struct tagPOINTBASE {
		double X;
		double Y;
		double Z;
	} POINTBASE;

	typedef vector<double> double_v;
	typedef vector<double>::iterator double_i;

/////////////////////////////////////////////////////////////////////////////
// Klasse, die aus einem Geometriefeld ein Geometrie-Blob in einem SAFEARRAY macht
	class CBlobService
	{
	public:
	// Zugriffsfunktionen
		typedef HRESULT (CBlobService::* GETBLOBSIZEPROC)(/*[in]*/unsigned long lCnt, /*[in]*/ void *pData, /*[out]*/unsigned long *plSize);
		typedef HRESULT (CBlobService::* MAKEBLOBPROC)(/*[in]*/unsigned long ulCnt, /*[in]*/double_i itx, /*[in]*/double_i ity, /*[in]*/POINTBASE *pNormal, /*[in]*/ void *pData, /*[in,out]*/BYTE *pBlob);
		typedef HRESULT (CBlobService::* MAKEVERTICESPROC)(/*[in]*/BYTE *pBlob, /*[in]*/double_v &rX, /*[in]*/double_v &rY, /*[in]*/ void *pData);

		typedef struct tagMAKEBLOBDATA {
			const CLSID *pClsId;
			GETBLOBSIZEPROC GetBlobSize;
			MAKEBLOBPROC MakeBlob;
			MAKEVERTICESPROC MakeVertices;
		} MAKEBLOBDATA;

		typedef struct tagTEXTBLOBDATA {
			double dRotation;
			long lFlags;
			string strText;
		} TEXTBLOBDATA;

	public:
		CBlobService() {}
		~CBlobService() {}

		MAKEBLOBDATA *GetMakeBlobData() 
		{
			static MAKEBLOBDATA s_cbMakeBlobs[] = {
				{ &CLSID_TRiASCSPointGeometry, GetPointGeometrySize, MakePointGeometryBlob, MakePointVertices },
				{ &CLSID_TRiASCSPolylineGeometry, GetPolylineGeometrySize, MakePolylineGeometryBlob, MakePolylineVertices },
				{ &CLSID_TRiASCSPolygonGeometry, GetPolygonGeometrySize, MakePolygonGeometryBlob, MakePolygonVertices },
				{ &CLSID_TRiASCSTextPointGeometry, GetTextGeometrySize, MakeTextGeometryBlob, MakeTextVertices },
				{ NULL, NULL, NULL, NULL },
			};
			return s_cbMakeBlobs;
		}

	// GETBLOBSIZEPROC
		HRESULT GetPointGeometrySize (unsigned long lCnt, void *pData, unsigned long *plSize);
		HRESULT GetPolylineGeometrySize (unsigned long lCnt, void *pData, unsigned long *plSize);
		HRESULT GetPolygonGeometrySize (unsigned long lCnt, void *pData, unsigned long *plSize);
		HRESULT GetTextGeometrySize (unsigned long lCnt, void *pData, unsigned long *plSize);

	// MAKEBLOBPROC
		HRESULT MakePointGeometryBlob (unsigned long ulCnt, double_i itx, double_i ity, POINTBASE *pNormal, void *pData, BYTE *pBlob);
		HRESULT MakePolylineGeometryBlob (unsigned long ulCnt, double_i itx, double_i ity, POINTBASE *pNormal, void *pData, BYTE *pBlob);
		HRESULT MakePolygonGeometryBlob (unsigned long ulCnt, double_i itx, double_i ity, POINTBASE *pNormal, void *pData, BYTE *pBlob);
		HRESULT MakeTextGeometryBlob (unsigned long ulCnt, double_i itx, double_i ity, POINTBASE *pNormal, void *pData, BYTE *pBlob);

	// MAKEVERTICESPROC
		HRESULT MakePointVertices (BYTE *pBlob, double_v &rX, double_v &rY, void *pData);
		HRESULT MakePolylineVertices (BYTE *pBlob, double_v &rX, double_v &rY, void *pData);
		HRESULT MakePolygonVertices (BYTE *pBlob, double_v &rX, double_v &rY, void *pData);
		HRESULT MakeTextVertices (BYTE *pBlob, double_v &rX, double_v &rY, void *pData);

	public:
		HRESULT GetBlobSize (REFCLSID rClsId, unsigned long lCnt, void *pData, unsigned long *plSize);
		HRESULT MakeBlob (REFCLSID rClsId, unsigned long ulCnt, double_i itx, double_i ity, POINTBASE *pNormal, void *pData, BYTE *pBlob);
		HRESULT MakeVertices (REFCLSID rClsId, BYTE *pBlob, double_v &rX, double_v &rY, void *pData);
	};

/////////////////////////////////////////////////////////////////////////////
// Helperfunktionen
	HRESULT CreateSABlobFromVertices (double_v &rX, double_v &rY, POINTBASE *pNormal, void *pData, REFCLSID rClsId, SAFEARRAY **pSA);
	HRESULT CreateBlobFromVertices (unsigned long ulCnt, double_i itx, double_i ity, POINTBASE *pNormal, void *pData, REFCLSID rClsId, void **pBlob, unsigned long *plSize);
	HRESULT CreateSABlobBoundaryFromArray (unsigned long lCnt, void **ppData, unsigned long *pSizes, SAFEARRAY **pSA);

	HRESULT CreateVerticesFromSABlob (SAFEARRAY *pSA, double_v &rX, double_v &rY, void *pData, REFCLSID rClsId);
	HRESULT CreateVerticesFromBlob (BYTE *pBlob, double_v &rX, double_v &rY, void *pData, REFCLSID rClsId);
	HRESULT CreateArrayFromSABlobBoundary (SAFEARRAY *pSA, vector<BYTE *> &rBlobs, vector<unsigned long> &rSizes);

	BOOL BlobHasBoundaryGeometry (SAFEARRAY *pSA);

} // namespace geometryblob

#endif // !defined(_TRIASHPGEOMETRYBLOB_H__234BC95B_1FE8_4D7D_A18A_F962CFFBEEFD__INCLUDED_)
