// Datenbank - GeoDB-Deklaration für DIRIS
// File: RISN_V19.DDS
// Version für Compound-Documents

// History
// V5.00.00.011:	Textobjekte mit Key
// V5.00.00.014:	IdentSatz mit Objektzählern, GUID im Objektsatz
// V5.00.00.015:	Schlüssel in VMO und VIO
// V5.00.00.016:	Stützpunktfolgen jetzt gepackt gespeichert
// V5.00.00.017:	Schlüssel in VMO und VIO mit getauschten Elementen
// V5.00.00.018:	Pseudoversion wegen Fehler in KeyCmp etc.
// V5.00.00.019:	TRiAS --> MyTRiAS

database 
	ris				// Defaultname der AusgabeDatei
	[2048]			// Default-Pagegröße der Streams 
	extension ris	// Default-Dateierweiterung einer erzeugten DB
{
// Versionsnumer
	version 5.00.00.019;

// Kantenliste
	data file "Kanten"			contains kal;
// V5.00.00.016: spl wird nicht mehr benutzt
// Stützpunktliste
	data file "Stützpunkte"		contains spl, longspl;
// Knotenpunktliste
	data file "Knotenpunkte"	contains kpl, pol;
// Maschenliste
	data file "Maschen"			contains mal;
// Kantenfolgeliste
	data file "Kantenfolge"		contains kfk, kfm;
// Geometrie - Objekt
	data file "GeometrieObjekt"	contains vgo, vzo;
// Objektliste
	data file "Objekte"			contains old_obl, obl;
// Objekt - Geometrie
	data file "ObjektGeometrie"	contains vol, voa;
// Objekt - Merkmale
	data file "ObjektMerkmal"	contains vom, mi;
// Merkmalsliste
	data file "Merkmale"		contains mkl;
// Merkmale - Objekt
	data file "MerkmalObjekt"	contains old_vmo, vmo;
// Objekt - Relationen
	data file "ObjektRelation"	contains vor;
// Relationsliste
	data file "Relationen"		contains rel;
// Identifikatorliste
	data file "Identifikatoren"	contains old_idl, idl;
// Identifikator - Objekt
	data file "IdentObjekt"		contains old_vio, vio;
// Relationsattribut - Relation
	data file "RelAttribute"	contains vre;
// Gegenüberstellung von Relation und Gegenrelation
	data file "RelationsArt"	contains ral;
// Textdatei
	data file "Textmerkmale"	contains kdbt, fdbt;

// Key - Dateien für den Einstieg in die Datenbank
// Geometriezugriff
	htree key files "HTreeKey1" and "HTreeKey2" contain kcont, mcont;
	qtree key files "QTreeKey1" and "QTreeKey2" contain kpkrd;
// Merkmalsinformation
	btree key file "MerkmalKey"	contains mk;            
// Identifikator
	btree key file "IdentKey"	contains old_idn, idn;           
// Relationsart
	btree key file "RelationsKey"	contains rat;

// DB-Headerfile (Properties)
	data file "Header"			contains head, fhead;
	btree key file "HeaderKey"	contains hdidn;

// Dateien für SichtInformationen
	data file "Sichten" 		contains Sicht;
	data file "Visualisierung"	contains PAttribs, LAttribs, 
										 FAttribs, TAttribs;
	btree key file "SichtKey" 	contains SichtName;

// Datei für ObjektSatzErweiterungen
	data file "Objekte2" 		contains RelTyp;

///////////////////////////////////////////////////////////////////////////////
// V5.00.00.011: Textobjekte mit Key
// Schlüssel für Textmerkmale
	btree key file "TextKey"	contains info;

///////////////////////////////////////////////////////////////////////////////
// V5.00.00.014: IdentsSatz mit Objektzählern, GUID im Objektsatz
// Schlüssel für ObjektGUID's
	btree key file "ObjektGuid"	contains guid;

///////////////////////////////////////////////////////////////////////////////
// V5.00.00.015: Schlüssel in VMO und VIO
// V5.00.00.017: Schlüssel in VMO und VIO jetzt mit getauschten Elementen
// Schlüssel für MerkmalsRückverkettung
	btree key file "FeatureBack"	contains MCodeY;
// Schlüssel für IdentifikatorRückverkettung
	btree key file "IdentBack"	contains IdentY;

///////////////////////////////////////////////////////////////////////////////
// V5.00.00.019: GUID für Objektklassen
	btree key file "IdentGuid"	contains idguid;

///////////////////////////////////////////////////////////////////////////////
// Basisinformationen
	record kal {    /* Kantenliste */
		long zap;       /* Anfangspunkt */
		long zep;       /* Endpunkt */
		long zlm;       /* linke Masche */
		long zrm;       /* rechte Masche */
		long zkvgo;     /* Verweis auf Objekte */
		long zksp;      /* Verweis auf Stützpunkte */
		long asp;       /* Anzahl der Stützpunkte */
		long wi;        /* Winkel */
		key struct {    /* Kantencontainer */
			long kxmin;
			long kxmax;
			long kymin;
			long kymax;
		} kcont;
	}
	record kpl {    /* Knotenpunktliste */
		long zkpvgo;    /* Verweis auf Objekte */
		long zkpkfk;    /* Verweis auf kfk */
		struct {        /* Knotenpunktkoordinate */
			long kpx;
			long kpy;
		} pkrd;
		long zkpma;
	}
	record spl {		// Stützpunktliste (ab V5.00.00.016 nicht mehr verwendet)
		long spx;			// Punktkoordinate
		long spy;
		long znsp;			// next spl
		long dummyspl[10];	// Version 5.00.00.016
	}
	record mal {    /* Maschenliste */
		long zmkfm;     /* Verweis auf Kantenfolgeliste-Masche */
		long zmvgo;     /* Verweis auf Objekte */
		key struct {    /* Maschencontainer */
			long mxmin;
			long mxmax;
			long mymin;
			long mymax;
		} mcont;
		long zmvzo;
	}
	record kfk {    /* Kantenfolgeliste für Kanten */
		long zkfkk;     /* Verweis auf Kantenliste */
		long znkfk;     /* next kfk */
	}
	record kfm {    /* Kantenfolgeliste für Maschen */
		long zkfmk;     /* Verweis auf Kantenliste */
		long znkfm;     /* next kfm */
	}
	record old_obl {    /* Objektliste */
		long ozovor;     /* Verweis auf Relationen */
		long ozoid;      /* Verweis auf Identifikatorliste */
		long ozovom;     /* Verweis auf Merkmale */
		long ozokp;      /* Knotenpunkte */
		long ozovol;     /* Kantenliste */
		long ozovoma;    /* Maschenliste */
	//
	//	Die RelationsMaske enthält Informationen über sämtliche Relationen, die
	//	dieses Objekt mit anseren Objekten besitzt.
	//		Bit 0:	Objekt ist Teil von Komplexobjekt
	//		Bit 1:	Objekt ist Komplexobjekt
	//		Bit 2:	Objekt besitzt gleichrangige Relation
	//		Bit 3:	Objekt besitzt BegleitObjekt
	//		Bit 4:	Objekt ist BegleitObjekt
	//
		char ormaske;	/* Relationsmaske */
	//
	//	Das folgende Byte dient zur erweiterten Objektbeschreibung
	//		Bit 0:	Objekt ist TextObjekt
	//		Bit 1:  Objekt ist abhängiges TextObjekt
	//		Bit 2:	Objekt ist SachObjekt
	//
		char ostatus;	/* Objektbeschreibung */ 
		long odummy[4];	/* V5.00.00.014 */
	}
	record rel {    /* Relationenliste */
		long zrera;     /* Verweis auf Relationsattribut */
		long zol1;      /* erstes Objekt */
		long zol2;      /* zweites Objekt */
	}
	record old_idl {    /* Identifikatorliste */
		unique key long old_idn;   /* Identifikator */
		long ozvio;      /* Verweis auf Objekte, ab V5.00.00.014: sonstige Objekte */
		long ozMerki;	/* Zeiger in MerkmalsKette */
		long ozRelid;	/* Zeiger in RelationsSatz (RelTyp) */

	/* die folgenden Felder ab V5.00.00.014 */
		long olpvio;		/* Zähler der Punktobjekte */
		long ozpvio;		/* Punktobjekte */
		long ollvio;		/* Zähler der Linienobjekte */
		long ozlvio;		/* Linienobjekte */
		long olfvio;		/* Zähler der Flächenobjekte */
		long ozfvio;		/* Flächenobjekte */
		long oltvio;		/* Zähler der Textobjekte */
		long oztvio;		/* Texttobjekte */
		long olkvio;		/* Zähler der Komplexobjekte */
		long ozkvio;		/* Komplexobjekte */

		long idummy[4];		/* V5.00.00.019 */
	}
	record mkl {    /* Merkmalsliste */
		unique key long mk;     /* Merkmal */
		long typ;       /* Merkmalstyp */
		long zmkvmo;    /* Verweis auf Objekte */

	/* die folgenden Felder ab V5.00.00.019 */
		double mklcreate;			/* creation date */
		double mklmodify;			/* modification date */
	}
	record mi {     /* Merkmalsinformation */
		long znmi;      /* next mi */
		long mw[2];     /* Merkmalswerte */
	}
	record fdbt {	/* Folgesatz eines Textmerkmales */
		char infof[44];	/* weiter Text */
		long zndbtf;	/* weiter TextSatz */
	}

///////////////////////////////////////////////////////////////////////////////
// Verbindungsinformationen
	record vgo {    /* Geometrie -> Objekt */
		long zvgoo;     /* Verweis auf Objektliste */
		long znvgo;     /* next vgo */
	}
	record vzo {    /* Verweis auf innere Objekte einer Masche */
		long zvzoo;     /* Verweis auf Objektliste */
		long znvzo;     /* next vzo */
	}
	record vol {    /* Objekt -> Kante */
		long zvolk;     /* Verweis auf Kantenliste */
		long znvol;     /* next vol */
	}
	record voa {    /* Objekt -> Masche */
		long zvomam;    /* Verweis auf Maschenliste */
		long znvoma;    /* next vof */
	}
	record vom {    /* Objekt -> Merkmal */
		long zvommk;    /* Verweis auf Merkmalsliste */
		long znmk;      /* next Merkmal */
		long zvommi;    /* Verweis auf Merkmalsinfo */
		long zomo;	/* Verweis zurück zum Objekt */
	}
	record old_vmo {    /* Merkmal -> Objekte */
	/* der folgende Zeiger kann entweder in die OBL, die IDL oder die
	   SICHT zeigen, je nachdem, ob es sich um ein Merkmal eines Objektes, 
	   eines Identifikators oder einer Sicht handelt. Die ältesten
	   Bits dieses Zeigers verschlüsseln diese Dateien: 
			00 - OBL, also kompatibel zu bisherigem
			01 - IDL	und
			10 - SICHT
	 */
		long ozvmoo;     /* Verweis auf Objektliste */
		long oznvmo;     /* next vmo */
	}
	record vor {    /* Objekt -> Relation */
		long zvorel;    /* Verweis auf Relationsliste */
		long znvor;     /* next vor */
	}
	record old_vio {    /* Identifikator -> Objekt */
		long zvioo;     /* Verweis auf Objektliste */
		long znvio;     /* next vio */
	}
	record vre {    /* Verbindung Relationsart - Relationen */
		long zvrere;    /* Verweis auf Relationsliste */
		long znvre;     /* next vre */
	}
	record ral {
		unique key long rat;    /* Relationsattribut */
		long zravre;            /* Verbindung zurück zu Relationen */
		short maske;		/* Relationsmaske */
	}               

	record pol {    /* Knotenpunktliste -- Einzelobjekte */
		long zpvgo;     /* Verweis auf Objekte */
		long zpkfk;     /* Verweis auf kfk */
		key struct {    /* Knotenpunktkoordinate */
			long px;
			long py;
		} kpkrd;
		long zpma;
	}

	record head {   /* DB-Headerfile */
		unique key long hdidn[4];       /* Suchschlüssel */
		char text[60];			// #HK960126: nur 60 Bytes, dafür Flags
		long hdrflags;
		long zntext;            /* nächster Satz */
	}
	record fhead {  /* DB-Headerfile, Fortsetzungssatz */
		char textf[80];         /* Text */
		long ztextf;            /* nächster Satz */
	}

/* SatzStrukturen für SichtInformationen */
	record Sicht {  /* eine Sicht der Datenbasis */
		unique key char SichtName[40];     /* Name der Sicht */
		short IDNum;    /* Anzahl der IdentifikatorSätze im Set */
		short IDSet;    /* Zeiger auf Id-Liste */
		short ONNum;    /* Anzahl der ON-Sätze im Set */
		short ONSet;    /* Zeiger auf ObjektListe */
		long ObjRgn;	/* Objekt, welches ClippingRgn ist */
		long zMerkm;	/* Zeiger in MerkmalsKette */
		long zRelat;	/* Zeiger in RelationsSatz (RelTyp) */
	}
	record PAttribs { /* Element der VisInfo-Liste */
	/* SetInformationen */
		long PTarget;   /* Identifikator/ON */
		short nPSet;    /* nächstes ListenElement */
	/* allgemeine Attribute */
		short PPrio;    /* Zeichenpriorität */
		short PStyle;   /* Darstellungsart */
		long PColor;    /* Punktfarbe */
	/* Satzkennung */
		char PFlag;	/* Kennung jetzt nur noch 1 Byte (5.00.00.011) */
		char PAttrEx;	/* zusätzliche Atribute */
	/* punktspezifische Attribute */
		short SizeX;    /* Größe X */
		short SizeY;    /* Größe Y */
	/* Name des PunktSymboles */
		char PName[32];
	}
	record LAttribs { /* Element der VisType-Liste */
	/* SetInformationen */
		long LTarget;   /* Identifikator/ON */
		short LnSet;    /* nächstes ListenElement */
	/* allgemeine Attribute */
		short LPrio;    /* Zeichenpriorität */
		short LStyle;   /* Darstellungsart */
		long LColor;    /* Linienfarbe */
	/* Satzkennung */
		char LFlag;	/* Kennung jetzt nur noch 1 Byte (5.00.00.011) */
		char LAttrEx;	/* zusätzliche Atribute */
	/* linienspezifische Attribute */
		short Width;    /* StrichStärke */
		short LDummy;
	/* Name der LinienSignatur */
		char LName[32];
	}
	record FAttribs { /* Element der VisType-Liste */
	/* SetInformationen */
		long FTarget;   /* Identifikator/ON */
		short FnSet;    /* nächstes ListenElement */
	/* allgemeine Attribute */
		short FPrio;    /* Zeichenpriorität */
		short FStyle;   /* Darstellungsart */
		long FColor;    /* FüllFarbe */
	/* Satzkennung */
		char FFlag;	/* Kennung jetzt nur noch 1 Byte (5.00.00.011) */
		char FAttrEx;	/* zusätzliche Atribute */
	/* flächenspezifische Attribute */
		long BColor;    /* RandFarbe */
	/* Name des Füllmusters */
		char FName[32];
	}

/* Objektsatzerweiterung für Relationen */
	record RelTyp {
		long zhrel;	/* Liste der horizontalen Relationen */
		long zvrelo;	/* Liste der vertikalen Rel's nach oben */
		long zvrelu;	/* Liste der vertikalen Rel's nach unten */
		long zbrela;	/* Zeiger auf Begleitobjekt */
		long zbrelp;	/* Zeiger auf Vater des Begleitobjektes */
	}

/* VisualisierungsInfo für SchriftObjekte */
	record TAttribs { /* Element der VisType-Liste */
	/* SetInformationen */
		long TTarget;   /* Identifikator/ON */
		short TnSet;    /* nächstes ListenElement */
	/* allgemeine Attribute */
		short TPrio;    /* Zeichenpriorität */
		short TStyle;   /* Darstellungsart */
		long TColor;    /* FüllFarbe */
	/* Satzkennung */
		char TFlag;	/* Kennung jetzt nur noch 1 Byte (5.00.00.011) */
		char TAttrEx;	/* zusätzliche Atribute */
	/* Textspezifische Attribute */
		char TSizeX;	/* Fontgröße */
		char TSizeY;
		char TType;	/* FontTyp */
		char TRot;	/* DrehWinkel in 2°-Schritten */
	/* FontName */
		char TName[32];	/* konkreter gewünschter Font */
	}

/* Textmerkmale, erster Satz */
	record kdbt {
		long lLen;	/* Textlänge */
		long zmivom;	/* Verweis zum zugehörigen VerbindungsSatz */
		key char info[36];	/* 1. Textsatz */
		long zndbt;     /* Zeiger auf nächsten Satz */
	}

/* V5.00.00.014: Objektliste jetzt mit GUID als UniqueID */
	record obl {    /* Objektliste */
		long zovor;     /* Verweis auf Relationen */
		long zoid;      /* Verweis auf Identifikatorliste */
		long zovom;     /* Verweis auf Merkmale */
		long zokp;      /* Knotenpunkte */
		long zovol;     /* Kantenliste */
		long zovoma;    /* Maschenliste */
		char rmaske;	/* Relationsmaske */
		char status;	/* Objektbeschreibung */ 
		unique key long guid[4];	/* V5.00.00.014: GUID als UniqueID */

		double oblcreate;			/* V5.00.00.019: creation date */
		double oblmodify;			/* V5.00.00.019: modification date */
	}

// V5.00.00.015: Rückverkettung Merkmal --> Objekt jetzt indiziert
	record vmo {    // Merkmal -> Objekte
	// Rückverkettung und Key sind notwendig, damit das Herauslösen schneller
	// geht als bisher (viele Objekte --> lange VMO!)

// V5.00.00.017: Rückverkettung Merkmal --> Objekt:
// aus Geschwindigkeitsgründen jetzt Felder im Key getauscht
		unique key struct {
		//
		// Der folgende Zeiger (zvmoox) kann entweder in die OBL, die IDL oder die
		// SICHT zeigen, je nachdem, ob es sich um ein Merkmal eines Objektes, 
		// eines Identifikators oder einer Sicht handelt. Die ältesten
		// Bits dieses Zeigers verschlüsseln diese Dateien: 
		//		00 - OBL, also kompatibel zu bisherigem
		//		01 - IDL und
		//		10 - SICHT
		//
			long zvmoox;	// entspricht zvmoo
			long mcodex;	// zugehöriger MerkmalsCode
		} MCodeY;
		long zvmonk;		// nächster Verbindungssatz
		long zvmopk;		// vorhergehender Verbindungssatz
	}

// V5.00.00.015: Rückverkettung Identifikator --> Objekt jetzt indiziert
	record vio {    // Identifikator -> Objekte
	// Rückverkettung und Key sind notwendig, damit das Herauslösen schneller
	// geht als bisher (viele Objekte --> lange VIO!)

// V5.00.00.017: Rückverkettung Identifikator --> Objekt:
// aus Geschwindigkeitsgründen jetzt Felder im Key getauscht
		unique key struct {
		//
		// Die höchstwertigen 3 Bits des 'zviook' enthalten die zusätzliche Info
		// über den Objekttyp (in welcher Identkette dieser Satz enthalten ist).
		// Das ist notwendig, um weniger Auffwand beim Herauslösen zu haben und 
		// um einen einfacheren Konsistenztest zu ermöglichen:
		//	typedef enum tagLINKTYPE {
		//		LINKTYPE_Unknown = 0x0,
		//		LINKTYPE_Point = 0x1,
		//		LINKTYPE_Line = 0x2,
		//		LINKTYPE_Area = 0x3,
		//		LINKTYPE_Text = 0x4,
		//		LINKTYPE_Complex = 0x5,
		//		LINKTYPE_DontCare = 0x6,
		//		LINKTYPE_Mask = 0x7,
		//	} LINKTYPE;
		//	#define TYPETOLINK(o,t)	(long)(((t) << 29) | ((o) & ~(LINKTYPE_Mask << 29)))
		//	#define LINKTOTYPE(l)	(LINKTYPE)(((l) & (LINKTYPE_Mask << 29)) >> 29)
		//	#define LINKTOLINK(l)	(long)((l) & ~(LINKTYPE_Mask << 29))
		//
			long zvioox;	// entspricht zvioo
			long identx;	// zugehöriger Identifikator
		} IdentY;
		long zvionk;		// nächster Verbindungssatz
		long zviopk;		// vorhergehender Verbindungssatz
	}

// V5.00.00.016: Stützpunktfolgen werden jetzt gepackt gespeichert
	record longspl {	// Stützpunktliste, enthält jetzt mehrere Stützpunkte
		long spxl[6];		// Punktkoordinaten
		long spyl[6];
		long znspl;			// next longspl
	}

// V5.00.00.019: neuer Schlüssel im idl Satz
	record idl {    /* Identifikatorliste */
		unique key long idn;   /* Identifikator */
		long zvio;      /* Verweis auf Objekte, ab V5.00.00.014: sonstige Objekte */
		long zMerki;	/* Zeiger in MerkmalsKette */
		long zRelid;	/* Zeiger in RelationsSatz (RelTyp) */

	/* die folgenden Felder ab V5.00.00.014 */
		long lpvio;		/* Zähler der Punktobjekte */
		long zpvio;		/* Punktobjekte */
		long llvio;		/* Zähler der Linienobjekte */
		long zlvio;		/* Linienobjekte */
		long lfvio;		/* Zähler der Flächenobjekte */
		long zfvio;		/* Flächenobjekte */
		long ltvio;		/* Zähler der Textobjekte */
		long ztvio;		/* Texttobjekte */
		long lkvio;		/* Zähler der Komplexobjekte */
		long zkvio;		/* Komplexobjekte */

	/* die folgenden Felder ab V5.00.00.019 */
		unique key long idguid[4];	/* GUID als UniqueID */
		double idcreate;			/* creation date */
		double idmodify;			/* modification date */
	}
}

