// $Header: $
// Copyright© 1999-2002 GEOPunkt GmbH, NL Potsdam, All rights reserved
// Created: 18.06.2001 13:46:23 
//
// @doc
// @module TRiASOleDBIndex.h | Declaration of the <c CTRiASOleDBIndex> class

#if !defined(_TRIASOLEDBINDEX_H__95060D69_B27A_42D0_80DF_A551A9C28D81__INCLUDED_)
#define _TRIASOLEDBINDEX_H__95060D69_B27A_42D0_80DF_A551A9C28D81__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

// Header include diagnostics
#if defined(_TRIAS_DBG_HEADER_DIAGNOSTICS)
#pragma message(__TIME__": include " __FILE__ )
#endif

#include <Atl/OleDB/IRowsetIndexImpl.h>

#include "TRiASOleDBRow.h"
#include "TRiASOleDBRowset.h"
#include "TRiASOleDBDataSource.h"

///////////////////////////////////////////////////////////////////////////////
// Base class für Properties des IndexRowset
class CTRiASOleDBIndexBase :
	public CComObjectRootEx<CComObjectThreadModel>
{
public:
	typedef CTRiASOleDBIndexBase _PropClass;

	BEGIN_PROPSET_MAP(CTRiASOleDBIndexBase)
		BEGIN_PROPERTY_SET(DBPROPSET_INDEX)
			PROPERTY_INFO_ENTRY_EX(INDEX_AUTOUPDATE, VT_BOOL, DBPROPFLAGS_INDEX | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(INDEX_CLUSTERED, VT_BOOL, DBPROPFLAGS_INDEX | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(INDEX_NULLS, VT_I4, DBPROPFLAGS_INDEX | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, DBPROPVAL_IN_IGNORENULL, 0)
			PROPERTY_INFO_ENTRY_EX(INDEX_PRIMARYKEY, VT_BOOL, DBPROPFLAGS_INDEX | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_FALSE, 0)
			PROPERTY_INFO_ENTRY_EX(INDEX_TEMPINDEX, VT_BOOL, DBPROPFLAGS_INDEX | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_FALSE, 0)
			PROPERTY_INFO_ENTRY_EX(INDEX_TYPE, VT_I4, DBPROPFLAGS_INDEX | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, DBPROPVAL_IT_BTREE, 0)
			PROPERTY_INFO_ENTRY_EX(INDEX_UNIQUE, VT_BOOL, DBPROPFLAGS_INDEX | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_FALSE, 0)
		END_PROPERTY_SET(DBPROPSET_INDEX)
		BEGIN_PROPERTY_SET(DBPROPSET_ROWSET)
			PROPERTY_INFO_ENTRY_EX(IAccessor, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IColumnsInfo, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IColumnsRowset, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IConvertType, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IRowset, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IRowsetIdentity, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IRowsetInfo, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(CANFETCHBACKWARDS,VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, 0, 0)
			PROPERTY_INFO_ENTRY_EX(CANHOLDROWS, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(CANSCROLLBACKWARDS, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IRowsetLocate, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IRowsetBookmark, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(IRowsetScroll, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(BOOKMARKS, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE , VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(BOOKMARKSKIPPED,VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(BOOKMARKTYPE, VT_I4, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, DBPROPVAL_BMK_NUMERIC, 0)
			PROPERTY_INFO_ENTRY_EX(LITERALBOOKMARKS, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(ORDEREDBOOKMARKS, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_FALSE, 0)
			PROPERTY_INFO_ENTRY_EX(LITERALIDENTITY, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(STRONGIDENTITY, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(MAXOPENROWS, VT_I4, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, 0, 0)
			PROPERTY_INFO_ENTRY_EX(MAXROWS, VT_I4, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, 0, 0)

			PROPERTY_INFO_ENTRY_EX(ISupportErrorInfo, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(DEFERRED, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(CACHEDEFERRED, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)

			PROPERTY_INFO_ENTRY_EX(IRowsetIndex, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_FALSE, 0)

//			PROPERTY_INFO_ENTRY_VALUE(NOTIFICATIONPHASES, DBPROPVAL_NP_OKTODO | DBPROPVAL_NP_ABOUTTODO | DBPROPVAL_NP_SYNCHAFTER |DBPROPVAL_NP_FAILEDTODO | DBPROPVAL_NP_DIDEVENT)
//			PROPERTY_INFO_ENTRY_EX(NOTIFYROWDELETE, VT_I4, DBPROPVAL_NP_OKTODO | DBPROPVAL_NP_ABOUTTODO | DBPROPVAL_NP_SYNCHAFTER | DBPROPVAL_NP_FAILEDTODO | DBPROPVAL_NP_DIDEVENT, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(NOTIFYROWINSERT, VT_I4, DBPROPVAL_NP_OKTODO | DBPROPVAL_NP_ABOUTTODO | DBPROPVAL_NP_SYNCHAFTER | DBPROPVAL_NP_FAILEDTODO | DBPROPVAL_NP_DIDEVENT, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(NOTIFYCOLUMNSET, VT_I4, DBPROPVAL_NP_OKTODO | DBPROPVAL_NP_ABOUTTODO | DBPROPVAL_NP_SYNCHAFTER | DBPROPVAL_NP_FAILEDTODO | DBPROPVAL_NP_DIDEVENT, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(NOTIFYROWSETFETCHPOSITIONCHANGE, VT_I4, DBPROPVAL_NP_OKTODO | DBPROPVAL_NP_ABOUTTODO | DBPROPVAL_NP_SYNCHAFTER | DBPROPVAL_NP_FAILEDTODO | DBPROPVAL_NP_DIDEVENT, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(NOTIFICATIONGRANULARITY, VT_I4, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPVAL_NT_MULTIPLEROWS, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(SERVERCURSOR, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ , VARIANT_TRUE, 0)

//			PROPERTY_INFO_ENTRY_EX(IRowsetChange, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(UPDATABILITY, VT_I4, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, DBPROPVAL_UP_CHANGE | DBPROPVAL_UP_DELETE | DBPROPVAL_UP_INSERT, 0)
//			PROPERTY_INFO_ENTRY_EX(REMOVEDELETED, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(OWNINSERT, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
//			PROPERTY_INFO_ENTRY_EX(OWNUPDATEDELETE, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_TRUE, 0)
			PROPERTY_INFO_ENTRY_EX(OTHERINSERT, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_FALSE, 0)
			PROPERTY_INFO_ENTRY_EX(OTHERUPDATEDELETE, VT_BOOL, DBPROPFLAGS_ROWSET | DBPROPFLAGS_READ | DBPROPFLAGS_WRITE, VARIANT_FALSE, 0)
		END_PROPERTY_SET(DBPROPSET_ROWSET)
	END_PROPSET_MAP()
};

///////////////////////////////////////////////////////////////////////////////
// IndexRowset
class CTRiASOleDBIndex :
	public CTRiASOleDBRowsetBase<CTRiASOleDBIndex, CTRiASOleDBRowT<CTRiASOleDBIndex>, CTRiASOleDBIndexBase>,
	public IRowsetIndexImpl<CTRiASOleDBIndex>,
	public ISupportErrorInfo
{
public:
	typedef CTRiASOleDBRowsetBase<CTRiASOleDBIndex, CTRiASOleDBRowT<CTRiASOleDBIndex>, CTRiASOleDBIndexBase> _RowsetBaseClass;
	typedef IRowsetIndexImpl<CTRiASOleDBIndex> _IndexBaseClass;
	typedef _RowsetBaseClass::_PropClass _PropClass;

	typedef CTRiASOleDBRowT<CTRiASOleDBIndex> CTRiASOleDBRow;

	CTRiASOleDBIndex() 
	{
	}
	~CTRiASOleDBIndex() 
	{
	}

	_ATLX_DEBUG_OBJECTCOUNT_IMPL(CTRiASOleDBIndex)
	DECLARE_GET_CONTROLLING_UNKNOWN()

	BEGIN_COM_MAP(CTRiASOleDBIndex)
		COM_INTERFACE_ENTRY(IRowsetIndex)
		COM_INTERFACE_ENTRY_CHAIN(_RowsetBaseClass)
	END_COM_MAP()

// property support
	HRESULT GetProperties(
		const ULONG cPropertySets, const DBPROPIDSET rgPropertySets[], ULONG* pcProperties, 
		DBPROPSET** prgProperties, const ULONG cSelectProps = 1, const GUID** ppGuid = NULL)
	{
		return CUtlProps<_PropClass>::GetProperties(cPropertySets, rgPropertySets, pcProperties, prgProperties, cSelectProps, ppGuid);
	}

// OpenRowset support
	HRESULT SetCommandText(DBID *pTableID, DBID *pIndexID)
	{
		RETURN_ERROR(_RowsetBaseClass::SetCommandText(pTableID, pIndexID));
		RETURN_ERROR(_IndexBaseClass::SetIndex(pTableID, pIndexID));
		return S_OK;
	}

// ISupportErrorInfo
	STDMETHODIMP InterfaceSupportsErrorInfo(REFIID riid);

	HRESULT Execute(DBPARAMS *pParams, LONG* pcRowsAffected);
	HRESULT PrepareColumnInfo();

protected:
// Analyse eines SQL Statements (support for CTRiASOleDBRow)
	HRESULT PrepareObjectsList(ITRiASEnumNativeObjects **ppIObjsOut);
	HRESULT ExecuteSelect (DBPARAMS *pParams, LONG *pcRowsAffected);
};

#endif // !defined(_TRIASOLEDBINDEX_H__95060D69_B27A_42D0_80DF_A551A9C28D81__INCLUDED_)
