#include <olectl.h>
// MaskEditX.idl : IDL source for MaskEditX.dll
//

// This file will be processed by the MIDL tool to
// produce the type library (MaskEditX.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

	

[
	uuid(51BB3DD1-0C38-11D2-8F6B-0060085FC1CE),
	version(1.0),
	helpstring("TRiAS UserInterface Controls")
]
library UICtrlLib
{
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	[
		object,
		uuid(51BB3DDE-0C38-11D2-8F6B-0060085FC1CE),
		dual,
		helpstring("IMaskEdit Interface"),
		pointer_default(unique)
	]
	interface IMaskEdit : IDispatch
	{
		[propput, id(DISPID_BACKCOLOR)]
		HRESULT BackColor([in]OLE_COLOR clr);
		[propget, id(DISPID_BACKCOLOR)]
		HRESULT BackColor([out,retval]OLE_COLOR* pclr);
		[propput, id(DISPID_BORDERCOLOR)]
		HRESULT BorderColor([in]OLE_COLOR clr);
		[propget, id(DISPID_BORDERCOLOR)]
		HRESULT BorderColor([out, retval]OLE_COLOR* pclr);
		[propput, id(DISPID_BORDERSTYLE)]
		HRESULT BorderStyle([in]long style);
		[propget, id(DISPID_BORDERSTYLE)]
		HRESULT BorderStyle([out, retval]long* pstyle);
		[propputref, id(DISPID_FONT)]
		HRESULT Font([in]IFontDisp* pFont);
		[propput, id(DISPID_FONT)]
		HRESULT Font([in]IFontDisp* pFont);
		[propget, id(DISPID_FONT)]
		HRESULT Font([out, retval]IFontDisp** ppFont);
		[propput, id(DISPID_BORDERVISIBLE)]
		HRESULT BorderVisible([in]VARIANT_BOOL vbool);
		[propget, id(DISPID_BORDERVISIBLE)]
		HRESULT BorderVisible([out, retval]VARIANT_BOOL* pbool);
		[propget, id(1), helpstring("property Mask")] HRESULT Mask([out, retval] BSTR *pVal);
		[propput, id(1), helpstring("property Mask")] HRESULT Mask([in] BSTR newVal);
		[propget, id(2), helpstring("property PromptChar")] HRESULT PromptChar([out, retval] BSTR *pVal);
		[propput, id(2), helpstring("property PromptChar")] HRESULT PromptChar([in] BSTR newVal);
		[propget, id(3), helpstring("property EscapeChar")] HRESULT EscapeChar([out, retval] BSTR *pVal);
		[propget, id(4), helpstring("property Text")] HRESULT Text(short DelimterCharacter, [out, retval] BSTR *pVal);
		[propput, id(4), helpstring("property Text")] HRESULT Text(short DelimterCharacter, [in] BSTR newVal);
	};

	[
		uuid(6F7B7340-0F97-11d2-8F6D-0060085FC1CE)
		, helpstring("Event interface for MaskEdit Control")
	]
	dispinterface _DMaskEditEvents
	{
		properties:
			//  Event interface has no properties

		methods:
			[id(1)] void TextChange();
		[id(2), helpstring("method AdvanceFocusNext")] void AdvanceFocusNext();
		[id(3), helpstring("method AdvanceFocusPrevious")] void AdvanceFocusPrevious();
	};

	[
		uuid(51BB3DDF-0C38-11D2-8F6B-0060085FC1CE),
		helpstring("MaskEdit Class")
	]
	coclass MaskEdit
	{
		[default] interface IMaskEdit;
		[default, source] dispinterface _DMaskEditEvents;
	};
	

	[
		uuid(51BB3DE2-0C38-11D2-8F6B-0060085FC1CE),
		helpstring("PpgMaskEdit Class")
	]
	coclass PpgMaskEdit
	{
		interface IUnknown;
	};
};
