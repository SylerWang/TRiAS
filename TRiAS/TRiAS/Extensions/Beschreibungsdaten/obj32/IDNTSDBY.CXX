
//////////////////////////////////////////////////////////////////////////////
//
//  FILENAME:          idntsdby.cxx
//
//  FILE DESCRIPTION:  Source file with derived parser class support
//
//  Input file:        \TRIASDEV.MVC\XTENSION\IDENTSDB\IDNTSDBM.YXX
//  Options:           -no_debug -table fast -no_line -no_far 
//  Include Paths:     current directory
//
//  Automatically generated by Yacc++ Revision 2.0 (94 May 6)
//  on Mon Aug  5 21:29:23 1996
//
//////////////////////////////////////////////////////////////////////////////

#define yy_psr_c_ 1
#define yy_psr_code_ 1
#define yy_psr_defn_ 1
#define yy_mypsr_c_ 1

#include "yy_ansi.h"
#include "yy_stdio.h"
#include "yy_stdlb.h"
#include "yy_strng.h"
#include "yy_trace.h"
#include "yy_asrt.h"
#include "yy_bool.h"
#include "idntsdby.hxx"
char *yy_psr_identsdb_obj_spelling[]
= {
    /*   -2  */    "yy_error",
    /*    0  */    "yy_eof",
    /*    0  */    "yy_eof",
    /*    1  */    "INTEGER",
    /*    2  */    "KURZTEXT",
    /*    3  */    "LANGTEXT",
    /*    4  */    "HEXIDENT",
    /*    5  */    "HEXMCODE",
    /*    6  */    "A",
    /*    7  */    "B",
    /*    8  */    "C",
    /*    9  */    "á",
    /*   10  */    "â",
    /*   11  */    "ã",
    /*   12  */    "R",
    /*   13  */    "I",
    /*   14  */    "K",
    /*   15  */    "H",
    /*   16  */    "HRel",
    /*   17  */    "KRel",
    /*   18  */    "TXRDatei",
    /*   19  */    "TXRType",
    /*   20  */    "TXRSatz",
    /*   21  */    "I",
    /*   22  */    "R",
    /*   23  */    "CS",
    /*   24  */    "BS",
    /*   25  */    "AS",
    /*   26  */    "C",
    /*   27  */    "B",
    /*   28  */    "A",
    /*   29  */    "TXMDatei",
    /*   30  */    "TXMType",
    /*   31  */    "TXMSatz",
    /*   32  */    "TXIDatei",
    /*   33  */    "TXISatz",
};

int yy_psr_identsdb_obj_cmd[yy_psr_identsdb_obj::yy_psr_cmd_max_]
={
yy_psr_obj::yy_psr_push_shf_chg_, 330, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_nx_, 3240, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 222, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 222, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ign_chg_, 438, 0,
yy_psr_obj::yy_psr_push_nx_, 3242, 0,

yy_psr_obj::yy_psr_push_shf_chg_, 546, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_rdc_, yy_psr_identsdb_obj::TXIDatei_, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 222, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 222, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 654, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 762, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 762, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 0, yy_psr_identsdb_obj::TXISatz_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 0, yy_psr_identsdb_obj::TXISatz_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_push_shf_chg_, 1194, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_nx_, 3244, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1086, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1086, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ign_chg_, 1302, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_nx_, 3246, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_push_shf_chg_, 1410, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_rdc_, yy_psr_identsdb_obj::TXMDatei_, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1086, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1086, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::A_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::B_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::C_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::AS_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::BS_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::CS_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::I_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_ract_rdc_, 2, yy_psr_identsdb_obj::TXMType_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1518, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1518, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1518, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1518, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1518, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 1518, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 1626, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 1734, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 1734, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_identsdb_obj::TXMType_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::R_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 2, yy_psr_identsdb_obj::TXMType_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 1842, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 1, yy_psr_identsdb_obj::TXMSatz_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 1950, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 2058, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 2166, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 1, yy_psr_identsdb_obj::TXMSatz_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_push_shf_chg_, 2598, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_nx_, 3248, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 2490, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ign_chg_, 2706, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_nx_, 3250, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_push_shf_chg_, 2814, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_rdc_, yy_psr_identsdb_obj::TXRDatei_, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 2490, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::KRel_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_identsdb_obj::HRel_, 0,
yy_psr_obj::yy_psr_push_shf_ract_rdc_, 4, yy_psr_identsdb_obj::TXRType_,
yy_psr_obj::yy_psr_push_shf_ract_rdc_, 4, yy_psr_identsdb_obj::TXRType_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 2922, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 3030, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 3030, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,
yy_psr_obj::yy_psr_ign_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 3138, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 3, yy_psr_identsdb_obj::TXRSatz_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_shf_rdc_, yy_psr_identsdb_obj::yy_error_, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 3, yy_psr_identsdb_obj::TXRSatz_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_rdc_, yy_psr_identsdb_obj::TXIDatei_,
yy_psr_obj::yy_psr_ign_chg_, 114,
yy_psr_obj::yy_psr_rdc_, yy_psr_identsdb_obj::TXMDatei_,
yy_psr_obj::yy_psr_ign_chg_, 978,
yy_psr_obj::yy_psr_rdc_, yy_psr_identsdb_obj::TXRDatei_,
yy_psr_obj::yy_psr_ign_chg_, 2382,
};

yy_psr_start_state_tbl yy_psr_identsdb_obj_start_state[]
= {
{yy_psr_identsdb_obj::TXIDatei_, 6}, 
{yy_psr_identsdb_obj::TXMDatei_, 870}, 
{yy_psr_identsdb_obj::TXRDatei_, 2274}, 
};

int yy_psr_identsdb_obj_last_start[]
= {
/* yy_psr_class_icodedesc_: */ 0, 
/* yy_psr_class_mcodedesc_: */ 1, 
/* yy_psr_class_rcodedesc_: */ 2, 
};

yy_psr_identsdb_obj::yy_psr_identsdb_obj(
    yy_lex_ptr  yy_this_lex_obj_ptr,
    int         yy_psr_new_class,
    int         yy_psr_new_start,
    int         yy_psr_new_left_max,
    int         yy_psr_new_rt_max,
    int         yy_psr_new_rdc_max)
   : yy_psr_obj_fast(
    yy_false,
     -2,
     33,
     15,
     yy_psr_identsdb_obj_cmd,
     yy_this_lex_obj_ptr,
     0,
     NULL,
     NULL,
     yy_psr_identsdb_obj_spelling,
     yy_psr_identsdb_obj_start_state,
     yy_psr_identsdb_obj_last_start,
     yy_psr_max_class_,
     yy_psr_new_left_max,
     yy_psr_new_rt_max,
     yy_psr_new_rdc_max),
    
			m_rgIMode(IMPORTMODE_OverWrite), 
			m_rgRMode(REJECTMODE_ImportAll),
			m_fMCodesFilled(false),
			m_pIStatus(NULL)
	
{
    yy_psr_start(yy_psr_new_class, yy_psr_new_start);
    yy_psr_rdc_ptr->yy_psr_rdc_state = yy_psr_cur_start_state; 

    yy_psr_last_obj_ptr = this;

}   // constructor for parser yy_psr_identsdb_obj


yy_psr_identsdb_obj::~yy_psr_identsdb_obj()
{
}   // destructor for parser yy_psr_identsdb_obj


void yy_psr_identsdb_obj::yy_psr_do_action(
    int            yy_psr_action_index)
{

    switch (yy_psr_action_index) {

case(0): {
 yy_psr_rdc() = TXISatz_; yy_psr_rslt() = yy_ast_ptr(new TXISatz(this));
	} break;  // case 0

case(1): {
 yy_psr_rdc() = TXMSatz_; yy_psr_rslt() = yy_ast_ptr(new TXMSatz(this));
	} break;  // case 1

case(2): {
 yy_psr_rdc() = TXMType_; yy_psr_rslt() = yy_ast_ptr(new TXMType(this));
	} break;  // case 2

case(3): {
 yy_psr_rdc() = TXRSatz_; yy_psr_rslt() = yy_ast_ptr(new TXRSatz(this));
	} break;  // case 3

case(4): {
 yy_psr_rdc() = TXRType_; yy_psr_rslt() = yy_ast_ptr(new TXRType(this));
	} break;  // case 4

    default:

    // bad parser act_code operand

#if yy_trace_after_error_ <= yy_trace_
        yy_psr_dmp(yy_this_lex_obj->yy_lex_cur_inp()->yy_inp_cur_err(),
            "bad parser opcode");
#endif /*yy_trace_after_error_ <= yy_trace_ */
        yy_err_report(401, yy_psr_action_index);    
        yy_psr_abort();
        return;

    }   // end switch

}   // yy_psr_identsdb_obj::yy_psr_do_action()


TXISatz::TXISatz(
    yy_psr_identsdb_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last())
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+1);
            }
        }
    else {
        yy_this_operand = NULL;
        }

			yy_this_psr_ptr -> WriteTXI (this);

		LPPROGRESSINDICATOR pIStatus = NULL;
		HRESULT hr = yy_this_psr_ptr -> GetStatus (&pIStatus);
		bool fAborted = false;

			if (SUCCEEDED(hr)) {
				if (pIStatus -> WasCanceled())
					fAborted = true;

			DWORD dwPos = yy_this_psr_ptr -> yy_psr_cur_lex() -> 
					yy_lex_cur_inp() -> yy_inp_cur_offset();

				pIStatus -> SetPosition (dwPos);
				pIStatus -> Release();
			}
			delete this;		// wird nicht mehr gebraucht

			if (fAborted) yy_this_psr_ptr -> yy_psr_abort();
	
}   // constructor for parser non-terminal TXISatz

TXISatz::~TXISatz()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal TXISatz

void TXISatz::yy_dump(
    yy_err_ptr yy_this_err_obj,
    const char *yy_dump_title)
{
    int yy_index;

//  use the failsafe error object, if no error object to dump to

    if (yy_this_err_obj == NULL) {
        yy_this_err_obj = yy_err_failsafe_obj();
        }

//  output the title if one is specified

    if (yy_dump_title != NULL) {
        yy_this_err_obj->yy_err_printf("TITLE: %s\n", yy_dump_title);
        }

//  output the type of parser non-terminal being dumped

    yy_this_err_obj->yy_err_printf("dump of TXISatz parser non-terminal:  (type = %d).\n", yy_this_type);

//  output the operands of the parser non-terminal

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_ast_ptr(yy_this_operand[yy_index].yy_ptr)->yy_dump(yy_this_err_obj, NULL);
            }
        }

}   // TXISatz::yy_dump()

int TXISatz::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // TXISatz::yy_type()

int TXISatz::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // TXISatz::yy_num_operands()

yy_ref_obj &TXISatz::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // TXISatz::yy_operand()

TXMType::TXMType(
    yy_psr_identsdb_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
    
			m_iType(0)
	
{

		int iNumOps = yy_this_psr_ptr->yy_psr_last();

			if (1 <= iNumOps) {
			yy_ref_obj Op1 = yy_this_psr_ptr->yy_psr_ref(1);

				switch (Op1.yy_type()) {
				case yy_psr_identsdb_obj::A_:	// Objektmerkmal
					m_iType = 'A'; 
					break;
				case yy_psr_identsdb_obj::B_:	// Sichtmerkmal
					m_iType = 'B'; 
					break;
				case yy_psr_identsdb_obj::C_:	// Identmerkmal
					m_iType = 'C'; 
					break;
				case yy_psr_identsdb_obj::I_:	// obsolete
					m_iType = 'I'; 
					break;
				case yy_psr_identsdb_obj::AS_:	// SystemObjektmerkmal
					m_iType = char('A'|PBDMERKMAL_SYSTEMFLAG);
					break;
				case yy_psr_identsdb_obj::BS_:	// SystemSichtmerkmal
					m_iType = char('B'|PBDMERKMAL_SYSTEMFLAG); 
					break;
				case yy_psr_identsdb_obj::CS_:	// SystemIdentMerkmal
					m_iType = char('C'|PBDMERKMAL_SYSTEMFLAG); 
					break;
				default:
					return;
				}
			}
			if (2 == iNumOps) {
			yy_ref_obj Op2 = yy_this_psr_ptr->yy_psr_ref(2);

				if (yy_psr_identsdb_obj::R_ == Op2.yy_type())
				// schreibgeschütztes Merkmal
					m_iType |= PBDMERKMAL_READONLY;
			}
	
}   // constructor for parser non-terminal TXMType

TXMType::~TXMType()
{

}   // destructor for parser non-terminal TXMType

void TXMType::yy_dump(
    yy_err_ptr yy_this_err_obj,
    const char *yy_dump_title)
{

//  use the failsafe error object, if no error object to dump to

    if (yy_this_err_obj == NULL) {
        yy_this_err_obj = yy_err_failsafe_obj();
        }

//  output the title if one is specified

    if (yy_dump_title != NULL) {
        yy_this_err_obj->yy_err_printf("TITLE: %s\n", yy_dump_title);
        }

//  output the type of parser non-terminal being dumped

    yy_this_err_obj->yy_err_printf("dump of TXMType parser non-terminal:  (type = %d).\n", yy_this_type);

}   // TXMType::yy_dump()

int TXMType::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // TXMType::yy_type()

TXMSatz::TXMSatz(
    yy_psr_identsdb_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last())
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+1);
            }
        }
    else {
        yy_this_operand = NULL;
        }

			yy_this_psr_ptr -> WriteTXM (this);

		LPPROGRESSINDICATOR pIStatus = NULL;
		HRESULT hr = yy_this_psr_ptr -> GetStatus (&pIStatus);
		bool fAborted = false;

			if (SUCCEEDED(hr)) {
				if (pIStatus -> WasCanceled())
					fAborted = true;

			DWORD dwPos = yy_this_psr_ptr -> yy_psr_cur_lex() -> 
					yy_lex_cur_inp() -> yy_inp_cur_offset();

				pIStatus -> SetPosition (dwPos);
				pIStatus -> Release();
			}
			delete this;		// wird nicht mehr gebraucht

			if (fAborted) yy_this_psr_ptr -> yy_psr_abort();
	
}   // constructor for parser non-terminal TXMSatz

TXMSatz::~TXMSatz()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal TXMSatz

void TXMSatz::yy_dump(
    yy_err_ptr yy_this_err_obj,
    const char *yy_dump_title)
{
    int yy_index;

//  use the failsafe error object, if no error object to dump to

    if (yy_this_err_obj == NULL) {
        yy_this_err_obj = yy_err_failsafe_obj();
        }

//  output the title if one is specified

    if (yy_dump_title != NULL) {
        yy_this_err_obj->yy_err_printf("TITLE: %s\n", yy_dump_title);
        }

//  output the type of parser non-terminal being dumped

    yy_this_err_obj->yy_err_printf("dump of TXMSatz parser non-terminal:  (type = %d).\n", yy_this_type);

//  output the operands of the parser non-terminal

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_ast_ptr(yy_this_operand[yy_index].yy_ptr)->yy_dump(yy_this_err_obj, NULL);
            }
        }

}   // TXMSatz::yy_dump()

int TXMSatz::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // TXMSatz::yy_type()

int TXMSatz::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // TXMSatz::yy_num_operands()

yy_ref_obj &TXMSatz::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // TXMSatz::yy_operand()

TXRType::TXRType(
    yy_psr_identsdb_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
    
			m_iType(0)
	
{

			if (1 == yy_this_psr_ptr->yy_psr_last()) {
			yy_ref_obj Op1 = yy_this_psr_ptr->yy_psr_ref(1);

				switch (Op1.yy_type()) {
				case yy_psr_identsdb_obj::KRel_:
					m_iType = 'K'; 
					break;
				case yy_psr_identsdb_obj::HRel_:
					m_iType = 'H'; 
					break;
				default:
					return;
				}
			}
	
}   // constructor for parser non-terminal TXRType

TXRType::~TXRType()
{

}   // destructor for parser non-terminal TXRType

void TXRType::yy_dump(
    yy_err_ptr yy_this_err_obj,
    const char *yy_dump_title)
{

//  use the failsafe error object, if no error object to dump to

    if (yy_this_err_obj == NULL) {
        yy_this_err_obj = yy_err_failsafe_obj();
        }

//  output the title if one is specified

    if (yy_dump_title != NULL) {
        yy_this_err_obj->yy_err_printf("TITLE: %s\n", yy_dump_title);
        }

//  output the type of parser non-terminal being dumped

    yy_this_err_obj->yy_err_printf("dump of TXRType parser non-terminal:  (type = %d).\n", yy_this_type);

}   // TXRType::yy_dump()

int TXRType::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // TXRType::yy_type()

TXRSatz::TXRSatz(
    yy_psr_identsdb_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last())
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+1);
            }
        }
    else {
        yy_this_operand = NULL;
        }

			yy_this_psr_ptr -> WriteTXR (this);

		LPPROGRESSINDICATOR pIStatus = NULL;
		HRESULT hr = yy_this_psr_ptr -> GetStatus (&pIStatus);
		bool fAborted = false;

			if (SUCCEEDED(hr)) {
				if (pIStatus -> WasCanceled())
					fAborted = true;

			DWORD dwPos = yy_this_psr_ptr -> yy_psr_cur_lex() -> 
					yy_lex_cur_inp() -> yy_inp_cur_offset();

				pIStatus -> SetPosition (dwPos);
				pIStatus -> Release();
			}
			delete this;		// wird nicht mehr gebraucht

			if (fAborted) yy_this_psr_ptr -> yy_psr_abort();
	
}   // constructor for parser non-terminal TXRSatz

TXRSatz::~TXRSatz()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal TXRSatz

void TXRSatz::yy_dump(
    yy_err_ptr yy_this_err_obj,
    const char *yy_dump_title)
{
    int yy_index;

//  use the failsafe error object, if no error object to dump to

    if (yy_this_err_obj == NULL) {
        yy_this_err_obj = yy_err_failsafe_obj();
        }

//  output the title if one is specified

    if (yy_dump_title != NULL) {
        yy_this_err_obj->yy_err_printf("TITLE: %s\n", yy_dump_title);
        }

//  output the type of parser non-terminal being dumped

    yy_this_err_obj->yy_err_printf("dump of TXRSatz parser non-terminal:  (type = %d).\n", yy_this_type);

//  output the operands of the parser non-terminal

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_ast_ptr(yy_this_operand[yy_index].yy_ptr)->yy_dump(yy_this_err_obj, NULL);
            }
        }

}   // TXRSatz::yy_dump()

int TXRSatz::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // TXRSatz::yy_type()

int TXRSatz::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // TXRSatz::yy_num_operands()

yy_ref_obj &TXRSatz::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // TXRSatz::yy_operand()

