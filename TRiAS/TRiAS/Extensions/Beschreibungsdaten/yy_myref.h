
//////////////////////////////////////////////////////////////////////////////
//
//  FILENAME:          yy_myref.h
//
//  FILE DESCRIPTION:  Header file with union declarations
//
//  Input file:        .\Idntsdbm.yxx
//  Options:           -no_ast_dump -no_debug -table fast -no_line -no_far
//                     -microsoft_precompiled_header idntsdbp.hxx
//  Character Set:     CHARSET ASCII8
//  Output Directory:  current directory
//  Include Paths:     current directory
//
//  Automatically generated by Yacc++ Revision 2.3 (1999 January 4)
//  on Wed Mar 20 13:19:31 2002
//
//////////////////////////////////////////////////////////////////////////////

#include "yy_ast.h"
#include "yy_const.h"
#include "yy_err.h"
#include "yy_reffc.h"
#include "yy_sym.h"

typedef class  yy_ref_factory_obj    *yy_ref_factory_ptr;

typedef class  yy_ref_obj            *yy_ref_ptr;

#ifndef yy_ast_obj_decl_
#define yy_ast_obj_decl_ 1
    class  yy_ast_obj : public yy_ast_nodump_obj {};
#endif /* yy_ast_obj_decl_ */

#ifndef yy_psr_identsdb_obj_gbl
#define yy_psr_identsdb_obj_gbl 1

	#include <istatus.h>	// LPPROGRESSINDICATOR

	#pragma warning (disable: 4304)		// STL
	#include <ospace/std/set>
	#include <ospace/std/algorithm>

	extern "C" BOOL _XTENSN_EXPORT PASCAL FillAllMCodeParserList (long lMCode, DWORD, void *pData);

	#pragma warning (disable:4251)	// needs to have dll-interface to be used by clients of class 'yy_psr_identsdb_obj'
	#pragma warning (disable:4273)	// 'yy_psr_identsdb_obj::yy_psr_identsdb_obj' : inconsistent dll linkage.  dllexport assumed.
#endif /* yy_psr_identsdb_obj_gbl */

#ifndef yy_decl_union
#define yy_decl_union 1
typedef union  {
    int         yy_int;
    yy_void_ptr    yy_ptr;
} yy_union;

class  yy_ref_obj : public yy_const {

 public:

    inline yy_ref_obj();

    inline yy_ref_obj(yy_union yy_new_union);

    inline yy_ref_obj(int yy_new_type, yy_union yy_new_union);

    inline yy_ref_obj(int yy_new_int);

    inline yy_ref_obj(int yy_new_type, int yy_new_int);

    inline yy_ref_obj(yy_void_ptr yy_new_ptr);

    inline yy_ref_obj(int yy_new_type, yy_void_ptr yy_new_ptr);

    inline yy_ref_obj(yy_ast_ptr yy_new_ptr);

    inline yy_ref_obj(int yy_new_type, yy_ast_ptr yy_new_ptr);

    inline yy_ref_obj(yy_sym_ptr yy_new_ptr);

    inline yy_ref_obj(int yy_new_type, yy_sym_ptr yy_new_ptr);

    inline yy_ref_obj(const yy_ref_obj &yy_old_ref);

    inline ~yy_ref_obj();

    inline yy_ref_obj &operator=(const yy_ref_obj &yy_old_ref);

    inline operator yy_union();

    inline operator int();

    inline operator yy_void_ptr();

    inline operator yy_ast_ptr();

    inline operator yy_sym_ptr();

    inline int &yy_type();

    inline int &yy_type(int yy_new_type);

    int                 yy_this_type;

    union {
        yy_union        yy_this_union;
        int             yy_int;
        yy_void_ptr     yy_ptr;
        };  // nested anonymous union

    };  // yy_ref_obj


//////////////////////////////////////////////////////////////////////////////
//
//  INLINE FUNCTIONS:
//
//  These are the INLINE functions for the ref object, defined above.
//
//////////////////////////////////////////////////////////////////////////////

inline yy_ref_obj::yy_ref_obj():
        yy_this_type(yy_discard_type_)
    {
        yy_int = 0;
    }

inline yy_ref_obj::yy_ref_obj(yy_union yy_new_union):
        yy_this_type(yy_discard_type_)
    {
        yy_this_union = yy_new_union;
    }

inline yy_ref_obj::yy_ref_obj(int yy_new_type, yy_union yy_new_union):
        yy_this_type(yy_new_type)
    {
        yy_this_union = yy_new_union;
    }

inline yy_ref_obj::yy_ref_obj(int yy_new_int):
        yy_this_type(yy_discard_type_)
    {
        yy_int = yy_new_int;
    }

inline yy_ref_obj::yy_ref_obj(int yy_new_type, int yy_new_int):
        yy_this_type(yy_new_type)
    {
        yy_int = yy_new_int;
    }

inline yy_ref_obj::yy_ref_obj(yy_void_ptr yy_new_ptr):
        yy_this_type(yy_discard_type_)
    {
        yy_ptr = yy_new_ptr;
    }

inline yy_ref_obj::yy_ref_obj(int yy_new_type, yy_void_ptr yy_new_ptr):
        yy_this_type(yy_new_type)
    {
        yy_ptr = yy_new_ptr;
    }

inline yy_ref_obj::yy_ref_obj(yy_ast_ptr yy_new_ptr):
        yy_this_type(yy_discard_type_)
    {
        yy_ptr = yy_void_ptr(yy_new_ptr);
    }

inline yy_ref_obj::yy_ref_obj(int yy_new_type, yy_ast_ptr yy_new_ptr):
        yy_this_type(yy_new_type)
    {
        yy_ptr = yy_void_ptr(yy_new_ptr);
    }

inline yy_ref_obj::yy_ref_obj(yy_sym_ptr yy_new_ptr):
        yy_this_type(yy_discard_type_)
    {
        yy_ptr = yy_void_ptr(yy_new_ptr);
    }

inline yy_ref_obj::yy_ref_obj(int yy_new_type, yy_sym_ptr yy_new_ptr):
        yy_this_type(yy_new_type)
    {
        yy_ptr = yy_void_ptr(yy_new_ptr);
    }

inline yy_ref_obj::yy_ref_obj(const yy_ref_obj &yy_old_ref):
        yy_this_type(yy_old_ref.yy_this_type)
    {
        yy_this_union = yy_old_ref.yy_this_union;
    }

inline yy_ref_obj::~yy_ref_obj()
    {}

inline yy_ref_obj &yy_ref_obj::operator=(const yy_ref_obj &yy_old_ref)
    {
        if (this != &yy_old_ref) {
            if (yy_old_ref.yy_this_type != yy_discard_type_) {
                yy_this_type = yy_old_ref.yy_this_type;
                }
            yy_this_union = yy_old_ref.yy_this_union;
            }
        return(*this);
    }

inline yy_ref_obj::operator yy_union()
    { return(yy_this_union); }

inline yy_ref_obj::operator int()
    { return(yy_int); }

inline yy_ref_obj::operator yy_void_ptr()
    { return(yy_ptr); }

inline yy_ref_obj::operator yy_ast_ptr()
    { return(yy_ast_ptr(yy_ptr)); }

inline yy_ref_obj::operator yy_sym_ptr()
    { return(yy_sym_ptr(yy_ptr)); }

inline int &yy_ref_obj::yy_type()
    { return(yy_this_type); }

inline int &yy_ref_obj::yy_type(int yy_new_type)
    { return(yy_this_type = yy_new_type); }

#endif /* yy_decl_union */
