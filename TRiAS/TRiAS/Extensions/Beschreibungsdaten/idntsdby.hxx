
//////////////////////////////////////////////////////////////////////////////
//
//  FILENAME:          idntsdby.hxx
//
//  FILE DESCRIPTION:  Header file with derived parser class declarations
//
//  Input file:        .\Idntsdbm.yxx
//  Options:           -no_ast_dump -no_debug -table fast -no_line -no_far
//                     -microsoft_precompiled_header idntsdbp.hxx
//  Character Set:     CHARSET ASCII8
//  Output Directory:  current directory
//  Include Paths:     current directory
//
//  Automatically generated by Yacc++ Revision 2.3 (1999 January 4)
//  on Wed Mar 20 13:19:31 2002
//
//////////////////////////////////////////////////////////////////////////////

#include "yy_ansi.h"
#include "yy_ast.h"
#include "yy_err.h"
#include "yy_sym.h"
class  yy_psr_identsdb_obj;

typedef class  yy_psr_identsdb_obj *yy_psr_identsdb_obj_ptr;

class TXISatz;
class TXMType;
class TXMSatz;
class TXRType;
class TXRSatz;
#include "yy_myref.h"

#ifndef yy_decl_TXISatz
#define yy_decl_TXISatz 1
class TXISatz : public yy_ast_obj {
 public:
    TXISatz(yy_psr_identsdb_obj *yy_this_psr_ptr);
    virtual ~TXISatz();
    inline int yy_type();
    int yy_type(int);
    inline int yy_num_operands();
    int yy_num_operands(int);
    inline yy_ref_obj &yy_operand(int);
    yy_ref_obj &yy_operand(int, yy_ref_obj);
 protected:
    int yy_this_type;
    int                 yy_this_num_operands;
    yy_ref_ptr          yy_this_operand;  // variable length array
};
#endif /* yy_decl_TXISatz */

#ifndef yy_decl_TXMType
#define yy_decl_TXMType 1
class TXMType : public yy_ast_obj {
 public:
    TXMType(yy_psr_identsdb_obj *yy_this_psr_ptr);
    virtual ~TXMType();
    inline int yy_type();
    int yy_type(int);
 protected:
    int yy_this_type;

		public:
		inline int Type (void) { return m_iType; }
		
		private:
			int m_iType;
		};
#endif /* yy_decl_TXMType */

#ifndef yy_decl_TXMSatz
#define yy_decl_TXMSatz 1
class TXMSatz : public yy_ast_obj {
 public:
    TXMSatz(yy_psr_identsdb_obj *yy_this_psr_ptr);
    virtual ~TXMSatz();
    inline int yy_type();
    int yy_type(int);
    inline int yy_num_operands();
    int yy_num_operands(int);
    inline yy_ref_obj &yy_operand(int);
    yy_ref_obj &yy_operand(int, yy_ref_obj);
 protected:
    int yy_this_type;
    int                 yy_this_num_operands;
    yy_ref_ptr          yy_this_operand;  // variable length array
};
#endif /* yy_decl_TXMSatz */

#ifndef yy_decl_TXRType
#define yy_decl_TXRType 1
class TXRType : public yy_ast_obj {
 public:
    TXRType(yy_psr_identsdb_obj *yy_this_psr_ptr);
    virtual ~TXRType();
    inline int yy_type();
    int yy_type(int);
 protected:
    int yy_this_type;

		public:
		inline int Type (void) { return toupper(m_iType); }
		
		private:
			int m_iType;
		};
#endif /* yy_decl_TXRType */

#ifndef yy_decl_TXRSatz
#define yy_decl_TXRSatz 1
class TXRSatz : public yy_ast_obj {
 public:
    TXRSatz(yy_psr_identsdb_obj *yy_this_psr_ptr);
    virtual ~TXRSatz();
    inline int yy_type();
    int yy_type(int);
    inline int yy_num_operands();
    int yy_num_operands(int);
    inline yy_ref_obj &yy_operand(int);
    yy_ref_obj &yy_operand(int, yy_ref_obj);
 protected:
    int yy_this_type;
    int                 yy_this_num_operands;
    yy_ref_ptr          yy_this_operand;  // variable length array
};
#endif /* yy_decl_TXRSatz */


#include "yy_psrfa.h"

#ifndef yy_psr_identsdb_obj_h_
#define yy_psr_identsdb_obj_h_ 1

class  yy_psr_identsdb_obj_ref_factory_obj : public yy_ref_factory_obj {

 public:

    yy_psr_identsdb_obj_ref_factory_obj();

    ~yy_psr_identsdb_obj_ref_factory_obj();

    virtual yy_ref_ptr yy_ref_factory_new_obj(
        int                  yy_type = 0,
        int                  yy_int = 0) const;

    virtual yy_ref_ptr yy_ref_factory_new_array(
        size_t               yy_size) const;

    virtual void yy_ref_factory_delete(
        yy_ref_ptr           yy_ref) const;

    virtual void yy_ref_factory_delete_array(
        yy_ref_ptr           yy_array) const;

    virtual yy_ref_ptr yy_ref_factory_grow_array(
        size_t               yy_new_size,
        yy_ref_ptr           yy_old_array,
        size_t               yy_old_size,
        size_t               yy_copy_bottom = 0,
        size_t               yy_copy_top = 0) const;

    virtual void yy_ref_factory_assign(
        yy_ref_obj           &yy_target,
        const yy_ref_obj     &yy_source) const;

    virtual void yy_ref_factory_array_assign(
        yy_ref_ptr           yy_array,
        size_t               yy_target,
        size_t               yy_source) const;

    virtual void yy_ref_factory_array_assign(
        yy_ref_ptr           yy_array,
        size_t               yy_target,
        const yy_ref_obj     &yy_source) const;

    virtual yy_ref_obj &yy_ref_factory_array_deref(
        yy_ref_ptr           yy_array,
        size_t               yy_source) const;

    virtual int &yy_ref_factory_array_deref_int(
        yy_ref_ptr           yy_array,
        size_t               yy_source) const;

    virtual int &yy_ref_factory_array_deref_type(
        yy_ref_ptr           yy_array,
        size_t               yy_source) const;

    virtual size_t yy_ref_obj_size(
        size_t               yy_ref_size,
        const char           *file,
        int                  lineno) const;

    virtual const char *yy_restore_data(
        const char           *yy_data_ptr,
        yy_ref_ptr           yy_array,
        size_t               yy_target) const;

virtual char *yy_save_data(
        char                 *yy_data_ptr,
        yy_ref_ptr           yy_array,
        size_t               yy_source) const;

    virtual size_t yy_sizeof_data(void) const;

    };  // yy_psr_identsdb_obj_ref_factory_obj

class  yy_psr_identsdb_obj : public yy_psr_obj_fast {

 public:

    enum yy_psr_cmd_max_enum { yy_psr_cmd_max_ = 3787 };

    enum yy_psr_num_states_enum { yy_psr_num_states_ = 33 };

    enum yy_psr_pmin_enum { yy_pmin_ = -2 };

    enum yy_psr_pmax_enum { yy_pmax_ = 34 };

    enum yy_psr_tkn_max_enum { yy_ptknmax_ = 16 };

    enum yy_psr_numbers_enum {
        SPACES_ = yy_psr_obj::yy_discard_type_,
        yy_eof_ = 0,
        INTEGER_ = 1,
        KURZTEXT_ = 2,
        LANGTEXT_ = 3,
        HEXIDENT_ = 4,
        OKS_ = 5,
        HEXMCODE_ = 6,
        // "A" = 7,
        // "B" = 8,
        // "C" = 9,
        // "á" = 10,
        // "â" = 11,
        // "ã" = 12,
        // "R" = 13,
        // "I" = 14,
        // "K" = 15,
        // "H" = 16,
        yy_error_ = -2,
        HRel_ = 17,
        KRel_ = 18,
        TXRDatei_ = 19,
        TXRType_ = 20,
        TXRSatz_ = 21,
        I_ = 22,
        R_ = 23,
        CS_ = 24,
        BS_ = 25,
        AS_ = 26,
        C_ = 27,
        B_ = 28,
        A_ = 29,
        TXMDatei_ = 30,
        TXMType_ = 31,
        TXMSatz_ = 32,
        TXIDatei_ = 33,
        TXISatz_ = 34
        };

    enum yy_psr_class_enum {
        yy_psr_class_icodedesc_ = 0,
        yy_psr_class_mcodedesc_ = 1,
        yy_psr_class_rcodedesc_ = 2,
        yy_psr_max_class_ = 3
        };

    yy_psr_identsdb_obj(
        yy_lex_ptr      yy_this_lex_obj_ptr,
        int             yy_psr_new_class = yy_psr_dflt_class_,
        int             yy_psr_new_start = yy_psr_dflt_start_,
        int             yy_psr_new_left_max = yy_psr_left_max_,
        int             yy_psr_new_rt_max = yy_psr_rt_max_,
        int             yy_psr_new_rdc_max = yy_psr_rdc_max_
        );

    virtual ~yy_psr_identsdb_obj();

    virtual void yy_psr_do_action(
        int                     yy_psr_action_index
        );


		public:
			typedef set<long, less<long> > MCodeSet;
			bool isMCodeUsed (long lMCode)
			{
				if (!m_fMCodesFilled) {
				ENUMNOKEYLONGEX ENK;

					ENK.eFcn = (ENUMNOKEYLONGEXPROC)FillAllMCodeParserList;
					ENK.ePtr = &m_setMCodes;
					ENK.eData = (MPSystemFeatures|MPAllFeatures);
					DEX_EnumMCodesEx (ENK);		// mit allen MCodes füllen

					m_fMCodesFilled = true;
				}

			return m_setMCodes.find (lMCode) != m_setMCodes.end();
			}

		private:
			bool m_fMCodesFilled;
			MCodeSet m_setMCodes;		// alle existierenden MerkmalCodes 

		public:
			enum IMPORTMODE {
				IMPORTMODE_OverWrite = 1,	// der neue Eintrag gilt
				IMPORTMODE_KeepEntry = 2,	// der alte Eintrag gilt
				IMPORTMODE_AdjustManually = 3,	// manuell abgleichen
			};
			IMPORTMODE &IMode (void) { return m_rgIMode; }

			enum REJECTMODE {
				REJECTMODE_RejectUnused = 1,	// nur benutzte importieren
				REJECTMODE_ImportAll = 2,	// alle importieren
			};
			REJECTMODE &RMode (void) { return m_rgRMode; }

		// eigentliche ImportFunktionen
			bool WriteTXI (TXISatz *pTXI);
			bool WriteTXM (TXMSatz *pTXM);
			bool WriteTXR (TXRSatz *pTXR);

		// StatusFenster setzen
			void SetStatus (LPPROGRESSINDICATOR pIStatus)
			{
				if (m_pIStatus) m_pIStatus -> Release();
				m_pIStatus = pIStatus;
				if (m_pIStatus) m_pIStatus -> AddRef();
			}
			HRESULT GetStatus (LPPROGRESSINDICATOR *ppIStatus) 
			{ 
				if (m_pIStatus) {
					*ppIStatus = m_pIStatus; 
					m_pIStatus -> AddRef();
					return S_OK;
				}
				return E_FAIL;
			}

			void SetDataSource (HPROJECT hPr) { m_hPr = hPr; }
			HPROJECT GetDataSource() { return m_hPr; }

		private:
			IMPORTMODE m_rgIMode;	// ImportModus
			REJECTMODE m_rgRMode;	// RejectModus
			LPPROGRESSINDICATOR m_pIStatus;
			HPROJECT m_hPr;				// ZielDatenquelle
		
    };  // yy_psr_identsdb_obj

#endif /* yy_psr_identsdb_obj_h_ */
#ifndef yy_inline_TXISatz
#define yy_inline_TXISatz 1
inline int TXISatz::yy_type() { return (yy_this_type); }
inline int TXISatz::yy_num_operands() { return (yy_this_num_operands); }
inline yy_ref_obj &TXISatz::yy_operand(int yy_operand_num) { return (yy_this_operand[yy_operand_num]); }
#endif /* yy_inline_TXISatz */

#ifndef yy_inline_TXMType
#define yy_inline_TXMType 1
inline int TXMType::yy_type() { return (yy_this_type); }
#endif /* yy_inline_TXMType */

#ifndef yy_inline_TXMSatz
#define yy_inline_TXMSatz 1
inline int TXMSatz::yy_type() { return (yy_this_type); }
inline int TXMSatz::yy_num_operands() { return (yy_this_num_operands); }
inline yy_ref_obj &TXMSatz::yy_operand(int yy_operand_num) { return (yy_this_operand[yy_operand_num]); }
#endif /* yy_inline_TXMSatz */

#ifndef yy_inline_TXRType
#define yy_inline_TXRType 1
inline int TXRType::yy_type() { return (yy_this_type); }
#endif /* yy_inline_TXRType */

#ifndef yy_inline_TXRSatz
#define yy_inline_TXRSatz 1
inline int TXRSatz::yy_type() { return (yy_this_type); }
inline int TXRSatz::yy_num_operands() { return (yy_this_num_operands); }
inline yy_ref_obj &TXRSatz::yy_operand(int yy_operand_num) { return (yy_this_operand[yy_operand_num]); }
#endif /* yy_inline_TXRSatz */

#ifndef yy_psr_dflt_obj

#define yy_psr_dflt_obj yy_psr_identsdb_obj

typedef class  yy_psr_dflt_obj       *yy_psr_dflt_ptr;

#endif /* yy_psr_dflt_obj */

