//////////////////////////////////////////////////////////////////////////////
// Object Description Library 
// File: TRiASTLB.IDL
///////////////////////////////////////////////////////////////////////////////

// Type library:	TRiAS.tlb			{8DE4E3C0-4D53-101B-AAE1-E7E7E7E7E7E7}

// IDispatch*		TRiAS.Application	{8DE4E3C2-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:	DTRiASApp			{8DE4E3C4-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:	DDocuments			{8DE4E3C6-4D53-101B-AAE1-E7E7E7E7E7E7}
// DispInterface:	DDocument			{8DE4E3C8-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:	DViews				{8DE4E3CE-4D53-101B-AAE1-E7E7E7E7E7E7}
// DispInterface:	DView				{8DE4E3D0-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:	DGeoClasses			{8DE4E3CA-4D53-101B-AAE1-E7E7E7E7E7E7}
// DispInterface:	DGeoClass			{8DE4E3CC-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:   DGeoObjects   		{8DE4E3D2-4D53-101B-AAE1-E7E7E7E7E7E7}
// DispInterface:   DGeoObject     		{8DE4E3D4-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:   DGeoFeatures		{8DE4E3D6-4D53-101B-AAE1-E7E7E7E7E7E7}
// DispInterface:   DGeoFeature			{8DE4E3D8-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:	DGeoObjectWins		{8DE4E3DC-4D53-101B-AAE1-E7E7E7E7E7E7}
// DispInterface:	DGeoObjectWin		{8DE4E3DE-4D53-101B-AAE1-E7E7E7E7E7E7}

// DispInterface:	DTRiASCollection	{8DE4E3DF-4D53-101B-AAE1-E7E7E7E7E7E7}
// DispInterface:	DTRiASBaseClass		{8DE4E3E0-4D53-101B-AAE1-E7E7E7E7E7E7}

// @doc
// @module triastlb.idl | IDL source for Automation interfaces 
// @group In diesem Modul definierte Objekte (coclasses)
// @index | OBJECT & TRIASTLB
// @group In diesem Modul definierte Interfaces
// @index | INTERFACE & TRIASDB

cpp_quote("#define TYPELIB_VERSION_MAJOR 3")
cpp_quote("#define TYPELIB_VERSION_MINOR 0")
cpp_quote("#define TYPELIB_VERSION \"3.0\"")
cpp_quote("#define TYPELIB_LCID 0")
cpp_quote("#define TYPELIB_HELPFILE_NAME \"OLEAUTO.HLP\"")

#define TYPELIB_VERSION 3.0
#define TYPELIB_LCID 0
#define TYPELIB_HELPFILE_NAME "OLEAUTO.HLP"

#include <OleAuto.hh>
#define _INCLUDE_HELP_CONTEXTS

///////////////////////////////////////////////////////////////////////////////
// forward declarations
interface DApplication;
interface DDocuments;
interface DDocument;
interface DViews;
interface DView;
interface DGeoClasses;
interface DGeoClass;
interface DGeoObjects;
interface DGeoObject;
interface DGeoFeatures;
interface DGeoFeature;
interface DGeoObjectWins;
interface DGeoObjectWin;

///////////////////////////////////////////////////////////////////////////////
// eigentliche Library

import "oaidl.idl";
import "objidl.idl";

#if !defined(_BASETSD_H_) && (501 >= __midl)
#include <basetsd.h>
#endif // !defined(_BASETSD_H_)

#define NOBASEINTERFACES
#include "idl/TRiASBaseInterfaces.idl"
#include "idl/TRiASToolBars.idl"
#include "idl/TRiASXtension.idl"
#include "idl/TRiASXtensionSite.idl"
#include "idl/TRiASConnections.idl"
#include "idl/VisInfoInterfaces.idl"
#include "idl/TRiASDBInterfaces.idl"

#include "idl/EnumONr.idl"
#include "idl/SearchObjects.idl"

#include "idl/ProgInd2.idl"
#include "idl/TRiASDataObject.idl"
#include "idl/PropertySequence.idl"
#include "idl/PropertySequenceService.idl"

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DApplication | Über das Interface <i DApplication> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung einer Programminstanz von <tr> verfügbar.
// @base public | DTRiASBaseClass
// @supby <o Application>
// @xref <o Application>
// @group Eigenschaften von <i DApplication> 
// @index | DAPPLICATION & PROPERTY
// @group Methoden von <i DApplication> 
// @index | DAPPLICATION & METHOD
// @doc DAPPLICATION
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3C4-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("TRiAS® Applikations-Datenobjekt."),
	helpcontext(DApplication_int)
]  
interface DApplication : DTRiASBaseClass
{
	// @doc DAPPLICATION | PROPERTY
	// @property HRESULT | DApplication | Properties | Die Eigenschaft <op .Properties>
	// TBD
	// @comm Die Eigenschaft <op .Properties> ist zur Zeit nicht implementiert.
	// @xref <i DApplication>
	[id(9), propget] HRESULT Properties ([out, retval]DTRiASProperties **Props);
	
	// @doc DAPPLICATION | METHOD
	// @method HRESULT | DApplication | CreateProperty | Die Methode <om .CreateProperty>
	// TBD
	// @parm VARIANT | PropName | Der Parameter <p PropName> ...
	// @parm VARIANT | PropType | Der Parameter <p PropType> ...
	// @parm VARIANT | Value | Der Parameter <p Value> ...
	// @comm Die Methode <om .CreateProperty> ist zur Zeit nicht implementiert.
	// @xref <i DApplication>
	[id(10)] HRESULT CreateProperty ([in, optional]VARIANT PropName, [in, optional]VARIANT PropType, 
		[in, optional]VARIANT Value, [out, retval]DTRiASProperty **Prop);

	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | Value | Die <op .Value>- Eigenschaft
	// liefert den Namen der Applikation (immer '<tr>').
	// @comm Die Eigenschaft <op .Value> kann nicht gesezt werden.
	// @comm Die Eigenschaft <op .Value> ist die Standardeigenschaft des <i DApplication>-
	// Interfaces.
	// @ex |
	//	MsgBox "Version der Applikation: " & _
	//		TRiAS.Value & " " & TRiAS.Version
	// @xref <i DApplication>
	[
		id(DISPID_VALUE), propget,
		helpstring("Liefert den Namen der Applikation."),
		helpcontext(DApplication_Value_prop)
	] 
	HRESULT Value ([out, retval]BSTR *Value);
	
	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | Name | Die <op .Name>- Eigenschaft
	// liefert den Dateinamen der Applikation (ohne Pfad).
	// @comm Die Eigenschaft <op .Name> kann nicht gesezt werden.
	// @ex |
	//	MsgBox "Name der Programmdatei: " & TRiAS.Name
	// @xref <i DApplication>
	[
		id(3), propget, 
		helpstring("Liefert den Dateinamen der Applikation (ohne Pfad)"),
		helpcontext(DApplication_Name_prop)
	] 
	HRESULT Name ([out, retval]BSTR *Value);		// Name der Anwendung
			
	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | StartupPath | Die <op .StartupPath>- liefert das 
	// Verzeichnis, aus dem Applikation gestartet wurde (readonly).
	// @comm Die Eigenschaft <op .StartupPath> kann nicht gesezt werden.
	// @xref <i DApplication>
	[
		id(100), propget, 
		helpstring("Liefert das Verzeichnis, aus dem Applikation gestartet wurde."),
		helpcontext(DApplication_StartupPath_prop)
	] 
	HRESULT StartupPath ([out, retval]BSTR *Path);	// Arbeitsverzeichnis beim Start

	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | DefaultFilePath | Die <op .DefaultFilePath>- liefert 
	// bzw. setzt den aktuellen Standard-DatenPfad.
	// @comm Der Standard-Datenpfad wird immer dann verwendet, wenn ein Projekt geöffnet bzw.
	// neu angelegt werden soll, für welches kein vollständiger Dateipfad gegeben wurde.
	// @xref <i DApplication>
	[
		id(101), propget, 
		helpstring("Liefert den aktuellen Standard-DatenPfad."),
		helpcontext(DApplication_DefaultFilePath_prop)
	] 
	HRESULT DefaultFilePath ([out, retval]BSTR *Path);
	[
		id(101), propput, 
		helpstring("Modifiziert den aktuellen Standard-DatenPfad."),
		helpcontext(DApplication_DefaultFilePath_prop)
	] 
	HRESULT DefaultFilePath ([in]BSTR Path);
		
	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | FullName | Die <op .FullName>- liefert 
	// den vollen Namen der Applikation (vollständiger Pfad + Dateiname).
	// @comm Die Eigenschaft <op .FullName> kann nicht gesezt werden.
	// @xref <i DApplication>
	[
		id(102), propget, 
		helpstring("Liefert den vollen Namen der Applikation."),
		helpcontext(DApplication_FullName_prop)
	] 
	HRESULT FullName ([out, retval]BSTR *Value);

	// @doc DAPPLICATION | PROPERTY
	// @property VARIANT_BOOL | DApplication | Visible | Die Eigenschaft <op .Visible>
	// setzt bzw. liefert den Anzeigestatus des <tr>-Hauptfensters.
	// @comm Nach dem Start von <tr> über OLE Automation ist das Hauptfenster nicht automatisch
	// sichtbar. Es muß daher explizit mit der Eigenscaft <op .Visible> zur Anzeige gebracht werden.
	// @xref <i DApplication>
	[
		id(103), propget, 
		helpstring("Liefert den Anzeigestatus des TRiAS-Hauptfensters."),
		helpcontext(DApplication_Visible_prop)
	]
	HRESULT Visible ([out, retval]VARIANT_BOOL *IsVisible);
	[
		id(103), propput, 
		helpstring("Moifiziert den Anzeigestatus des TRiAS-Hauptfensters."),
		helpcontext(DApplication_Visible_prop)
	]
	HRESULT Visible ([in]VARIANT_BOOL IsVisible);
	
	// @doc DAPPLICATION | PROPERTY
	// @property <o GeoDocuments> * | DApplication | Documents | Die Eigenschaft <op .Documents>
	// liefert eine Datenobjektsammlung (vom Typ <o GeoDocuments>) die sämtliche aktuelle geöffneten 
	// Projekte enthält.
	// @comm Die Eigenschaft <op .Documents> kann nicht geschrieben werden.
	// @comm Zur Zeit enthält die gelieferte Datenobjektsammlung immer genau ein (das geöffnete) Projekt,
	// da in <tr> gleichzeitig maximal ein Projekt geöffnet werden kann.
	// @xref <i DApplication>, <o GeoDocuments>
	[
		id(106), propget, 
		helpstring("Liste der geöffneten Projekte"),
		helpcontext(DApplication_Documents_prop)
	]
	HRESULT Documents ([out, retval]DDocuments **Docs);	// derzeit geöffnete Projekte

	// @doc DAPPLICATION | PROPERTY
	// @property <o GeoDocument> * | DApplication | ActiveDocument | Die Eigenschaft <op .ActiveDocument>
	// liefert das zur Zeit aktive Projekt. 
	// @comm Zur Zeit existiert gleichzeitig immer maximal genau ein geöffnetes Projekt, welches 
	// durch die Eigenschaft <op .ActiveDocument> zur Verfügung gestellt wird.
	// @comm Die Eigenschaft <op .ActiveDocument> wird sicherlich häufig als oberste Funktion der
	// Objekthierarchie von <tr> gerufen, da über das aktive Projekt (<o GeoDocument>) alle anderen 
	// Objekte der Hierarchie zugänglich sind.
	// @xref <i DApplication>, <o GeoDocument>
	[
		id(108), propget, 
		helpstring("Liefert das aktive Projekt."),
		helpcontext(DApplication_ActiveDocument_prop)
	]
	HRESULT ActiveDocument ([out, retval]DDocument **Doc);	// aktives Dokument

	// @doc DAPPLICATION | PROPERTY
	// @property long | DApplication | Left | Die Eigenschaft <op .Left>
	// setzt bzw. liefert die linke Koordinate des Hauptfensters in Bildschirmkoordinaten.
	// @xref <i DApplication>
	[
		id(112), propget, 
		helpstring("Liefert die linke Koordinate des Hauptfensters."),
		helpcontext(DApplication_Left_prop)
	]
	HRESULT Left ([out, retval]long *Left);
	[
		id(112), propput, 
		helpstring("Modifiziert die linke Koordinate des Hauptfensters."),
		helpcontext(DApplication_Left_prop)
	]
	HRESULT Left ([in]long Left);
	
	// @doc DAPPLICATION | PROPERTY
	// @property long | DApplication | Top | Die Eigenschaft <op .Top>
	// setzt bzw. liefert die obere Koordinate des Hauptfensters in Bildschirmkoordinaten.
	// @xref <i DApplication>
	[
		id(113), propget, 
		helpstring("Obere Koordinate des Hauptfensters."),
		helpcontext(DApplication_Top_prop)
	]
	HRESULT Top ([out, retval]long *Top);
	[
		id(113), propput, 
		helpstring("Obere Koordinate des Hauptfensters verändern."),
		helpcontext(DApplication_Top_prop)
	]
	HRESULT Top ([in]long Top);
	
	// @doc DAPPLICATION | PROPERTY
	// @property long | DApplication | Width | Die Eigenschaft <op .Width>
	// setzt bzw. liefert die Breite des Hauptfensters in Bildschirmkoordinaten.
	// @xref <i DApplication>
	[
		id(114), propget, 
		helpstring("Breite des Hauptfensters."),
		helpcontext(DApplication_Width_prop)
	]
	HRESULT Width ([out, retval]long *Width);
	[
		id(114), propput, 
		helpstring("Breite des Hauptfensters verändern."),
		helpcontext(DApplication_Width_prop)
	]
	HRESULT Width ([in]long Width);
	
	// @doc DAPPLICATION | PROPERTY
	// @property long | DApplication | Height | Die Eigenschaft <op .Height>
	// setzt bzw. liefert die Höhe des Hauptfensters in Bildschirmkoordinaten.
	// @xref <i DApplication>
	[
		id(115), propget, 
		helpstring("Höhe des Hauptfensters."),
		helpcontext(DApplication_Height_prop)
	]
	HRESULT Height ([out, retval]long *Height);
	[
		id(115), propput, 
		helpstring("Höhe des Hauptfensters verändern."),
		helpcontext(DApplication_Height_prop)
	]
	HRESULT Height ([in]long Height);

	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | StatusBar | Die Eigenschaft <op .StatusBar>
	// setzt bzw. liefert den aktuell in Statusbar des <tr> Hauptfensters angezeigten Text.
	// @comm Das Lesen des aktuell angezeigten Textes aus der Statusbar ist zur Zeit nicht 
	// implementiert.
	// @xref <i DApplication>
	[
		id(116), propget, 
		helpstring("Aktuell in Statusbar angezeigter Text."),
		helpcontext(DApplication_StatusBar_prop)
	]
	HRESULT StatusBar ([out, retval]BSTR *Text);
	[
		id(116), propput, 
		helpstring("Aktuell in Statusbar angezeigten Text verändern."),
		helpcontext(DApplication_StatusBar_prop)
	]
	HRESULT StatusBar ([in]BSTR Text);

	// @doc DAPPLICATION | PROPERTY
	// @property HRESULT | DApplication | Interactive | Die Eigenschaft <op .Interactive>
	// setzt bzw. liefert den Interaktionsstatus des Hauptfensters. 
	// @comm Der Interaktionsstatus legt fest, ob das <tr> Hauptfenster durch den Nutzer
	// erzeugt wurde oder aber lediglich programmatisch über die Eigenschaft <op .Visible> 
	// zur Anzeige gebracht worden ist.
	// @comm Dieser Wert ist z.B. dann wichtig, wenn beim Schließen externe Programme entschieden 
	// werden muß, ob das <tr> Hauptfenster sichtbar bleiben sollte oder nicht.
	// @xref <i DApplication>
	[
		id(117), propget, 
		helpstring("Abfrage des Interaktionsstatus des Hauptfensters"),
		helpcontext(DApplication_Interactive_prop)
	]
	HRESULT Interactive ([out, retval]VARIANT_BOOL *IsInteractive);
	[
		id(117), propput, 
		helpstring("Verändern des Interaktionsstatus des Hauptfensters"),
		helpcontext(DApplication_Interactive_prop)
	]
	HRESULT Interactive ([in]VARIANT_BOOL IsInteractive);
	
	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | Caption | Die Eigenschaft <op .Caption>
	// setzt bzw. liefert den aktuell im Caption (Kopfzeile) des <tr> Hauptfensters angezeigten Text.
	// @xref <i DApplication>
	[
		id(118), propget, 
		helpstring("Aktuell in Caption angezeigter Text."),
		helpcontext(DApplication_Caption_prop)
	]
	HRESULT Caption ([out, retval]BSTR *Text);
	[
		id(118), propput, 
		helpstring("Aktuell in Caption angezeigten Text verändern."),
		helpcontext(DApplication_Caption_prop)
	]
	HRESULT Caption ([in]BSTR Text);
	
	// @doc DAPPLICATION | METHOD
	// @method HRESULT | DApplication | NewDocument | Die Methode <om .NewDocument>
	// erzeugt ein neues Projekt und fügt dieses zur Liste der geöffneten Projekte hinzu.
	// @parm BSTR | FileName | Der Parameter <p FileName> gibt den Dateinamen des neu zu 
	// erzeugenden Projektes vor.
	// @parm VARIANT | UserName | Der (optionale) Parameter <p UserName> wird zur Zeit nicht ausgewertet.
	// @parm VARIANT | PassWord | Der (optionale) Parameter <p PassWord> wird zur Zeit nicht ausgewertet.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> muß Werte vom Typ <t OPENMODE>
	// enthalten, ansonsten tritt ein Fehler auf. 
	// @comm Da zur Zeit in <tr> immer maximal genau ein Projekt geöffnet sein kann, wird durch
	// die Methode <om .NewDocument> ein evtl. geöffnetes Projekt zuerst geschlossen, bevor das
	// neue Projekt angelegt und geöffnet wird. Die Liste der geöffneten Projekte enthält daher
	// genau dieses Projekt.
	// @rdesc Die Methode <om .NewDocument> liefert das neu erzeugte und geöffnete Projekt.
	// @xref <i DApplication>
	[
		id(104), 
		helpstring("Neues Projekt erzeugen und zur Liste der geöffneten Projekte hinzufügen"),
		helpcontext(DApplication_NewDocument_meth)
	]
	HRESULT NewDocument ([in]BSTR FileName,	[in, optional]VARIANT UserName, 
			[in, optional]VARIANT PassWord, [in, optional]VARIANT Mode, [out, retval]DDocument **Doc);
	
	// @doc DAPPLICATION | METHOD
	// @method <o GeoDocument> *| DApplication | OpenDocument | Die Methode <om .OpenDocument>
	// öffnet ein existierendes Projekt und fügt dieses zur Liste der geöffneten Projekte hinzu.
	// @parm BSTR | FileName | Der Parameter <p FileName> gibt den Dateinamen des zu 
	// öffnenden Projektes vor.
	// @parm VARIANT | UserName | Der (optionale) Parameter <p UserName> wird zur Zeit nicht ausgewertet.
	// @parm VARIANT | PassWord | Der (optionale) Parameter <p PassWord> wird zur Zeit nicht ausgewertet.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> muß Werte vom Typ <t OPENMODE>
	// enthalten, ansonsten tritt ein Fehler auf. 
	// @comm Da zur Zeit in <tr> immer maximal genau ein Projekt geöffnet sein kann, wird durch
	// die Methode <om .OpenDocument> ein evtl. geöffnetes Projekt zuerst geschlossen, bevor das
	// neue Projekt geöffnet wird. Die Liste der geöffneten Projekte enthält daher
	// genau dieses Projekt.
	// @rdesc Die Methode <om .OpenDocument> liefert das neu geöffnete Projekt.
	// @xref <i DApplication>
	[
		id(105), 
		helpstring("Existierendes Projekt öffnen und zur Liste der geöffneten Projekte hinzufügen."),
		helpcontext(DApplication_OpenDocument_meth)
	]
	HRESULT OpenDocument ([in]BSTR FileName, [in, optional]VARIANT UserName, 
			[in, optional]VARIANT PassWord, [in, optional]VARIANT Mode, [out, retval]DDocument **Doc);

	// @doc DAPPLICATION | METHOD
	// @method <o GeoDocument> * | DApplication | GetDocument | Die Methode <om .GetDocument>
	// liefert ein bereits eröffnetes Projekt. 
	// @parm VARIANT | Document | Der Parameter <p Document> referenziert das gesuchte Projekt.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> muß Werte des Typs <t DOCMODE> enthalten,
	// da sonst ein Fehler auftritt.
	// @rdesc Die Methode <om .GetDocument> liefert das gewünschte Projekt, wenn dieses geöffnet ist.
	// @comm Die Methode <om .GetDocument> hat zur Zeit keine Bedeutung für die Arbeit mit <tr>, da 
	// gleichzeitig immer nur maximal ein Projekt geöffnet sein kann.
	// @xref <i DApplication>
	[
		id(107), 
		helpstring("Liefert ein bereits eröffnetes Projekt."),
		helpcontext(DApplication_GetDocument_meth)
	]
	HRESULT GetDocument ([in] VARIANT Document, [in, optional] VARIANT Mode,
			[out, retval]DDocument **Doc);

	// @doc DAPPLICATION | METHOD
	// @method int | DApplication | Quit | Die Methode <om .Quit> schließt <tr>.
	// @parm VARIANT | CleanUp | Der (optionale) Parameter <p CleanUp> legt fest, ob beim Nutzer
	// nachgefragt werden soll, ob das projekt gespeichert werden soll, wenn seit dem letzten 
	// Speichern Änderungen am Projekt vorgenommen worden sind. Wenn der Parameter nicht gegeben ist,
	// dann wird ggf. nachgefragt, ob gespeichert werden soll.
	// @rdesc Der Rückkehrwert hat zur Zeit keine Bedeutung.
	// @xref <i DApplication>
	[
		id(109), 
		helpstring("Schließen der Applikation."),
		helpcontext(DApplication_Quit_meth)
	]
	HRESULT Quit ([in, optional] VARIANT CleanUp, [out, retval] int *Result);

	// @doc DAPPLICATION | METHOD
	// @method long | DApplication | Advise | Die Methode <om .Advise>
	// dient der Anmeldung eines NotificationSinks bei <tr>.
	// @parm IDispatch * | AdviseSink | Der Parameter <p AdviseSink> enthält einen Zeiger auf ein 
	// Interface vom Typ <i DTRiASNotificationSink>.
	// @comm Ein NotificationSink für <tr> ist ein Objekt, welches ein Interface
	// vom Typ <i DTRiASNotificationSink> implementiert hat, über welches verschiedene 
	// Zustandsmitteilungen (Events) von <tr> verschickt werden. Mit Hilfe dieser NotificationSinks
	// ist eine Integration von externen Modulen in die funktionalen Abläufe in <tr> möglich.
	// @comm <b Interne Makrosprache>: Diese Methode ist nicht verfügbar, da Notifikationen 
	// über die Makrooberfläche verfügbar sind und direkt in internen Scripten integriert sein können.
	// @rdesc Der gelieferte Wert dient der eindeutigen Identifikation der registrierten Verbindung
	// und muß beim Abmelden des NotificationSinks (mit der Methode <om .UnAdvise>) übergeben werden.
	// @xref <i DApplication>, <i DTRiASNotificationSink>, <om .UnAdvise>
	[
		id(110), 
		helpstring ("Anmelden eines NotificationSinks"),
		helpcontext(DApplication_Advise_meth)
	]
	HRESULT Advise ([in]IDispatch *AdviseSink, [out, retval]long *Cookie);
	
	// @doc DAPPLICATION | METHOD
	// @method void | DApplication | UnAdvise | Die Methode <om .UnAdvise>
	// dient der Abmeldung eines NotificationSinks bei <tr>.
	// @parm long | Cookie | Der Parameter <p Cookie> enthält den Wert, der bei der Anmeldung
	// des NotificationSinks mit der Methode <om .Advise> zurück geliefert wurde.
	// @comm <b Interne Makrosprache>: Diese Methode ist nicht verfügbar, da Notifikationen 
	// über die Makrooberfläche verfügbar sind und direkt in internen Scripten integriert sein können.
	// @xref <i DApplication>, <om .Advise>
	[
		id(111), 
		helpstring ("Abmelden eines NotificationSinks"),
		helpcontext(DApplication_UnAdvise_meth)
	]
	HRESULT UnAdvise ([in]long Cookie);

	// @doc DAPPLICATION | METHOD
	// @method long | DApplication | AddObjectProperty | Die Methode <om .AddObjectProperty>
	// dient der Anmeldung einer Objekteigenschaft bei <tr>.
	// @parm IDispatch * | ObjProp | Der Parameter <p ObjProp> enthält einen Zeiger auf ein
	// Interface vom Typ <i DObjectProperty> oder <i DObjectProperty2>.
	// @comm Eine Objekteigenschaft ist ein Objekt, welches ein Interface vom Typ 
	// <i DObjectProperty> oder <i DObjectProperty2> implementiert hat, mit dessen Hilfe für
	// beliebige Objekte <o GeoObject> eine bestimmte Objekteigenschaft berechnet werden kann.
	// Die hier registrierten Objekteigenschaften sind in <tr> gleichrangig mit allen anderen
	// Objekteigenschaften eines Objektes verfügbar.
	// @rdesc Der gelieferte Wert dient der eindeutigen Identifikation der registrierten 
	// Objekteigenschaft und muß bei ihrer Abmeldung (mit der Methode <om .RemoveObjectProperty>) 
	// übergeben werden.
	// @comm <b Interne Makrosprache>: Diese Methode ist nicht verfügbar, da Objekteigenschaften
	// direkt definiert und über die <tr> Oberfläche installiert werden können.
	// @xref <i DApplication>, <i DObjectProperty>, <i DObjectProperty2>, <om .RemoveObjectProperty>
	[
		id(119), 
		helpstring ("Anmelden einer Objekteigenschaft."),
		helpcontext(DApplication_AddObjectProperty_meth)
	]
	HRESULT AddObjectProperty ([in] IDispatch *ObjProp, [out, retval] long *Cookie);
	
	// @doc DAPPLICATION | METHOD
	// @method HRESULT | DApplication | RemoveObjectProperty | Die Methode <om .RemoveObjectProperty>
	// dient der Abmeldung einer Objekteigenschaft bei <tr>
	// @parm long | Cookie | Der Parameter <p Cookie> enthält den Wert, der bei der Anmeldung
	// der Objekteigenschaft mit der Methode <om .AddObjectProperty> zurück geliefert wurde.
	// @comm <b Interne Makrosprache>: Diese Methode ist nicht verfügbar, da Objekteigenschaften
	// direkt definiert und über die <tr> Oberfläche installiert werden können.
	// @xref <i DApplication>
	[
		id(120), 
		helpstring ("Abmelden einer Objekteigenschaft."),
		helpcontext(DApplication_RemoveObjectProperty_meth)
	]
	HRESULT RemoveObjectProperty ([in]long Cookie);

	// @doc DAPPLICATION | PROPERTY
	// @property BSTR | DApplication | Version | Die <op .Version>- liefert 
	// die volle Versionsbezeichnung der Applikation (readonly).
	// @comm Die Eigenschaft <op .Version> kann nicht gesetzt werden.
	// @comm Die Eigenschaft <op .Version> liefert die volle Versionsbezeichnung der installierten 
	// Applikation in folgendem Format: Va.bb.ccc (ddd), wobei hier a.bb für die Releasenummer, 
	// ccc für die Buildnummer und ddd für einen zusätzlichen beschreibenden Text stehen. So kann 
	// beispielsweise die Zeichenkette 'V3.07.982 (Release)' als Eigenschaftswert geliefert werden.
	// @xref <i DApplication>
	[
		id(121), propget,
		helpstring("Liefert die volle Versionsbezeichnung der Applikation."),
		helpcontext(DApplication_Version_prop)
	] 
	HRESULT Version ([out, retval]BSTR *Version);

	// @doc DAPPLICATION | PROPERTY
	// @property <i DControlToolBars> * | DApplication | ToolBars | Die Eigenschaft <op .ToolBars>
	// liefert die Sammlung aller existierenden Toolbars.
	// @xref <i DApplication>
	[
		id(122), propget,
		helpstring("Liefert die Sammlung aller existierenden Toolbars."),
		helpcontext(DApplication_Toolbars_prop)
	]
	HRESULT ToolBars ([out, retval]DControlToolBars **ToolBars);

	// @doc DAPPLICATION | METHOD
	// @method <i DControlToolBar> * | DApplication | GetToolBar | Die Methode <om .GetToolBar>
	// liefert ein Toolbarobjekt aus der Sammlung der existierenden Toolbars.
	// @parm BSTR | Name | Der Parameter <p Name> gibt den Namen der zu liefernden Toolbar vor.
	// @xref <i DApplication>
	[
		id(123),
		helpstring("Liefert ein Toolbarobjekt aus der Sammlung der existierenden Toolbars."),
		helpcontext(DApplication_GetToolBar_meth)
	]
	HRESULT GetToolBar ([in] BSTR Name, [out, retval] DControlToolBar **ToolBar);

	// @doc DAPPLICATION | METHOD
	// @method <i DControlToolBar> * | DApplication | AddToolBar | Die Methode <om .AddToolBar>
	// fügt eine neue Toolbar zur Sammlung der existierenden Toolbars hinzu.
	// @parm BSTR | Name | Der Parameter <p Name> gibt den Namen der neu zu erzeugenden Toolbar vor.
	// @parm VARIANT | Style | Der (optionale) Parameter <p Style> enthält den Stil der neu zu 
	// erzeugenden Toolbar. Der Parameter muß Werte von typ <t DOCKSTATE> enthalten. Wenn der Parameter
	// nicht gegeben ist, dann wird der Wert <e DOCSTATE.DOCKSTATE_DOCKEDTOP> angenommen.
	// @xref <i DApplication>
	[
		id(124),
		helpstring("Fügt eine neue Toolbar zur Sammlung der existierenden Toolbars hinzu."),
		helpcontext(DApplication_AddToolbar_meth)
	]
	HRESULT AddToolBar ([in] BSTR Name, [in, optional] VARIANT Style, [out, retval] DControlToolBar **ToolBar);

	// @doc DAPPLICATION | METHOD
	// @method void | DApplication | RemoveToolBar | Die Methode <om .RemoveToolBar>
	// entfernt eine Toolbar aus der Sammlung der existierenden Toolbars.
	// @parm BSTR | Name | Der Parameter <p Name> gibt den Namen der zu entfernenden Toolbar vor.
	// @xref <i DApplication>
	[
		id(125),
		helpstring("Entfernt eine Toolbar aus der Sammlung der existierenden Toolbars."),
		helpcontext(DApplication_RemoveToolbar_meth)
	]
	HRESULT RemoveToolBar ([in] BSTR Name);

	// @doc DAPPLICATION | METHOD
	// @method void | DApplication | RunScript | Die Methode <om .RunScript>
	// startet den gegebenen BasicScript.
	// @parm BSTR | Name | Der Parameter <p Name> gibt den Namen des auszuführenden Basicscriptes vor.
	// Dieser Name kann entweder ein gültiger Dateiname eines separat gespeicherten Basicscriptes sein, 
	// oder aber der Name eines im aktuellen Projekt gespeicherten (internen) Makroprojektes.
	// @comm Der Parameter <p Name> wird zuerst als Name eines internen Makroprojektes interpretiert. Erst
	// wenn kein derartiges Makroprojekt existiert, wird versucht, den Namen als dateinamen auszuwerten.
	// @xref <i DApplication>
	[
		id(126),
		helpstring("Startet den gegebenen BasicScript."),
		helpcontext(DApplication_RunScript_meth)
	]
	HRESULT RunScript ([in] BSTR Name);

	// @doc DAPPLICATION | METHOD
	// @method void | DApplication | StopScript | Die Methode <om .StopScript>
	// stoppt die Ausführung des gegebenen BasicScripts.
	// @parm BSTR | Name | Der Parameter <p Name>  gibt den Namen des auszuführenden Basicscriptes vor.
	// Dieser Name kann entweder ein gültiger Dateiname eines separat gespeicherten Basicscriptes sein, 
	// oder aber der Name eines im aktuellen Projekt gespeicherten (internen) Makroprojektes. 
	// @comm Der Parameter <p Name> muß den gleichen Wert enthalten, wie er beim Starten des Scriptes
	// (mit der Methode <om .RunScript>) verwendet wurde.
	// @xref <i DApplication>, <om .RunScript>
	[
		id(127),
		helpstring("Stoppt die Ausführung des gegebenen BasicScripts."),
		helpcontext(DApplication_StopScript_meth)
	]
	HRESULT StopScript ([in] BSTR Name);

	// @doc DAPPLICATION | METHOD
	// @method IDispatch * | DApplication | CreateInstance | Die Methode <om .CreateInstance>
	// erzeugt ein COM-Objekt im Kontext (Adressraum) der aktuellen <tr> Instanz.
	// @parm BSTR | ProgID | Der Parameter <p ProgID> muß den ProgID des Objektes enthalten, welches 
	// im Kontext der aktuellen <tr> Instanz erzeugt werden soll.
	// @xref <i DApplication>
	[
		id(128),
		helpstring("Erzeugt ein COM-Objekt im Kontext der aktuellen Instanz."),
		helpcontext(DApplication_CreateInstance_meth)
	]
	HRESULT CreateInstance ([in] BSTR ProgID, [out, retval] IDispatch **ComObj);

	// @doc DAPPLICATION | PROPERTY
	// @property long | DApplication | VersionLong | Die Eigenschaft <op .VersionLong>
	// liefert die Versionsnummer von <tr> als Integerzahl.
	// @comm Die Versionsnummer wird in folgenden Format zur Verfügung gestellt:
	// @iex
	//	>	32              17 16               1
	//	>	+-----------------+-----------------+
	//	>	|Version |Release | Build           |
	//	>	+-----------------+-----------------+
	//	So wird z.B. Die Versionsnummer 3.07.984 als Hexadezimalzahl 0x030703D8 geliefert.
	//
	// @xref <i DApplication>
	[
		id(129),
		propget,
		helpstring("Liefert die Versionsnummer von TRiAS als Zahl."),
		helpcontext(DApplication_VersionLong_prop)
	]
	HRESULT VersionLong ([out, retval] long *Version);

	// @doc DAPPLICATION | METHOD
	// @method void | DApplication | LoadExtension | Die Methode <om .LoadExtension>
	// lädt einen <tr> Zusatzmodul.
	// @parm BSTR | ProgID | Der Parameter <p ProgID> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @parm VARIANT | Xtension | Der (optionale) Parameter <p Xtension> ...
	// @comm <b Interne Makrosprache>: Diese Methode ist nicht verfügbar, da Erweiterungsmodule
	// direkt definiert und über die Oberfläche registriert und instantiiert werden können.
	// @xref <i DApplication>
	[
		id(130),
		helpstring("Lädt einen TRiAS Zusatzmodul."),
		helpcontext(DApplication_LoadExtension_meth)
	]
	HRESULT LoadExtension ([in] BSTR ProgID, [in, optional] VARIANT Mode, [in, optional] VARIANT Xtension);

	// @doc DAPPLICATION | METHOD
	// @method void | DApplication | UnloadExtension | Die Methode <om .UnloadExtension>
	// entlädt einen <tr> Zusatzmodul.
	// @parm BSTR | ProgID | Der Parameter <p ProgID> ...
	// @comm <b Interne Makrosprache>: Diese Methode ist nicht verfügbar, da Erweiterungsmodule
	// direkt definiert und über die Oberfläche registriert und instantiiert werden können.
	// @xref <i DApplication>
	[
		id(131),
		helpstring("Entlädt einen TRiAS Zusatzmodul."),
		helpcontext(DApplication_UnloadExtension_meth)
	]
	HRESULT UnloadExtension ([in] BSTR ProgID);

	// @doc DAPPLICATION | METHOD
	// @method IDispatch * | DApplication | GetExtension | Die Methode <om .GetExtension>
	// liefert einen geladenen <tr> Zusatzmodul.
	// @parm BSTR | ProgID | Der Parameter <p ProgID> enthält den ProgID der zu liefernden
	// <tr> Erweiterung.
	// @comm Die gesuchte <tr> Erweiterung muß geladen sein (<om .LoadExtension>), ansonsten 
	// liefert die Methode <om .GetExtension> den Wert <cv Nothing>.
	// @xref <i DApplication>, <om .LoadExtension>
	[
		id(132),
		helpstring("Liefert einen geladenen TRiAS Zusatzmodul."),
		helpcontext(DApplication_GetExtension_meth)
	]
	HRESULT GetExtension ([in] BSTR ProgID, [out, retval] IDispatch **Xtension);

	// @doc DAPPLICATION | PROPERTY
	// @property HRESULT | DApplication | Tag | Die Eigenschaft <op .Tag>
	// setzt bzw. liest beliebige Daten an diesem Objekt zur Verwendung für externe Programme.
	// @parm BSTR | TagName | Der Parameter <p TagName> gibt einen Namen vor, unter dem die
	// Daten abgelegt werden und wieder abgefragt werden können.
	// @parm VARIANT | TagData | Der Parameter <p TagData> enthält die Daten, die gespeichert
	// werden sollen.
	// @comm Um Daten zu löschen muß dem Tag der Wert vbEmpty zugewiesen werden.
	// @xref <i DApplication>
	[
		id(133),
		propput,
		helpstring("Setzt beliebige Daten an diesem Objekt zur Verwendung für externe Programme."),
		helpcontext(DApplication_Tag_prop)
	]
	HRESULT Tag ([in] BSTR TagName, [in] VARIANT TagData);
	[
		id(133),
		propget,
		helpstring("Liest beliebige Daten an diesem Objekt zur Verwendung für externe Programme."),
		helpcontext(DApplication_Tag_prop)
	]
	HRESULT Tag ([in] BSTR TagName, [out, retval] VARIANT *TagData);

#if defined(_EXPLICIT_FUNCTIONS)
	[
		id(...), 
		helpstring("Fügt ein existierendes Projekt zur Liste der aktiven Dokumente hinzu."),
	]
	HRESULT AddDocument ([in]BSTR Proj, [out, retval]DDocument **Doc);
	
	[
		id(...), 
		helpstring("Macht ein geöffnetes Projekt zum derzeit aktiven Projekt."),
	]
	HRESULT MakeActive ([in]BSTR Proj, [out, retval]DDocument **Doc);
	
	[
		id(...), 
		helpstring("Schließt ein geöffnetes Projekt."),
	]
	HRESULT CloseDocument ([in]BSTR Proj);
#endif // _EXPLICIT_FUNCTIONS
};

///////////////////////////////////////////////////////////////////////////////
// Eine Liste von geöffneten Projekte
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3C6-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Sammlung von TRiAS® Documenten."),
	helpcontext(DDocuments_int)
]
interface DDocuments : DTRiASCollection 
{
	[id(200), helpstring("Neues Projekt erzeugen und zu dieser Sammlung hinzufügen.")]
		HRESULT New ([in]BSTR FileName, [in, optional]VARIANT UserName, [in, optional]VARIANT PassWord,
					 [in, optional]VARIANT Mode, [out, retval]DDocument **Doc);
			    
	[id(201), helpstring("Ein existierendes Projekt zu dieser Sammlung hinzufügen.")]
		HRESULT Open ([in]BSTR FileName, [in, optional]VARIANT UserName, [in, optional]VARIANT PassWord,
					  [in, optional]VARIANT Mode, [out, retval]DDocument **Doc);
};
	
///////////////////////////////////////////////////////////////////////////////
// Diverse Typdefinitionen

#if !defined(_OPENMODE_DEFINED)
#define _OPENMODE_DEFINED
cpp_quote("#if !defined(_OPENMODE_DEFINED)")
cpp_quote("#define _OPENMODE_DEFINED")
// @doc OPENMODEENUMS 
// @enum OPENMODE | Der Mode, in dem ein Projekt geöffnet werden soll.
// @xref <om DApplication.NewDocument>, <om DApplication.OpenDocument>
enum _tagOPENMODE {
	[helpstring("Eröffnen mit Schreib- und Leserechten"), helpcontext(OPENMODE_enum)]
		OPENMODE_Normal = 0,	// @emem Projekt mit Schreib- und Leserechten öffnen.
	[helpstring("Eröffnen mit Leserechten"), helpcontext(OPENMODE_enum)]
		OPENMODE_ReadOnly = 1,	// @emem Projekt lediglich zum Lesen öffnen.
	[helpstring("Standardansicht nach eröffnen nicht anzeigen"), helpcontext(OPENMODE_enum)]
		OPENMODE_NoDefaultView = 2,		// @emem Evtl. existierende Standardansicht nach 
			// Eröffnen nicht sofort anzeigen.
	[helpstring("Projektfenster nicht anzeigen"), helpcontext(OPENMODE_enum)]
		OPENMODE_HideDocument = 4,		// @emem <tr> Hauptfenster nach dem Öffnen nicht 
			// sofort sichtbar machen.
	[helpstring("Dieses Projekt ist ab sofort das aktuelle Projekt."), hidden, helpcontext(OPENMODE_enum)]
		OPENMODE_Activate = 8,
	[helpstring("Neues Projekt muß 16Bit kompatibel sein."), helpcontext(OPENMODE_enum)]
		OPENMODE_16BitCompatible = 0x2040,	// @emem Neu zu erzeugendes Projekt kompatibel zur
			// <tr> V2.00 anlegen. Diese Option hat nur Sinn im Zusammenhang mit der 
			// <om DApplication.NewDocument>.
	[helpstring("Dieses Projekt nicht zum MRU-Menu hizufügen."), hidden, restricted, helpcontext(OPENMODE_enum)]
		OPENMODE_DoNotAddToMRU = 0x10,		// @emem Geöffnetes Projekt nicht zur Liste der
			// zuletzt geöffneten Projekte hinzufügen. Dieses Projekt ist damit nicht über
			// das <tr> Projekt-Menu verfügbar.
	[helpstring("Bei Erzeugen des Projektes sofort eine interne datenquelle erzeugen."), hidden, helpcontext(OPENMODE_enum)]
		OPENMODE_CreateInternalDatasource = 0x20,		// @emem Bei Erzeugen des Projektes sofort eine
		// interne Datenquelle miterzeugen
};
cpp_quote("#endif // _OPENMODE_DEFINED")
#endif // _OPENMODE_DEFINED

cpp_quote("#if !defined(_DOCMODE_DEFINED)")
cpp_quote("#define _DOCMODE_DEFINED")
// @doc DOCMODEENUMS
// @enum DOCMODE | Der Mode, der die konkrete Funktionalität der Methode <om DApplication.GetDocument> 
// festlegt.
// @comm Der Datentyp <t DOCMODE> hat zur Zeit keine Bedeutung für die Arbeit mit <tr>, da 
// gleichzeitig immer nur maximal ein Projekt geöffnet sein kann.
// @xref <i DApplication>, <om DApplication.GetDocument>
enum _tagDOCMODE {
	[helpstring("Liefert existierende Projekt."), helpcontext(DOCMODE_enum)]
		DOCMODE_Get = 0,	// @emem Die Methode <om DApplication.GetDocument> liefert ein existierendes Projekt.
	[helpstring("Liefert ein neu erzeugtes Document, altes Dokument wird geschlossen."), hidden, helpcontext(DOCMODE_enum)]
		DOCMODE_Replace = 1,
	[helpstring("Erzeugt ein Projekt neu."), helpcontext(DOCMODE_enum)]
		DOCMODE_Add = 2,	// @emem Die Methode <om DApplication.GetDocument> erzeugt ein neues Projekt.
	[helpstring("Löscht ein Projekt."), helpcontext(DOCMODE_enum)]
		DOCMODE_Remove = 3,	// @emem Die Methode <om DApplication.GetDocument> löscht ein existierendes Projekt.
};
cpp_quote("#endif // !defined(_DOCMODE_DEFINED)")

cpp_quote("#if !defined(_VIEWMODE_DEFINED)")
cpp_quote("#define _VIEWMODE_DEFINED")
// @doc VIEWMODEENUMS
// @enum VIEWMODE | Der Mode, der die konkrete Funktionalität der Methode <om DDocument.GetView> festlegt.
// @xref <i DDocument>, <om DDocument.GetView>
enum _tagVIEWMODE {
	[helpstring("Liefert existierende View."), helpcontext(VIEWMODE_enum)]
		VIEWMODE_Get = 0,		// @emem Die Methode <om DDocument.GetView> liefert eine existierende Ansicht.
	[hidden, helpstring("Liefert neu erzeugte Ansicht, existierende Ansicht wird gelöscht."), hidden, helpcontext(VIEWMODE_enum)]
		VIEWMODE_Replace = 1,
	[helpstring("Erzeugt eine Ansicht neu."), helpcontext(VIEWMODE_enum)]
		VIEWMODE_Add = 2,		// @emem Die Methode <om DDocument.GetView> erzeugt eine neue Ansicht.
	[helpstring("Löscht eine Ansicht."), helpcontext(VIEWMODE_enum)]
		VIEWMODE_Remove = 3,	// @emem Die Methode <om DDocument.GetView> löscht eine existierende Ansicht.
};
cpp_quote("#endif // !defined(_VIEWMODE_DEFINED)")

cpp_quote("#if !defined(_GEOCLASSMODE_DEFINED)")
cpp_quote("#define _GEOCLASSMODE_DEFINED")
// @doc GEOCLASSMODEENUMS
// @enum GEOCLASSMODE | Der Mode, der die konkrete Funktionalität der Methoden <om DDocument.GetClass> 
// bzw. <om DView.GetClass> festlegt.
// @xref <i DDocument>, <om DDocument.GetClass>, <om DView.GetClass>
enum _tagGEOCLASSMODE {
	[helpstring("Liefert existierende Objektklasse (GeoClass)."), helpcontext(GEOCLASSMODE_enum)]
		GEOCLASSMODE_Get = 0,		// @emem Die Methoden <om DDocument.GetClass> bzw. <om DView.GetClass> 
			// liefert eine existierende Objektklasse.
	[hidden, helpstring("Liefert neu erzeugte GeoClass, existierende GeoClass wird gelöscht."), hidden, helpcontext(GEOCLASSMODE_enum)]
		GEOCLASSMODE_Replace = 1,
	[helpstring("Erzeugt neue Objektklasse (GeoClass)."), helpcontext(GEOCLASSMODE_enum)]
		GEOCLASSMODE_Add = 2,		// @emem Die Methoden <om DDocument.GetClass> bzw. <om DView.GetClass>
			// erzeugt eine neue Objektklasse.
	[helpstring("Löscht eine Objektklasse (GeoClass)."), helpcontext(GEOCLASSMODE_enum)]
		GEOCLASSMODE_Remove = 3,	// @emem Die Methoden <om DDocument.GetClass> bzw. <om DView.GetClass>
			// löscht eine existierende Objektklasse.
};
cpp_quote("#endif // !defined(_GEOCLASSMODE_DEFINED)")

cpp_quote("#if !defined(_GEOOBJECTMODE_DEFINED)")
cpp_quote("#define _GEOOBJECTMODE_DEFINED")
// @doc GEOOBJECTMODEENUMS
// @enum GEOOBJECTMODE | Der Mode, der die konkrete Funktionalität der Methoden <om DDocument.GetObject>, 
// <om DView.GetObject> bzw. <om DGeoClass.GetObject> festlegt.
// @xref <i DDocument>, <om DDocument.GetObject>, <om DView.GetObject>, <om DGeoClass.GetObject>
enum _tagGEOOBJECTMODE {
	[helpstring("Liefert ein existierendes GeoObject."), helpcontext(GEOOBJECTMODE_enum)]
		GEOOBJECTMODE_Get = 0,		// default
	[hidden, helpstring("Liefert ein neu erzeugtes GeoObject, ein evtl. existierendes GeoObject wird gelöscht."), hidden, helpcontext(GEOOBJECTMODE_enum)]
		GEOOBJECTMODE_Replace = 1,
	[helpstring("Erzeugt neues GeoObject."), helpcontext(GEOOBJECTMODE_enum)]
		GEOOBJECTMODE_Add = 2,
	[helpstring("Löscht ein GeoObject."), helpcontext(GEOOBJECTMODE_enum)]
		GEOOBJECTMODE_Remove = 3,
};
cpp_quote("#endif // !defined(_GEOOBJECTMODE_DEFINED)")

enum _tagGEOOBJWINMODE {
	[helpstring("Liefert existierendes Objekt-Recherchefenster."), helpcontext(GEOOBJWINMODE_enum)]
		GEOOBJWINMODE_Get = 0,		// default
	[hidden, helpcontext(GEOOBJWINMODE_enum)]
		GEOOBJWINMODE_Replace = 1,	// not used
	[helpstring("Erzeugt neues Objekt-Recherchefenster."), helpcontext(GEOOBJWINMODE_enum)]
		GEOOBJWINMODE_Add = 2,
	[helpstring("Löscht ein Objekt-Recherchefenster."), helpcontext(GEOOBJWINMODE_enum)]
		GEOOBJWINMODE_Remove = 3,
};

enum _tagFEATUREMODE {
	[helpstring("Liefert existierende Eigenschaft."), helpcontext(FEATUREMODE_enum)]
		FEATUREMODE_Get = 0,		// default
	[hidden, helpstring("Liefert neu erzeugte Eigenschaft, existierende Feature wird gelöscht."), hidden, helpcontext(FEATUREMODE_enum)]
		FEATUREMODE_Replace = 1,
	[helpstring("Erzeugt eine Eigenschaft neu."), helpcontext(FEATUREMODE_enum)]
		FEATUREMODE_Add = 2,
	[helpstring("Löscht eine Eigenschaft."), helpcontext(FEATUREMODE_enum)]
		FEATUREMODE_Remove = 3,
	[hidden]
		FEATUREMODE_GetDoNotReadValue = 0x10000,
};

enum _tagCREATEOBJECTWIN {
	[helpstring("ObjektNummer nicht anzeigen."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_HideObjNr = 0x0001,
	[helpstring("Identifikator nicht anzeigen."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_HideIdent = 0x0002,
	[helpstring("Objekttyp nicht anzeigen."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_HideObjTyp = 0x0004,
	[helpstring("Text nicht anzeigen."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_HideText = 0x0008,
	[helpstring("Sortieren nach Objektnummer."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_SortObjNr = 0x0010,
	[helpstring("Sortieren nach Identifikator."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_SortIdent = 0x0020,
	[helpstring("Sortieren nach Objekttyp."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_SortObjTyp = 0x0040,
	[helpstring("Sortieren nach angezeigtem Text."), helpcontext(CREATEOBJECTWIN_enum)]
		CREATEOBJECTWIN_SortText = 0x0080,
};

// @doc HEADERFLAGENUMS
// @enum HEADERFLAG | Die Speicherform, wie ein bestimmter Headereintrag abgelegt ist
// @xref <i DDocument>, <om DDocument.GetHeaderEntryEx2>, <om DDocument.SetHeaderEntryEx2>
enum _tagHEADERFLAG {
	[helpstring("Normaler Headereintrag."), helpcontext(HEADERFLAG_enum)]
		HEADERFLAG_Normal = 0x0000,		// @emem Normaler Headereintrag
	[helpstring("Systeminterner Headereintrag."), helpcontext(HEADERFLAG_enum)]
		HEADERFLAG_System = 0x0001,		// @emem Systeminterner Headereintrag
	[helpstring("Schreibgeschützter Headereintrag."), helpcontext(HEADERFLAG_enum)]
		HEADERFLAG_ReadOnly = 0x0002,	// @emem Schreibgeschützter Headereintrag
	[helpstring("Dynamischer Headereintrag (COM Objekt)."), helpcontext(HEADERFLAG_enum)]
		HEADERFLAG_Dynamic = 0x0004,	// @emem Dynamischer Headereintrag (COM Objekt)
	[helpstring("Nicht sichtbarer Headereintrag (use with care)."), helpcontext(HEADERFLAG_enum)]
		HEADERFLAG_Hidden = 0x0010,		// @emem Nicht sichtbarer Headereintrag (use with care)
};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DDocument | Über das Interface <i DDocument> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung eine <tr> Projektes verfügbar.
// @comm Ein Projekt ist die Zusammenfassung aller Objekte, Objektklassen und Ansichten
// aller derzeit in einer <tr> Sitzung referenzierter Datenquellen.
// @base public | DTRiASBaseClass
// @supby <o GeoDocument>
// @xref <o GeoDocument>
// @group Eigenschaften von <i DDocument> 
// @index | DDOCUMENT & PROPERTY
// @group Methoden von <i DDocument> 
// @index | DDOCUMENT & METHOD
// @doc DDOCUMENT
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3C8-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Ein TRiAS® Dokument."),
	helpcontext(DDocument_int)
]  
interface DDocument : DTRiASBaseClass 
{
	// @doc DDOCUMENT | PROPERTY
	// @property HRESULT | DDocument | Properties | Die Eigenschaft <op .Properties>
	// ...
	// @comm Die Eigenschaft <op .Properties> ist zur Zeit nicht implementiert.
	// @xref <i DDocument>
	[id(9), propget] HRESULT Properties ([out, retval]DTRiASProperties **Props);

	// @doc DDOCUMENT | METHOD
	// @method HRESULT | DDocument | CreateProperty | Die Methode <om .CreateProperty>
	// ...
	// @parm VARIANT | PropName | Der Parameter <p PropName> ...
	// @parm VARIANT | PropType | Der Parameter <p PropType> ...
	// @parm VARIANT | Value | Der Parameter <p Value> ...
	// @comm Die Methode <om .CreateProperty> ist zur Zeit nicht implementiert.
	// @xref <i DDocument>
	[id(10)] HRESULT CreateProperty ([in, optional]VARIANT PropName, [in, optional]VARIANT PropType, 
		[in, optional]VARIANT Value, [out, retval]DTRiASProperty **Prop);
		
	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Value | Die Eigenschaft <op .Value>
	// liefert den Namen des Projektes (HeaderEntry("Caption") oder FullPath)
	// @comm Die Eigenschaft <op .Value> kann nicht gesetzt werden.
	// @xref <i DDocument>
	[id(DISPID_VALUE), propget, helpcontext(DDocument_Value_prop)]
		HRESULT Value ([out, retval]BSTR *Value);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Name | Die Eigenschaft <op .Name>
	// liefert den Namen des Projektes (HeaderEntry("Caption") oder FullPath)
	// @comm Die Eigenschaft <op .Name> kann nicht gesetzt werden.
	// @xref <i DDocument>
	[id(3), propget, helpcontext(DDocument_Name_prop)]
		HRESULT Name ([out, retval]BSTR *Value);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Path | Die Eigenschaft <op .Path>
	// liefert das Verzeichnis der Projektdatei (readonly).
	// @comm Die Eigenschaft <op .Path> kann nicht gesetzt werden.
	// @xref <i DDocument>
	[id(101), propget, helpcontext(DDocument_Path_prop)] 
		HRESULT Path ([out, retval]BSTR *Path);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | FullName | Die Eigenschaft <op .FullName>
	// liefert den vollen Dateinamen (Pfad + Dateiname) der Projektdatei.
	// @comm Die Eigenschaft <op .FullName> kann nicht gesetzt werden.
	// @xref <i DDocument>
	[id(102), propget, helpcontext(DDocument_FullName_prop)] 
		HRESULT FullName ([out, retval]BSTR *Value);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | ActiveViewName | Die Eigenschaft <op .ActiveViewName>
	// liefert bzw. setzt die aktive Ansicht.
	// @comm Die aktive Ansicht wird über ihren Namen referenziert und ist die Ansicht, die derzeit
	// angezeigt wird. Nach dem Setzen der aktiven Ansicht muß diese explizit neu gezeichnet werden,
	// bevor die Anzeige aktualisiert wird. Das kann z.B. mit der Methode <om .RePaint> erzwungen werden.
	// @xref <i DDocument>, <om .RePaint>
	[id(310), propget, helpstring("Liefert aktive Ansicht"), helpcontext(DDocument_ActiveViewName_prop)]
		HRESULT ActiveViewName ([out, retval]BSTR *ViewName);	// aktive Ansicht
	[id(310), propput, helpstring("Setzt aktive Ansicht"), helpcontext(DDocument_ActiveViewName_prop)]
		HRESULT ActiveViewName ([in]BSTR ViewName);

	// @doc DDOCUMENT | PROPERTY
	// @property long | DDocument | ObjectCount | Die Eigenschaft <op .ObjectCount>
	// lifert die Anzahl der Objekte (vom Typ <o GeoObject>) in diesem Projekt (readonly).
	// @comm Die Eigenschaft <op .ObjectCount> kann nicht gesetzt werden.
	// @xref <i DDocument>
	[id(112), propget, helpstring("Anzahl der Objekte in diesem Dokument."), helpcontext(DDocument_ObjectCount_prop)]
		HRESULT ObjectCount ([out, retval]long *Objs); 

	// @doc DDOCUMENT | PROPERTY
	// @property long | DDocument | ViewCount | Die Eigenschaft <op .ViewCount>
	// liefert die Anzahl der Ansichten (vom Typ <o GeoView>) in diesem Projekt (readonly).
	// @comm Die Eigenschaft <op .ViewCount> kann nicht gesetzt werden.
	// @xref <i DDocument>
	[id(113), propget, helpstring("Anzahl der Ansichten in diesem Dokument."), helpcontext(DDocument_ViewCount_prop)]
		HRESULT ViewCount ([out, retval]long *Views); 

	// @doc DDOCUMENT | PROPERTY
	// @property long | DDocument | ClassCount | Die Eigenschaft <op .ClassCount>
	// liefert die Anzahl der Objektklassen (vom Typ <o GeoClass>) in diesem Projekt (readonly).
	// @comm Die Eigenschaft <op .ClassCount> kann nicht gesetzt werden.
	// @xref <i DDocument>
	[id(114), propget, helpstring("Anzahl der Objektklassen in diesem Dokument."), helpcontext(DDocument_ClassCount_prop)]
		HRESULT ClassCount ([out, retval]long *Classes); 

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Author | Die Eigenschaft <op .Author>
	// Setzt bzw. liefert den Author des Projektes.
	// @comm Die Eigenschaft <op .Author> ist zur Zeit noch nicht implementiert.
	// @xref <i DDocument>
	[id(311), propget, helpstring("Author des Dokumentes."), helpcontext(DDocument_Author_prop)]
		HRESULT Author ([out, retval]BSTR *Value);
	[id(311), propput, helpstring("Author des Dokumentes."), helpcontext(DDocument_Author_prop)]
		HRESULT Author ([in]BSTR Value);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Comments | Die Eigenschaft <op .Comments>
	// Setzt bzw. liefert zusätzlich gespeicherte Kommentare zu diesem Projekt.
	// @comm Die Eigenschaft <op .Comments> ist zur Zeit noch nicht implementiert.
	// @xref <i DDocument>
	[id(312), propget, helpstring("Kommentare zu diesem Dokument."), helpcontext(DDocument_Comments_prop)]
		HRESULT Comments ([out, retval]BSTR *Value);
	[id(312), propput, helpstring("Kommentare zu diesem Dokument verändern."), helpcontext(DDocument_Comments_prop)]
		HRESULT Comments ([in]BSTR Value);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Keywords | Die Eigenschaft <op .Keywords>
	// Setzt bzw. liefert gespeicherte Stichworte zu diesem Projekt.
	// @comm Die Eigenschaft <op .Keywords> ist zur Zeit noch nicht implementiert.
	// @xref <i DDocument>
	[id(313), propget, helpstring("Stichworte zu diesem Dokument."), helpcontext(DDocument_Keywords_prop)]
		HRESULT Keywords ([out, retval]BSTR *Value);
	[id(313), propput, helpstring("Stichworte zu diesem Dokument verändern."), helpcontext(DDocument_Keywords_prop)]
		HRESULT Keywords ([in]BSTR Value);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Subject | Die Eigenschaft <op .Subject>
	// setzt bzw. liefert das gespeicherte Subject zu diesem Projekt.
	// @comm Die Eigenschaft <op .Subject> ist zur Zeit noch nicht implementiert.
	// @xref <i DDocument>
	[id(314), propget, helpstring("Subject zu diesem Dokument."), helpcontext(DDocument_Subject_prop)]
		HRESULT Subject ([out, retval]BSTR *Value);
	[id(314), propput, helpstring("Subject zu diesem Dokument verändern."), helpcontext(DDocument_Subject_prop)]
		HRESULT Subject ([in]BSTR Value);

	// @doc DDOCUMENT | PROPERTY
	// @property BSTR | DDocument | Title | Die Eigenschaft <op .Title>
	// setzt bzw. liefert den gespeicherten Titel dieses Projektes.
	// @comm Die Eigenschaft <op .Title> ist zur Zeit noch nicht implementiert.
	// @xref <i DDocument>
	[id(315), propget, helpstring("Titel dieses Dokumentes."), helpcontext(DDocument_Title_prop)]
		HRESULT Title ([out, retval]BSTR *Value);
	[id(315), propput, helpstring("Titel dieses Dokumentes verändern."), helpcontext(DDocument_Title_prop)]
		HRESULT Title ([in]BSTR Value);

	// @doc DDOCUMENT | PROPERTY
	// @property VARIANT_BOOL | DDocument | Saved | Die Eigenschaft <op .Saved>
	// liefert den Speicherstatus des Projektes (readonly).
	// @comm Die Eigenschaft <op .Saved> kann nicht geschrieben werden.
	// @xref <i DDocument>
	[id(316), propget, helpstring("Speicherstatus des Dokumentes."), helpcontext(DDocument_Saved_prop)]
		HRESULT Saved ([out, retval]VARIANT_BOOL *IsSaved);

	// @doc DDOCUMENT | PROPERTY
	// @property VARIANT_BOOL | DDocument | ReadOnly | Die Eigenschaft <op .ReadOnly>
	// liefert den Schreibschutz des Dokumentes (readonly).
	// @comm Die Eigenschaft <op .ReadOnly> kann nicht geschrieben werden.
	// @xref <i DDocument>
	[id(317), propget, helpstring("Schreibschutz des Dokumentes."), helpcontext(DDocument_ReadOnly_prop)]
		HRESULT ReadOnly ([out, retval]VARIANT_BOOL *IsReadOnly);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | CloseIt | Die Methode <om .CloseIt>
	// schließt das aktuell geöffnete Projekt.
	// @parm VARIANT | SaveIt | Der (optionale) Parameter <p SaveIt> legt fest, ob das Dokument
	// vor dem Schließen bei Bedarf (die Eigenschaft <op .Saved> liefert den Wert VARIANT_FALSE)
	// gespeicherrt werden soll. Wenn dieser Parameter nicht gegeben ist, dann wird 
	// das Projekt bei Bedarf gespeichert.
	// @parm VARIANT | FileName | Der (optionale) Parameter <p FileName> gibt den Dateinamen
	// vor, unter dem das aktuelle Projekt bei Bedarf gespeichert werden soll.
	// Wenn dieser Parameter nicht gegeben ist, dann wird das aktuelle Projekt unter seinem 
	// bisherigen Namen gespeichert. Ist dem aktuellen Projekt noch kein Name zugewiesen worden 
	// und der Parameter <p FileName> nicht gegeben, dann wird ein Dialog angezeigt, in dem 
	// der Nutzer aufgefordert wird, einen Dateinamen vorzugeben unter dem das aktuelle Projekt 
	// gespeichert werden soll.
	// @xref <i DDocument>, <op .Saved>. 
	[id(300), helpstring("Dokument schließen."), helpcontext(DDocument_CloseIt_meth)]
		HRESULT CloseIt ([in, optional]VARIANT SaveIt, [in, optional]VARIANT FileName);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | Save | Die Methode <om .Save>
	// speichert das aktuelle Dokument bei Bedarf unter seinem aktuellen Namen (die Eigenschaft 
	// <op .Saved> liefert den Wert VARIANT_FALSE). Ist dem aktuellen Projekt noch kein Name 
	// zugewiesen worden, dann wird ein Dialog angezeigt, in dem der Nutzer aufgefordert wird, 
	// einen Dateinamen vorzugeben unter dem das aktuelle Projekt gespeichert werden soll.
	// @xref <i DDocument>, <op .Saved>
	[id(301), helpstring("Dokument speichern."), helpcontext(DDocument_Save_meth)]
		HRESULT Save (void);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | SaveAs | Die Methode <om .SaveAs>
	// speichert das aktuelle Projekt unter einem neuen Namen.
	// @parm BSTR | FileName | Der Parameter <p FileName> muß den Dateinamen enthalten, unter
	// dem das aktuelle Projekt gespeichert werden soll.
	// @comm Die Methode <om .SaveAs> ist zur Zeit noch nicht implementiert.
	// @xref <i DDocument>
	[id(302), helpstring("Dokument speichern unter."), helpcontext(DDocument_SaveAs_meth)]
		HRESULT SaveAs ([in]BSTR FileName);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | RevertToSaved | Die Methode <om .RevertToSaved>
	// verwirft sämtliche Änderungen am Projekt seit dem letzten Speichern.
	// @xref <i DDocument>
	[id(318), helpstring("Änderungen am Dokument verwerfen."), helpcontext(DDocument_RevertToSaved_meth)]
		HRESULT RevertToSaved (void);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoViews> * | DDocument | GetViews | Die Methode <om .GetViews>
	// liefert eine Datenobjektsammlung (vom Typ <o GeoViews>), die sämtliche Ansichten dieses 
	// Projektes enthält.
	// @comm Die gelieferte Datenobjektsammlung enthält nicht nur sämtliche Ansichten des 
	// aktuellen Projektes, sondern jede Ansicht des Projektes ist gleichfalls automatisch in dieser 
	// Datenobjektsammlung enthalten. Wird so z.B. eine Ansicht aus dieser Sammlung entfernt 
	// (mit der Methode <om DViews.Remove>), so wird diese automatisch gelöscht, wird eine 
	// Ansicht hinzugefügt (mit der Methode <om DViews.Add>), dann wird diese Ansicht erzeugt.
	// @xref <i DDocument>, <o GeoViews>, <om DViews.Add>, <om DViews.Remove>
	// @xref <l Typen von Datenobjektsammlungen>
	[id(1000), helpstring("Ansichten dieses Projektes"), helpcontext(DDocument_GetViews_meth)]
		HRESULT GetViews ([out, retval]DViews **Views);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoView> * | DDocument | GetView | Die Methode <om .GetView>
	// liefert eine konkrete Ansicht (vom Typ <o GeoView>) dieses Projektes.
	// @parm BSTR | ViewName | Der Parameter <p ViewName> gibt den Namen der Ansicht vor, die
	// geliefert werden soll.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> gibt vor, welche konkrete Funktion
	// durch die Methode <om .GetView> ausgeführt werden soll. Der Parameter muß Werte vom Typ <t VIEWMODE>
	// enthalten, ansonsten tritt ein Fehler auf. Ist der Parameter <p Mode> nicht gegeben, dann wird
	// der Wert <e VIEWMODE.VIEWMODE_Get> verwendet.
	// @comm Die Methode <om .GetView> kann über den Parameter <p Mode> unterschiedliche Funktionen 
	// ausführen:
	// <nl><e VIEWMODE.VIEWMODE_Get>: Es wird eine existierende Ansicht geliefert. Wenn die durch den 
	// Parameter <p ViewName> referenzierte Ansicht im aktuellen Projekt nicht existiert, dann liefert
	// die Methode <om .GetView> den Wert <cv Nothing>.
	// <nl><e VIEWMODE.VIEWMODE_Add>: Es wird eine neue Ansicht erzeugt. Wenn die durch den Parameter 
	// <p ViewName> referenzierte Ansicht bereits existiert, dann hat die Methode <om .GetView>
	// keine Funktion und liefert den Wert <cv Nothing>.
	// <nl><e VIEWMODE.VIEWMODE_Remove>: Es wird eine existierende Ansicht gelöscht. Wenn die durch den
	// Parameter <p ViewName> nicht existiert, dann hat die Methode <om .GetView> keine Funktion. 
	// Die Methode <om .GetView> liefert für diesen Parameterwert immer <cv Nothing>.
	// @xref <i DDocument>, <t VIEWMODE>
	[id(1100), helpstring("Aktuelle Ansicht dieses Projektes"), helpcontext(DDocument_GetView_meth)]
		HRESULT GetView ([in]BSTR ViewName, [in, optional]VARIANT Mode, [out, retval]DView **View);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoClasses> * | DDocument | GetClasses | Die Methode <om .GetClasses>
	// eine Datenobjektsammlung (vom Typ <o GeoClasses>), die sämtliche Objektklassen dieses 
	// Projektes enthält.
	// @parm VARIANT | Classes | Der (optionale) Parameter <p Classes> wird zur Zeit nicht verwendet
	// und sollte nicht angegeben werden.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> wird zur Zeit nicht verwendet
	// und sollte nicht angegeben werden.
	// @comm Die gelieferte Datenobjektsammlung enthält nicht nur sämtliche Objektklassen des 
	// aktuellen Projektes, sondern jede Objektklasse des Projektes ist gleichfalls automatisch in dieser 
	// Datenobjektsammlung enthalten. Wird so z.B. eine Objektklasse aus dieser Sammlung entfernt 
	// (mit der Methode <om DGeoClasses.Remove>), so wird diese automatisch gelöscht, wird eine 
	// Objektklasse hinzugefügt (mit der Methode <om DGeoClasses.Add>), dann wird diese Objektklasse erzeugt.
	// @xref <i DDocument>, <o GeoClasses>, <om DGeoClasses.Add>, <om DGeoClasses.Remove>
	// @xref <l Typen von Datenobjektsammlungen>
	[id(400), helpstring("Liste aller Objektklassen dieses Projektes"), helpcontext(DDocument_GetClasses_meth)]
		HRESULT GetClasses ([in, optional]VARIANT Classes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoClasses **Clss);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoClass> * | DDocument | GetClass | Die Methode <om .GetClass>
	// liefert eine Objektklasse dieses Projektes.
	// @parm VARIANT | Class | Der Parameter <p Class> gibt den Namen oder den Objektklassenschlüssel
	// der Objektklasse vor, die geliefert werden soll.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> gibt vor, welche konkrete Funktion
	// durch die Methode <om .GetClass> ausgeführt werden soll. Der Parameter muß Werte vom Typ <t GEOCLASSMODE>
	// enthalten, ansonsten tritt ein Fehler auf. Ist der Parameter <p Mode> nicht gegeben, dann wird
	// der Wert <e GEOCLASSMODE.GEOCLASSMODE_Get> verwendet.
	// @comm Die Methode <om .GetClass> kann über den Parameter <p Mode> unterschiedliche Funktionen 
	// ausführen:
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Get>: Es wird eine existierende Objektklasse geliefert. Wenn die durch den 
	// Parameter <p Class> referenzierte Objektklasse im aktuellen Projekt nicht existiert, dann liefert
	// die Methode <om .GetClass> den Wert <cv Nothing>.
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Add>: Es wird eine neue Objektklasse erzeugt. Wenn die durch den Parameter 
	// <p Class> referenzierte Objektklasse bereits existiert, dann hat die Methode <om .GetClass>
	// keine Funktion und liefert den Wert <cv Nothing>.
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Remove>: Es wird eine existierende Objektklasse gelöscht. Wenn die 
	// durch den Parameter <p Class> referenzierte Objektklasse nicht existiert, dann hat die Methode 
	// <om .GetClass> keine Funktion. Die Methode <om .GetClass> liefert für diesen Parameterwert immer
	// <cv Nothing>.
	// @comm <b ACHTUNG:> Die Verwendung dieser Funktion ist nicht mehr zu empfehlen, da unter Umständen keine eindeutige
	// Zuordnung der Objektklassen zu einer im aktuellen Projekt eingebundenen datenquelle existiert. Um die
	// konkret zu verwendende Datenquelle vorzugeben sollte die Methode <om .GetClassEx> (für <p Mode> = 
	// <e GEOCLASSMODE.GEOCLASSMOCE_Get>) bzw. die Methode <om .AddClass> ((für <p Mode> = 
	// <e GEOCLASSMODE.GEOCLASSMOCE_Add>) verwendet werden. Diese Methode ist an dieser Stelle lediglich der 
	// Vollständigkeit halber dokumentiert und existiert aus Kompatibilitätsgründen mit der 
	// OLE- Automationsschnittstelle mit TRiAS V2.00.
	// @xref <i DDocument>, <t GEOCLASSMODE>, <om .GetClassEx>, <om .AddClass>
	[id(500), helpstring("Eine Objektklasse dieses Projektes"), helpcontext(DDocument_GetClass_meth)]
		HRESULT GetClass ([in]VARIANT Class, [in, optional]VARIANT Mode, 
			[out, retval]DGeoClass **Cls);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoObjects> * | DDocument | GetObjects | Die Methode <om .GetObjects>
	// liefert eine Datenobjektsammlung (vom Typ <o GeoObjects>) die sämtliche Objekte dieses Projektes 
	// enthält.
	// @parm VARIANT | ObjTypes | Der (optionale) Parameter <p ObjTypes> gibt die Objekttypen vor, für die
	// die entsprechenden Objekte geliefert werden sollen.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> wird zur Zeit nicht verwendet.
	// @xref <i DDocument>
	[id(600), helpstring("Liste von Objekten dieses Projektes"), helpcontext(DDocument_GetObjects_meth)]
		HRESULT GetObjects ([in, optional]VARIANT ObjTypes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjects **Objs);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoObject> * | DDocument | GetObject | Die Methode <om .GetObject>
	// Objekt dieses Projektes
	// @parm VARIANT | GeoObj | Der Parameter <p GeoObj> gibt den Namen oder das eindeutige 
	// Objektkennzeichen (nur <tr> Datenquellen) für das zu liefernde Objekt vor.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> gibt vor, welche konkrete Funktion
	// durch die Methode <om .GetObject> ausgeführt werden soll. Der Parameter muß Werte vom Typ <t GEOOBJECTMODE>
	// enthalten, ansonsten tritt ein Fehler auf. Ist der Parameter <p Mode> nicht gegeben, dann wird
	// der Wert <e GEOOBJECTMODE.GEOOBJECTMODE_Get> verwendet.
	// @comm Die Methode <om .GetObject> kann über den Parameter <p Mode> unterschiedliche Funktionen 
	// ausführen:
	// <nl><e GEOOBJECTMODE.GEOOBJECTMODE_Get>: Es wird ein existierendes Objekt geliefert. Wenn das durch den 
	// Parameter <p GeoObj> referenzierte Objekt im aktuellen Projekt nicht existiert, dann liefert
	// die Methode <om .GetObject> den Wert <cv Nothing>.
	// <nl><e GEOOBJECTMODE.GEOOBJECTMODE_Add>: Es wird ein neues Objekt erzeugt. Wenn das durch den Parameter 
	// <p GeoObj> referenzierte Objekt bereits existiert, dann hat die Methode <om .GetObject>
	// keine Funktion und liefert den Wert <cv Nothing>.
	// <nl><e GEOOBJECTMODE.GEOOBJECTMODE_Remove>: Es wird ein existierendes Objekt gelöscht. Wenn das 
	// durch den Parameter <p GeoObj> referenzierte Objekt nicht existiert, dann hat die Methode 
	// <om .GetObject> keine Funktion. Die Methode <om .GetObject> liefert für diesen Parameterwert immer
	// <cv Nothing>.
	// @comm Die gelieferte Datenobjektsammlung enthält nicht nur sämtliche Objekte des vorgegebenen
	// Objekttypes des aktuellen Projektes, sondern jedes Objekt dieses Objekttypes des Projektes ist 
	// gleichfalls automatisch in dieser Datenobjektsammlung enthalten. Wird so z.B. eine Objekt
	// aus dieser Sammlung entfernt (mit der Methode <om DGeoObjects.Remove>), so wird diese automatisch 
	// gelöscht, wird ein Objekt hinzugefügt (mit der Methode <om DGeoObjects.Add>), dann wird dieses
	// Objekt erzeugt.
	// @xref <i DDocument>, <o GeoObjects>, <om DGeoObjects.Add>, <om DGeoObjects.Remove>
	[id(700), helpstring("Objekt dieses Projektes"), helpcontext(DDocument_GetObject_meth)]
		HRESULT GetObject ([in]VARIANT GeoObj, [in, optional] VARIANT Mode, 
			[out, retval]DGeoObject **Obj);

	// @doc DDOCUMENT | METHOD
	// @method BSTR | DDocument | GetHeaderEntry | Die Methode <om .GetHeaderEntry>
	// liefert einen Headereintrag dieses Projektes.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu liefernden
	// Headereintrages vor.
	// @comm Jedes Projekt verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Schreiben von Schlüssel/Werte- Paaren in diesem Speicherbereich erfolgt 
	// durch die Methode <om .SetHeaderEntry>.
	// @comm Jede Datenquelle besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntryEx> bzw. 
	// <om .SetHeaderEntryEx>
	// @xref <i DDocument>, <om .SetHeaderEntry>, <om .GetHeaderEntryEx>, <om .SetHeaderEntryEx>
	[id(303), helpstring("Headereintrag dieses Projektes lesen"), helpcontext(DDocument_GetHeaderEntry_meth)]
		HRESULT GetHeaderEntry ([in]BSTR HeaderKey, [out, retval]BSTR *HeaderText);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | SetHeaderEntry | Die Methode <om .SetHeaderEntry>
	// schreibt bzw. erzeugt einen Headereintrag dieses Projektes.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu liefernden
	// Headereintrages vor.
	// @parm VARIANT | HeaderText | Der (optionale) Parameter <p HeaderText> gibt die unter dem im Parameter
	// <p HeaderKey> gegebenen zu speichernde Zeichenkette vor. Wenn dieser parameter nicht gegeben ist, 
	// dann wird der durch den Parameter <p HeaderKey> referenzierte Headereintrag gelöscht.
	// @comm Jedes Projekt verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Lesen von Schlüssel/Werte- Paaren aus diesem Speicherbereich erfolgt 
	// durch die Methode <om .GetHeaderEntry>.
	// @comm Jede Datenquelle besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntryEx> bzw. 
	// <om .SetHeaderEntryEx>
	// @xref <i DDocument>, <om .GetHeaderEntry>, <om .GetHeaderEntryEx>, <om .SetHeaderEntryEx>
	[id(304), helpstring("Headereintrag dieses Projektes schreiben"), helpcontext(DDocument_SetHeaderEntry_meth)]
		HRESULT SetHeaderEntry ([in]BSTR HeaderKey, [in, optional]VARIANT HeaderText);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | RePaint | Die Methode <om .RePaint> erzwingt, das die 
	// aktuelle Ansicht (bzw. ein Auschnitt der aktuellen Ansicht) neu gezeichnet wird.
	// @parm VARIANT | Left | Der (optionale) Parameter <p Left> gibt die linke Fensterkoordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @parm VARIANT | Bottom | Der (optionale) Parameter <p Bottom> gibt die untere Fensterkoordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @parm VARIANT | Right | Der (optionale) Parameter <p Right> gibt die rechte Fensterkoordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @parm VARIANT | Top | Der (optionale) Parameter <p Top> gibt die obere Fensterkoordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @comm Die Parameter <p Left>, <p Bottom>, <p Right> und <p Top> sind in sofern als optional
	// zu betrachten, als das diese entweder alle vorgegeben sein sollten (der Ausschnitt wird neu gezeichnet)
	// oder aber sämtlich nicht gegeben sind (die gesamte aktuelle Ansicht wird neu gezeichnet). Fehlen
	// lediglich ein bis drei dieser Parameter, dann wird die gesamte Ansicht neu gezeichnet.
	// @xref <i DDocument>
	[id(305), helpstring("Aktuelle Ansicht (Auschnitt) neu zeichnen."), helpcontext(DDocument_RePaint_meth)]
		HRESULT RePaint ([in, optional]VARIANT Left, [in, optional]VARIANT Bottom, 
						 [in, optional]VARIANT Right, [in, optional]VARIANT Top);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | ReBuild | Die Methode <om .ReBuild> erzwingt, das die
	// aktuelle Ansicht neu generiert wird. 
	// @parm VARIANT | FullRebuild | Der (optionale) Parameter <p FullRebuild> hat keine Bedeutung mehr
	// und ist lediglich aus Kompatibilitätsgründen zu TRiAS V2.00 erhalten.
	// @comm Das neu generieren der Ansicht bewirkt, daß sämtliche Informationen (Objektklassen, Geometrie, 
	// Darstellungsparemeter etc.) aus den jeweiligen Datenquellen neu eingelesen werden. Ihre Verwendung
	// ist z.B. dann sinnvoll, wenn die Daten nach einer Änderung des Darstellungs-Koordinatensystems
	// neu angezeigt werden sollen.
	// @xref <i DDocument>
	[id(306), helpstring("Aktuelle Ansicht neu generieren."), helpcontext(DDocument_ReBuild_meth)]
		HRESULT ReBuild ([in, optional]VARIANT FullRebuild);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoObjectWins> * | DDocument | GetGeoObjectWins | Die Methode <om .GetGeoObjectWins>
	// Liefert die Sammlung von Objekt-Recherchefenster dieses Projektes 
	// @parm VARIANT | ObjWins | Der (optionale) Parameter <p ObjWins> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DDocument>
	[id(307), helpstring("Liefert die Sammlung von Objekt-Recherchefenster dieses Projektes "), helpcontext(DDocument_GetGeoObjectWins_meth)]
		HRESULT GetGeoObjectWins ([in, optional]VARIANT ObjWins, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjectWins **Wins);

	// @doc DDOCUMENT | METHOD
	// @method <o DGeoObjectWin> * | DDocument | GetGeoObjectWin | Die Methode <om .GetGeoObjectWin>
	// Liefert ein Objekt-Recherchefenster.
	// @parm VARIANT | Window | Der Parameter <p Window> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DDocument>
	[id(308), helpstring("Liefert ein Objekt-Recherchefenster."), helpcontext(DDocument_GetGeoObjectWin_meth)]
		HRESULT GetGeoObjectWin ([in]VARIANT Window, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjectWin **Win);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoObjects> * | DDocument | CreateGeoObjectsCollection | Die Methode <om .CreateGeoObjectsCollection>
	// erzeugt eine neue Sammlung von <o GeoObject>- Objekten, die als allgemeiner Container für
	// beliebige Objekte dienen kann. 
	// @comm Die erzeugte Datenobjektsammlung belegt die Methoden <om DTRiASCollection.Add> bzw. 
	// <om DTRiASCollection.Remove> mit <b keinem> zusätzlichen Kontext. D.h. diese Routinen fügen 
	// ein Objekt (<o GeoObject>) lediglich zur Sammlung hinzu bzw. entfernen das Objekt.
	// @xref <i DDocument>, <om DTRiASCollection.Add>, <om DTRiASCollection.Remove>
	// @xref <l Typen von Datenobjektsammlungen>
	[
		id(309), 
		helpstring("Generiert leere GeoObjects-Collection."),
		helpcontext(DDocument_CreateGeoObjectsCollection_meth)
	]
	HRESULT CreateGeoObjectsCollection ([out, retval]DGeoObjects **Objs);

	// @doc DDOCUMENT | PROPERTY
	// @property long | DDocument | RefScale | Die Eigenschaft <op .RefScale>
	// liefert Bezugsmaßstab der aktuellen Ansicht.
	// @comm Als Bezugsmaßstab der aktuellen Ansicht wird der Maßstab bezeichnet, auf den sich
	// sämtliche Größenangaben innerhalb der Darstellungsparameter (also Text- und Punktgrößen, 
	// Linienstärken etc.) beziehen.
	// @comm Wenn für die aktuelle Ansicht ein Bezugsmaßstab definiert ist, dann werden sämtliche
	// Darstellungsparameter in Bezug auf den aktuellen Darstellungsmaßstab berechnet und bei der 
	// Anzeige verwendet.
	// @comm Der Bezugsmaßstab kann durch vorgeben des Wertes '0' (Null) rückgesetzt werden.
	// @xref <i DDocument>, <om DView.RefScale>
	[
		id(319), 
		propget,
		helpstring("Liefert Bezugsmaßstab der aktuelle Ansicht."),
		helpcontext(DDocument_RefScale_prop)
	]
	HRESULT RefScale ([out, retval]long *RefScale);
	[
		id(319), 
		propput,
		helpstring("Setzt Bezugsmaßstab der aktuelle Ansicht."),
		helpcontext(DDocument_RefScale_prop)
	]
	HRESULT RefScale ([in]long RefScale);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | GetViewRect | Die Methode <om .GetViewRect>
	// liefert den aktuell dargestellten Bildausschnitt der aktuellen Ansicht.
	// @parm double | X | Der (ByRef) Parameter <p X> liefert den Wert der linken Koordinate
	// des aktuell dargestellten Bildschirmausschnittes.
	// @parm double | Y | Der (ByRef) Parameter <p Y> liefert den Wert der unteren Koordinate
	// des aktuell dargestellten Bildschirmausschnittes.
	// @parm VARIANT | XMax | Der (optionale, ByRef) Parameter <p XMax> liefert den Wert der 
	// rechten Koordinate des aktuell dargestellten Bildschirmausschnittes.
	// @parm VARIANT | YMax | Der (optionale, ByRef) Parameter <p YMax> liefert den Wert der 
	// oberen Koordinate des aktuell dargestellten Bildschirmausschnittes.
	// @comm Die Parameter <p XMax> bzw. <p YMax> sind in sofern optional, als daß entweder beide 
	// gegeben sein sollten oder aber beide nicht geben sind (in diesem Fall enthalten die 
	// Parameter <p X> bzw. <p Y> nach einem erfolgreichen Aufruf der Methode <om .GetViewRect> die
	// Mittelpunktskoordinaten des aktuellen Darstellungsbereiches). Fehlt nur einer der beiden
	// Parameter, so liefert die Methode <om .GetViewRect> die Mittelpunktskoordinaten des aktuellen
	// Darstellungsbereiches.
	// @comm Der aktuelle Darstellungsbereich kann mit der Methode <om .SetViewRect> verändert werden.
	// @comm Die Werte der gelieferten Koordinaten beziehen sich auf das aktuell für das
	// Projekt ausgewählte Koordinatensystem.
	// @xref <i DDocument>, <om .SetViewRect>
	[
		id(320),
		helpstring("Liefert den aktuell dargestellten Bildausschnitt der aktuellen Ansicht."),
		helpcontext(DDocument_GetViewRect_meth)
	]
	HRESULT GetViewRect ([out] double *X, [out] double *Y, 
		[out, optional] VARIANT *XMax, [out, optional] VARIANT *YMax);
	
	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | SetViewRect | Die Methode <om .SetViewRect>
	// setzt  den aktuell dargestellten Bildausschnitt der aktuellen Ansicht.
	// @parm double | X | Der Parameter <p X> enthält den Wert der linken Koordinate
	// des aktuell darzustellenden Bildschirmausschnittes.
	// @parm double | Y | Der Parameter <p Y> enthält den Wert der unteren Koordinate
	// des aktuell darzustellenden Bildschirmausschnittes.
	// @parm VARIANT | XMax | Der (optionale) Parameter <p XMax> enthält den Wert der rechten
	// Koordinate des aktuell darzustellenden Bildschirmausschnittes.
	// @parm VARIANT | YMax | Der (optionale) Parameter <p YMax> enthält den Wert der oberen
	// Koordinate des aktuell darzustellenden Bildschirmausschnittes.
	// @comm Die Parameter <p XMax> bzw. <p YMax> sind in sofern optional, als daß entweder beide 
	// gegeben sein sollten oder aber beide nicht geben sind (in diesem Fall werden die 
	// Parameter <p X> bzw. <p Y> als Mittelpunktskoordinaten des aktuellen Darstellungsbereiches
	// ausgewertet). Fehlt nur einer der beiden Parameter, so verändert die Methode <om .SetViewRect> 
	// lediglich die die Mittelpunktskoordinaten des aktuellen Darstellungsbereiches.
	// @comm Der aktuelle Darstellungsbereich kann mit der Methode <om .GetViewRect> abgefragt werden.
	// @comm Die Werte der übergebenen Koordinaten werden in Bezug auf das aktuell für das
	// Projekt ausgewählte Koordinatensystem ausgewertet.
	// @xref <i DDocument>
	[
		id(321),
		helpstring("Setzt  den aktuell dargestellten Bildausschnitt der aktuellen Ansicht."),
		helpcontext(DDocument_SetViewRect_meth)
	]
	HRESULT SetViewRect ([in] double X, [in] double Y, 
		[in, optional] VARIANT XMax, [in, optional] VARIANT YMax);

	// @doc DDOCUMENT | PROPERTY
	// @property VARIANT_BOOL | DDocument | IsDirty | Die Eigenschaft <op .IsDirty>
	// setzt bzw. liefert, ob das Projekt gespeichert werden muß (ob seit dem letzten Speichern
	// Änderungen vorgenommen wurden).
	// @xref <i DDocument>
	[
		id(322), 
		propget, 
		helpstring("Liefert, ob Dokument gespeichert werden muß."),
		helpcontext(DDocument_IsDirty_prop)
	]
	HRESULT IsDirty ([out, retval]VARIANT_BOOL *Value);
	[
		id(322), 
		propput, 
		helpstring("Setzt, ob Dokument gespeichert werden muß."),
		helpcontext(DDocument_IsDirty_prop)
	]
	HRESULT IsDirty ([in]VARIANT_BOOL Value);

	// @doc DDOCUMENT | PROPERTY
	// @property VARIANT_BOOL | DDocument | PreventRepaint | Die Eigenschaft <op .PreventRepaint>
	// setzt bzw. liefert, ob die aktuelle Ansicht neugezeichnet werden darf.
	// @comm Wenn die Eigenschaft <op .PreventRepaint> auf <cv False> gesetzt worden ist
	// dann wird selbst dann nicht neu gezeichnet, wenn Teile der Ansicht neu gezeichnet werden 
	// müßten, da z.B. ein davorliegendes Fenster verschoben worden ist.
	// @xref <i DDocument>
	[
		id(323), 
		propget, 
		helpstring("Liefert, ob Dokument neugezeichnet wird."),
		helpcontext(DDocument_PreventRepaint_prop)
	]
	HRESULT PreventRepaint ([out, retval]VARIANT_BOOL *Value);
	[
		id(323), 
		propput, 
		helpstring("Setzt, ob Dokument neugezeichnet wird."),
		helpcontext(DDocument_PreventRepaint_prop)
	]
	HRESULT PreventRepaint ([in]VARIANT_BOOL Value);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoObject> * | DDocument | AddObject | Die Methode <om .AddObject>
	// erzeugt ein neues Objekt vom Typ <o GeoObject> und fügt dieses zum Projekt hinzu.
	// @parm VARIANT | GeoObj | Der (optionale) Parameter <p GeoObj> enthält den Objektnamen des neu 
	// zu erzeugenden Objektes. Wenn dieser Parameter nicht gegeben ist, dann wird eine eindeutige
	// Zeichenkette erzeugt, die als Objektname Verwendung findet.
	// @parm VARIANT | GeoCls | Der (optionale) Parameter <p GeoCls> enthält die Objektklasse, der
	// das neu erzeugte Objekt zugeordnet werden soll. Wenn dieser Parameter nicht gegeben ist, dann 
	// wird das neue Objekt der Objektklasse "Unbekannte Objektklasse" zugeordnet.
	// @comm Wenn bereits ein Objekt existiert, welches den ggf. gegebenen Objektnamen (Parameter <p GeoObj>
	// besitzt, dann schlägt die Methode <om .AddObject> fehl und liefert den Wert <cv Nothing>.
	// @xref <i DDocument>
	[
		id(701), 
		helpstring("Fügt ein Objekt zu diesem Projekt hinzu."),
		helpcontext(DDocument_AddObject_meth)
	]
	HRESULT AddObject ([in] VARIANT GeoObj, [in, optional] VARIANT GeoCls, [out, retval] DGeoObject **Obj);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoClass> * | DDocument | AddClass | Die Methode <om .AddClass>
	// fügt eine Objektklasse zu diesem Projekt hinzu (zu einer vorzugebenden Datenquelle).
	// @parm VARIANT | Class | Der Parameter <p Class> gibt den Namen oder den Objektklassenschlüssel
	// der Objektklasse vor, die erzeugt werden soll.
	// @parm VARIANT | DataSource | Der (optionale) Parameter <p DataSource> gibt den Namen der Datenquelle 
	// vor, auf die sich der Aufruf dieser Methode <om .AddClass> bezieht. Ist der Parameter <p DataSource> 
	// nicht gegeben, dann bezieht sich der Aufruf der Methode <om .AddClass> auf die aktive Datenquelle.
	// @comm Die Verwendung dieser Methode ist äquivalent mit dem Aufruf der <om .GetClassEx> unter Verwendung 
	// des Parameterwertes <p Mode> = <e GEOCLASSMODE.GEOCLASSMODE_Add>.
	// @comm Wenn die zu erzeugende Objektklasse in der vorgegebenen Datenquelle bereits existiert, dann 
	// hat die Methode <om .AdClass> keine Funktion und liefert den Wert <cv Nothing>.
	// @xref <i DDocument>, <om .GetClassEx>, <t GEOCLASSMODE>
	[
		id(501), 
		helpstring("Fügt eine Objektklasse zu diesem Projekt hinzu (aus einer definierten Datenquelle)."),
		helpcontext(DDocument_AddClass_meth)
	]
	HRESULT AddClass ([in] VARIANT Class, [in, optional] VARIANT DataSource, [out, retval] DGeoClass **Cls);

	// @doc DDOCUMENT | METHOD
	// @method <o GeoClass> * | DDocument | GetClassEx | Die Methode <om .GetClassEx>
	// liefert eine Objektklasse dieses Projektes.
	// @parm VARIANT | Class | Der Parameter <p Class> gibt den Namen oder den Objektklassenschlüssel
	// der Objektklasse vor, die geliefert werden soll.
	// @parm VARIANT | DataSource | Der (optionale) Parameter <p DataSource> gibt den Namen der Datenquelle 
	// vor, auf die sich der Aufruf dieser Methode <om .GetClassEx> bezieht.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> gibt vor, welche konkrete Funktion
	// durch die Methode <om .GetClassEx> ausgeführt werden soll. Der Parameter muß Werte vom Typ <t GEOCLASSMODE>
	// enthalten, ansonsten tritt ein Fehler auf. Ist der Parameter <p Mode> nicht gegeben, dann wird
	// der Wert <e GEOCLASSMODE.GEOCLASSMODE_Get> verwendet.
	// @comm Die Methode <om .GetClassEx> kann über den Parameter <p Mode> unterschiedliche Funktionen 
	// ausführen:
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Get>: Es wird eine existierende Ansicht geliefert. Wenn die durch den 
	// Parameter <p Class> referenzierte Ansicht im aktuellen Projekt nicht existiert, dann liefert
	// die Methode <om .GetClassEx> den Wert <cv Nothing>.
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Add>: Es wird eine neue Ansicnt erzeugt. Wenn die durch den Parameter 
	// <p Class> referenzierte Ansicht bereits existiert, dann hat die Methode <om .GetClassEx>
	// keine Funktion und liefert den Wert <cv Nothing>. Die Verwendung dieses Wertes ist identisch mit 
	// dem Auffruf der Methode <om .AddClass>.
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Remove>: Es wird eine existierende Ansicht gelöscht. Wenn die durch den
	// Parameter <p Class> nicht existiert, dann hat die Methode <om .GetClassEx> keine Funktion.
	// @xref <i DDocument>, <t GEOCLASSMODE>, <om .GetClass>, <om .AddClass>
	[
		id(502), 
		helpstring("Liefert eine Objektklasse dieses Projektes (aus einer definierten Datenquelle)."),
		helpcontext(DDocument_GetClassEx_meth)
	]
	HRESULT GetClassEx ([in]VARIANT Class, [in, optional] VARIANT DataSource, [in, optional]VARIANT Mode, [out, retval]DGeoClass **Cls);

	// @doc DDOCUMENT | PROPERTY
	// @property <o TRiASConnnections> * | DDocument | Connections | Die Eigenschaft <op .Connections>
	// Liefert sämtliche Connections, die derzeit zu diesem Projekt gehören.
	// @xref <i DDocument>
	[
		id(2000), 
		propget,
		helpstring("Liefert sämtliche Connections, die derzeit zu diesem Projekt gehören."),
		helpcontext(DDocument_Connections_prop)
	]
	HRESULT Connections ([out, retval] ITRiASConnections **Conns);

	// @doc DDOCUMENT | METHOD
	// @method BSTR | DDocument | GetHeaderEntryEx | Die Methode <om .GetHeaderEntryEx>
	// liefert einen Headereintrag einer Datenquelle.
	// @parm BSTR | DataSource | Der Parameter <p DataSource> gibt den Namen der Datenquelle vor aus deren
	// Header der referenzierte Eintrag gelesen werden soll.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu liefernden
	// Headereintrages vor.
	// @comm Jede datenquelle verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Schreiben von Schlüssel/Werte- Paaren in diesem Speicherbereich erfolgt 
	// durch die Methode <om .SetHeaderEntryEx>.
	// @comm Jedes Projekt besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntry> bzw. 
	// <om .SetHeaderEntry>
	// @xref <i DDocument>, <om .SetHeaderEntryEx>, <om .GetHeaderEntry>, <om .SetHeaderEntry>
	[id(324), helpstring("Headereintrag einer Datenquelle lesen"), helpcontext(DDocument_GetHeaderEntryEx_meth)]
		HRESULT GetHeaderEntryEx ([in]BSTR DataSource, [in]BSTR HeaderKey, [out, retval]BSTR *HeaderText);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | SetHeaderEntryEx | Die Methode <om .SetHeaderEntryEx>
	// schreibt bzw. erzeugt einen Headereintrag einer Datenquelle.
	// @parm BSTR | DataSource | Der Parameter <p DataSource> gibt den Namen der datenquelle vor
	// deren Header geschrieben werden soll.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu schreibenden
	// Headereintrages vor.
	// @parm VARIANT | HeaderText | Der (optionale) Parameter <p HeaderText> gibt die unter dem im Parameter
	// <p HeaderKey> gegebenen zu speichernde Zeichenkette vor. Wenn dieser parameter nicht gegeben ist, 
	// dann wird der durch den Parameter <p HeaderKey> referenzierte Headereintrag gelöscht.
	// @comm Jede Datenquelle verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Lesen von Schlüssel/Werte- Paaren aus diesem Speicherbereich erfolgt 
	// durch die Methode <om .GetHeaderEntryEx>.
	// @comm Jedes Projekt besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntry> bzw. 
	// <om .SetHeaderEntry>
	// @xref <i DDocument>, <om .GetHeaderEntryEx>, <om .GetHeaderEntry>, <om .SetHeaderEntry>
	[id(325), helpstring("Headereintrag einer Datenquelle schreiben"), helpcontext(DDocument_SetHeaderEntryEx_meth)]
		HRESULT SetHeaderEntryEx ([in]BSTR DataSource, [in]BSTR HeaderKey, [in, optional]VARIANT HeaderText);

	// @doc DDOCUMENT | METHOD
	// @method HRESULT | DDocument | QueryObjects | Die Methode <om .QueryObjects>
	// liefert eine Datenobjektsammlung aller Objekte die dem gebenen Kriterium genügen.
	// @parm VARIANT | Feature | Der Parameter <p ObjProp> gibt die Objekteigenschaft vor, nach der 
	// gesucht werden soll. Dieser Parameter kann den Namen einer Objekteigenschaft enthalten, wobei dann
	// sämtliche Objektklassen untersucht werden, deren Objekte eine derartige Objekteigenschaft besitzen 
	// können. Wenn dieser Parameter ein Objekt vom Typ <o GeoFeature> enthält, wird lediglich die
	// gegebene Objekteigenschaft  untersucht.
	// @parm VARIANT | ToSearch | Der (optionale) Parameter <p ToSearch> gibt die zu suchende 
	// Zeichenkette vor. Wenn dieser Parameter nicht gegeben ist, dann werden alle Objekte 
	// geliefert, für die diese Objekteigenschaft definiert und gegeben ist.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> erlaubt, die Suche nach einer
	// Objekteigenschaft zusätzlich einzuschränken. Der Parameter muß Werte des Typs 
	// <t FEATURESEARCHMODE> evtl. kombiniert mit Werten des Typs <t FEATURESEARCHQUALIFIER>
	// enthalten. Wenn dieser Parameter nicht gegeben ist, dann wird der Wert
	// <e FEATURESEARCHMODE.FEATURESEARCHMODE_Exactmatch> angenommen.
	// @xref <i DGeoFeature>, <t FEATURESEARCHMODE>, <t FEATURESEARCHQUALIFIER>
	[
		id(326), 
		helpstring("Liefert die Liste aller Objekte entsprechend Recherchekriterium."), 
		helpcontext(DGeoDocument_QueryObjects_meth)
	]
	HRESULT QueryObjects ([in] VARIANT Feature, [in, optional]VARIANT ToSearch, [in, optional]VARIANT Mode, [out, retval]DGeoObjects **Objs);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | Render | Die Methode <om .RePaint> erzwingt, das die 
	// aktuelle Ansicht (bzw. ein Auschnitt der aktuellen Ansicht) neu gezeichnet wird.
	// @parm long | Left | Der Parameter <p Left> gibt die linke Fensterkoordinate des
	// Zielbereiches bezogen auf das Ausgabegerät vor.
	// @parm long | Bottom | Der Parameter <p Bottom> gibt die untere Koordinate des
	// Zielbereiches bezogen auf das Ausgabegerät vor.
	// @parm long | Right | Der Parameter <p Right> gibt die rechte Koordinate des
	// Zielbereiches bezogen auf das Ausgabegerät vor.
	// @parm long | Top | Der Parameter <p Top> gibt die obere Koordinate des
	// Zielbereiches bezogen auf das Ausgabegerät vor.
	// @parm VARIANT | LeftDb | Der (optionale) Parameter <p Left> gibt die linke Datenbank-Koordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @parm VARIANT | BottomDb | Der (optionale) Parameter <p Bottom> gibt die untere Datenbank-Koordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @parm VARIANT | RightDb | Der (optionale) Parameter <p Right> gibt die rechte Datenbank-Koordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @parm VARIANT | TopDb | Der (optionale) Parameter <p Top> gibt die obere Datenbank-Koordinate des neu
	// zu zeichnenden Ausschnittes vor.
	// @parm VARIANT | PrinterDriver | Der (optionale) Parameter <p PrinterDriver> gibt den
	// Treibernamen des Druckers aus, der als Ausgabegerät verwendet werden soll.
	// @parm VARIANT | PrinterDevice | Der (optionale) Parameter <p PrinterDevice> gibt den
	// Namen des Ausgabegerätes aus.
	// @parm VARIANT | PrinterPort | Der (optionale) Parameter <p PrinterPort> gibt den
	// Namen des Portes aus, an dem das Ausgabegerät angeschlossen sein soll.
	// @comm Die Parameter <p LeftDb>, <p BottomDb>, <p RightDb> und <p TopDb> sind in sofern als optional
	// zu betrachten, als das diese entweder alle vorgegeben sein sollten (der Ausschnitt wird gezeichnet)
	// oder aber sämtlich nicht gegeben sind (die gesamte aktuelle Ansicht wird gezeichnet). Fehlen
	// lediglich ein bis drei dieser Parameter, dann wird die gesamte Ansicht gezeichnet.
	// @comm Die Parameter <p PrinterName>, <p PrinterDriver> und <p PrinterPort> sind sofern als
	// optional zu betrachten, als diese entweder alle vorgegeben sein sollten (der entsprechende 
	// Drucker wird verwendet) oder aber sämtlich nicht gegeben sind (der Standarddrucker wird 
	// verwendet). Fehler 1 bis 2 dieser Parameter, dann wird der Standarddrucker verwendet.
	// @xref <i DDocument>
	[id(327), helpstring("Aktuelle Ansicht (Auschnitt) in Metafile ausgeben."), helpcontext(DDocument_Render_meth)]
		HRESULT Render ([in] long Left, [in] long Bottom, [in] long Right, [in] long Top, 
			[in, optional] VARIANT LeftDb, [in, optional] VARIANT BottomDb, 
			[in, optional] VARIANT RightDb, [in, optional] VARIANT TopDb,
			[in, optional] VARIANT PrinterDriver, [in, optional] VARIANT PrinterDevice,
			[in, optional] VARIANT PrinterPort, [out, retval] IDispatch **PictDisp);

	// @doc DDOCUMENT | METHOD
	// @method BSTR | DDocument | GetHeaderEntryEx2 | Die Methode <om .GetHeaderEntryEx2>
	// liefert einen Headereintrag einer Datenquelle.
	// @parm BSTR | DataSource | Der Parameter <p DataSource> gibt den Namen der Datenquelle vor aus deren
	// Header der referenzierte Eintrag gelesen werden soll.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu liefernden
	// Headereintrages vor.
	// @parm <t HEADERFLAG> | Flags | Im Parameter <p Flags> werden die zusätzlichen Parameter, die die
	// Speicherform beeinflussen geliefert.
	// @comm Jede Datenquelle verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Schreiben von Schlüssel/Werte- Paaren in diesem Speicherbereich erfolgt 
	// durch die Methode <om .SetHeaderEntryEx>.
	// @comm Jedes Projekt besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntry> bzw. 
	// <om .SetHeaderEntry>
	// @xref <i DDocument>, <om .GetHeaderEntryEx>, <om .SetHeaderEntryEx>, <om .GetHeaderEntry>, 
	// <om .SetHeaderEntry>, <om .SetHeaderEntryEx2>, <t HEADERFLAG>
	[id(328), helpstring("Headereintrag einer Datenquelle lesen"), helpcontext(DDocument_GetHeaderEntryEx2_meth)]
		HRESULT GetHeaderEntryEx2 ([in]BSTR DataSource, [in]BSTR HeaderKey, [in, out] enum _tagHEADERFLAG *Flags, 
			[out, retval]BSTR *HeaderText);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | SetHeaderEntryEx2 | Die Methode <om .SetHeaderEntryEx2>
	// schreibt bzw. erzeugt einen Headereintrag einer Datenquelle.
	// @parm BSTR | DataSource | Der Parameter <p DataSource> gibt den Namen der datenquelle vor
	// deren Header geschrieben werden soll.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu schreibenden
	// Headereintrages vor.
	// @parm VARIANT | HeaderText | Der (optionale) Parameter <p HeaderText> gibt die unter dem im Parameter
	// <p HeaderKey> gegebenen zu speichernde Zeichenkette vor. Wenn dieser Parameter nicht gegeben ist, 
	// dann wird der durch den Parameter <p HeaderKey> referenzierte Headereintrag gelöscht.
	// @parm VARIANT | Flags | Der (optionale) Parameter <p Flags> gibt zusätzliche Parameter vor,
	// die die Speicherform beeinflussen (muß vom Type <t HEADERFLAG> sein, wenn gegeben). Wenn dieser
	// Parameter nicht gegeben ist, so wird <e HEADERFLAG.HEADERFLAG_Normal> verwendet.
	// @comm Jede Datenquelle verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Lesen von Schlüssel/Werte- Paaren aus diesem Speicherbereich erfolgt 
	// durch die Methode <om .GetHeaderEntryEx>.
	// @comm Jedes Projekt besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntry> bzw. 
	// <om .SetHeaderEntry>
	// @xref <i DDocument>, <om .GetHeaderEntryEx>, <om .SetHeaderEntryEx>, <om .GetHeaderEntry>, 
	// <om .SetHeaderEntry>, <om .GetHeaderEntryEx2>, <t HEADERFLAG>
	[id(329), helpstring("Headereintrag einer Datenquelle schreiben"), helpcontext(DDocument_SetHeaderEntryEx2_meth)]
		HRESULT SetHeaderEntryEx2 ([in]BSTR DataSource, [in]BSTR HeaderKey, 
			[in, optional]VARIANT HeaderText, [in, optional] VARIANT Flags);

	// @doc DDOCUMENT | PROPERTY
	// @property HRESULT | DDocument | Tag | Die Eigenschaft <op .Tag>
	// setzt bzw. liest beliebige Daten an diesem Objekt zur Verwendung für externe Programme.
	// @parm BSTR | TagName | Der Parameter <p TagName> gibt einen Namen vor, unter dem die
	// Daten abgelegt werden und wieder abgefragt werden können.
	// @parm VARIANT | TagData | Der Parameter <p TagData> enthält die Daten, die gespeichert
	// werden sollen.
	// @comm Um Daten zu löschen muß dem Tag der Wert vbEmpty zugewiesen werden.
	// @xref <i DDocument>
	[
		id(330),
		propput,
		helpstring("Setzt beliebige Daten an diesem Objekt zur Verwendung für externe Programme."),
		helpcontext(DDocument_Tag_prop)
	]
	HRESULT Tag ([in] BSTR TagName, [in] VARIANT TagData);
	[
		id(330),
		propget,
		helpstring("Liest beliebige Daten an diesem Objekt zur Verwendung für externe Programme."),
		helpcontext(DDocument_Tag_prop)
	]
	HRESULT Tag ([in] BSTR TagName, [out, retval] VARIANT *TagData);

	// @doc DDOCUMENT | METHOD
	// @method BSTR | DDocument | GetHeaderEntry2 | Die Methode <om .GetHeaderEntry2>
	// liefert einen Headereintrag des Projektes.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu liefernden
	// Headereintrages vor.
	// @parm <t HEADERFLAG> | Flags | Im Parameter <p Flags> werden die zusätzlichen Parameter, die die
	// Speicherform beeinflussen geliefert.
	// @comm Jede Datenquelle verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Schreiben von Schlüssel/Werte- Paaren in diesem Speicherbereich erfolgt 
	// durch die Methode <om .SetHeaderEntryEx>.
	// @comm Jedes Projekt besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntry> bzw. 
	// <om .SetHeaderEntry>
	// @xref <i DDocument>, <om .GetHeaderEntryEx>, <om .SetHeaderEntryEx>, <om .GetHeaderEntry>, 
	// <om .SetHeaderEntry>, <om .SetHeaderEntryEx2>, <t HEADERFLAG>
	[id(331), helpstring("Headereintrag des Projektes lesen"), helpcontext(DDocument_GetHeaderEntry2_meth)]
		HRESULT GetHeaderEntry2 ([in]BSTR HeaderKey, [in, out] enum _tagHEADERFLAG *Flags, 
			[out, retval]BSTR *HeaderText);

	// @doc DDOCUMENT | METHOD
	// @method void | DDocument | SetHeaderEntry2 | Die Methode <om .SetHeaderEntry2>
	// schreibt bzw. erzeugt einen Headereintrag eines Projekt.
	// @parm BSTR | HeaderKey | Der Parameter <p HeaderKey> gibt den Schlüssel des zu schreibenden
	// Headereintrages vor.
	// @parm VARIANT | HeaderText | Der (optionale) Parameter <p HeaderText> gibt die unter dem im Parameter
	// <p HeaderKey> gegebenen zu speichernde Zeichenkette vor. Wenn dieser Parameter nicht gegeben ist, 
	// dann wird der durch den Parameter <p HeaderKey> referenzierte Headereintrag gelöscht.
	// @parm VARIANT | Flags | Der (optionale) Parameter <p Flags> gibt zusätzliche Parameter vor,
	// die die Speicherform beeinflussen (muß vom Type <t HEADERFLAG> sein, wenn gegeben). Wenn dieser
	// Parameter nicht gegeben ist, so wird <e HEADERFLAG.HEADERFLAG_Normal> verwendet.
	// @comm Jede Datenquelle verfügt über einen speziellen Speicherbereich in dem beliebige
	// Schlüssel/Wert- Paare (Zeichenketten) gespeichert werden können. Dieser Speicherbereich ist hier
	// als Header bezeichnet. Das Lesen von Schlüssel/Werte- Paaren aus diesem Speicherbereich erfolgt 
	// durch die Methode <om .GetHeaderEntryEx>.
	// @comm Jedes Projekt besitzt einen ähnlichen Speicherbereich zum Ablegen von Schlüssel/Wert-
	// Paaren. Der Zugriff auf diesen Speicherbereich erfolgt über die Methoden <om .GetHeaderEntry> bzw. 
	// <om .SetHeaderEntry>
	// @xref <i DDocument>, <om .GetHeaderEntryEx>, <om .SetHeaderEntryEx>, <om .GetHeaderEntry>, 
	// <om .SetHeaderEntry>, <om .GetHeaderEntryEx2>, <t HEADERFLAG>
	[id(332), helpstring("Headereintrag des Projektes schreiben"), helpcontext(DDocument_SetHeaderEntry2_meth)]
		HRESULT SetHeaderEntry2 ([in]BSTR HeaderKey, 
			[in, optional]VARIANT HeaderText, [in, optional] VARIANT Flags);

#if defined(_EXPLICIT_FUNCTIONS)
	[id(1101), helpstring("Fügt eine Ansicht zu diesem Projekt hinzu.")]
		HRESULT AddView ([in]BSTR ViewName, [out, retval]DView **View);
	[id(1102), helpstring("Löscht Ansicht dieses Projektes.")]
		HRESULT RemoveView ([in]BSTR ViewName);
	
	[id(502), helpstring("Löscht alle Objekte einer Objektklasse dieses Projektes.")]
		HRESULT RemoveClass ([in]VARIANT Class);
	
	[id(702), helpstring("Löscht ein Objekt dieses Projektes")]
		HRESULT RemoveObject ([in]VARIANT GeoObj);

	[id(320), helpstring("Erzeugt ein Objekt-Recherchefenster.")]
		HRESULT AddGeoObjectWin ([in]VARIANT Window, [out, retval]DGeoObjectWin **Win);
	[id(321), helpstring("Löscht ein Objekt-Recherchefenster.")]
		HRESULT RemoveGeoObjectWin ([in]VARIANT Window);

	[id(900), helpstring("Liefert eine Eigenschaft innerhalb dieses Projektes.")]
		HRESULT GetFeature ([in]VARIANT Feature, [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeature **Feat);
	[id(901), helpstring("Erzeugt eine neue Eigenschaft innerhalb dieses Projektes.")]
		HRESULT AddFeature ([in]VARIANT Feature, [in, optional]VARIANT Props, 
			[out, retval]DGeoFeature **Feat);
	[id(902), helpstring("Löscht eine Eigenschaft innerhalb dieses Projektes.")]
		HRESULT RemoveFeature ([in]VARIANT Feature);
#endif // _EXPLICIT_FUNCTIONS
};

///////////////////////////////////////////////////////////////////////////////
// Eine Liste von Sichten
// @doc INTERFACE | TRIASTLB
// @interface DViews | Über das Interface <i DViews> sind sämtliche Eigenschaften 
// und Methoden einer Sammlung von Ansichten (vom Typ <o GeoView>) zugänglich.
// @base public | DTRiASBaseClass
// @base public | DTRiASCollection
// @supby <o GeoViews>
// @xref <o GeoViews>
// @group Eigenschaften von <i DViews>
// @index | DVIEWS & PROPERTY
// @group Methoden von <i DViews>
// @index | DVIEWS & METHOD
// @doc DVIEWS
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3CE-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Sammlung von TRiAS® Ansichten."),
	helpcontext(DViews_int)
]  
interface DViews : DTRiASCollection 
{
//	[id(10000), hidden, restricted] HRESULT Dummy(void);
	// intentionally left free
};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DView | Über das Interface <i DView> sind sämtliche Eigenschaften und Methoden
// einer Ansicht im aktuellen <tr> Projekt zugänglich.
// @base public | DTRiASBaseClass
// @supby <o GeoView>
// @xref <o GeoView>
// @group Eigenschaften von <i DView>
// @index | DVIEW & PROPERTY
// @group Methoden von <i DView>
// @index | DVIEW & METHOD
// @doc DVIEW
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3D0-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Eine TRiAS® Ansicht."),
	helpcontext(DView_int)
]  
interface DView : DTRiASBaseClass 
{
	// @doc DVIEW | PROPERTY
	// @property HRESULT | DView | Properties | Die Eigenschaft <op .Properties>
	// ...
	// @comm Die Eigenschaft <op .Properties> ist zur Zeit nicht implementiert.
	// @xref <i DView>
	[id(9), propget] HRESULT Properties ([out, retval]DTRiASProperties **Props);

	// @doc DVIEW | METHOD
	// @method HRESULT | DView | CreateProperty | Die Methode <om .CreateProperty>
	// ...
	// @parm VARIANT | PropName | Der Parameter <p PropName> ...
	// @parm VARIANT | PropType | Der Parameter <p PropType> ...
	// @parm VARIANT | Value | Der Parameter <p Value> ...
	// @comm Die Methode <om .CreateProperty> ist zur Zeit nicht implementiert.
	// @xref <i DView>
	[id(10)] HRESULT CreateProperty ([in, optional]VARIANT PropName, [in, optional]VARIANT PropType, 
		[in, optional]VARIANT Value, [out, retval]DTRiASProperty **Prop);
		
	// @doc DVIEW | PROPERTY
	// @property BSTR | DView | Value | Die Eigenschaft <op .Value>
	// liefert den Namen der Ansicht.
	// @comm Die Eigenschaft <op .Value> ist die Standardeigenschaft eines Objektes vom Typ <o GeoView>.
	// @xref <i DView>
	[id(DISPID_VALUE), propget, helpstring("Name der Ansicht"), helpcontext(DView_Value_prop)]
		HRESULT Value ([out, retval]BSTR *Value);		// Name der Ansicht
		
	// @doc DVIEW | PROPERTY
	// @property BSTR | DView | Name | Die Eigenschaft <op .Name>
	// setzt bzw. liefert den Namen der Ansicht.
	// @xref <i DView>
	[id(3), propget, helpstring("Name der Ansicht"), helpcontext(DView_Name_prop)]
		HRESULT Name ([out, retval]BSTR *Value);
	[id(3), propput, helpstring("Namen der Ansicht ändern"), helpcontext(DView_Name_prop)]
		HRESULT Name ([in]BSTR Name);
	
	// @doc DVIEW | METHOD
	// @method <o GeoClasses> * | DView | GetClasses | Die Methode <om .GetClasses>
	// liefert eine Datenobjektsammlung (vom Typ <o GeoClasses>) die sämtliche Objektklassen 
	// dieser Ansicht enthält.
	// @parm VARIANT | Classes | Der (optionale) Parameter <p Classes> wird zur Zeit nicht ausgewertet.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> wird zur Zeit nicht ausgewertet.
	// @rdesc Der Rückgabewert enthält eine Datenobjektsammlung vom Typ <o GeoClasses>, die sämtliche
	// Objektklassen enthält, die in dieser Ansicht mit wenigstens einem Objekttyp vertreten sind.
	// @xref <i DView>, <o GeoClasses>
	[id(400), helpstring("Liste aller Objektklassen dieser Ansicht"), helpcontext(DView_GetClasses_meth)]
		HRESULT GetClasses ([in, optional]VARIANT Classes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoClasses **Clss);

	// @doc DVIEW | METHOD
	// @method <o GeoClass> * | DView | GetClass | Die Methode <om .GetClass>
	// liefert eine Objektklasse dieses Projektes.
	// @parm VARIANT | Class | Der Parameter <p Class> gibt den Namen oder den Objektklassenschlüssel
	// der Objektklasse vor, die geliefert werden soll.
	// @parm VARIANT | ObjTypes | Der (optionale) Parameter <p ObjTypes> gibt die Objekttypen vor,
	// für die die gesuchte Objektklasse geliefert werden soll. Wenn der Parameter <p ObjTypes> nicht
	// gegeben ist, werden alle Objekttypen gesucht. Dieser Parameter wird nur in Kombination mit
	// <p Mode> = <e GEOCLASSMODE.GEOCLASSMODE_Get> ausgewertet.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> gibt vor, welche konkrete Funktion
	// durch die Methode <om .GetClass> ausgeführt werden soll. Der Parameter muß Werte vom Typ <t GEOCLASSMODE>
	// enthalten, ansonsten tritt ein Fehler auf. Ist der Parameter <p Mode> nicht gegeben, dann wird
	// der Wert <e GEOCLASSMODE.GEOCLASSMODE_Get> verwendet.
	// @comm Die Methode <om .GetClass> kann über den Parameter <p Mode> unterschiedliche Funktionen 
	// ausführen:
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Get>: Es wird eine existierende Ansicht geliefert. Wenn die durch den 
	// Parameter <p Class> referenzierte Ansicht im aktuellen Projekt nicht existiert, dann liefert
	// die Methode <om .GetClass> den Wert <cv Nothing>.
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Add>: Es wird eine neue Ansicnt erzeugt. Wenn die durch den Parameter 
	// <p Class> referenzierte Ansicht bereits existiert, dann hat die Methode <om .GetClass>
	// keine Funktion und liefert den Wert <cv Nothing>.
	// <nl><e GEOCLASSMODE.GEOCLASSMODE_Remove>: Es wird eine existierende Ansicht gelöscht. Wenn die durch den
	// Parameter <p Class> nicht existiert, dann hat die Methode <om .GetClass> keine Funktion.
	// @comm Der Parameter <p ObjTypes> ermöglicht die gelieferte Objektklasse zusätzlich auf die in der
	// untersuchten Ansicht enthaltenen Objekttypen einzuschränken.
	// @rdesc Der Rückgabewert enthält ein Datenobjekt vom Typ <o GeoClass>, welches den gegebenen 
	// Kriterien genügt bzw. <cv Nothing>, wenn kein derartiges Datenobjekt existiert.
	// @xref <i DView>, <t GEOCLASSMODE>
	[id(500), helpstring("Eine Objektklasse dieser Ansicht"), helpcontext(DView_GetClass_meth)]
		HRESULT GetClass ([in]VARIANT Class, [in, optional]VARIANT ObjTypes, 
			[in, optional]VARIANT Mode, [out, retval]DGeoClass **Cls);

	// @doc DVIEW | METHOD
	// @method <o GeoObjects> * | DView | GetObjects | Die Methode <om .GetObjects>
	// liefert eine Datenobjektsammlung mit allen Objekten dieser Ansicht.
	// @parm VARIANT | ObjTypes | Der (optionale) Parameter <p ObjTypes> enthält die zu liefernden 
	// Objekttypen. Dieser Parameter kann eine Kombination von Werten des Typs <t OBJECTTYPE> enthalten.
	// Ist dieser Parameter nicht gegeben, so werden sämtliche Objekttypen geliefert.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> wird zur Zeit nicht ausgewertet.
	// @rdesc Der Rückgabewert enthält eine Datenobjektsammlung vom Typ <o GeoObjects>, die sämtliche
	// Objekte des durch den Parameter <p ObjTypes> gegebenen Objekttypes enthält, die in dieser Ansicht vertreten sind.
	// @xref <i DView>, <t OBJECTTYPE>
	[id(600), helpstring("Liefert die Liste aller Objekte dieser Ansicht."), helpcontext(DView_GetObjects_meth)]
		HRESULT GetObjects ([in, optional]VARIANT ObjTypes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjects **Objs);

	// @doc DVIEW | METHOD
	// @method <o GeoObjects> * | DView | GetObjectsInRect | Die Methode <om .GetObjectsInRect>
	// liefert eine Datenobjektsammlung mit allen Objekten dieser Ansicht in einem vorgegebenen 
	// Koordinatenbereich.
	// @parm double | X | Der Parameter <p X> enthält den Wert der linken Koordinate
	// des zu untersuchenden Koordinatenbereiches.
	// @parm double | Y | Der Parameter <p Y> enthält den Wert der unteren Koordinate
	// des zu untersuchenden Koordinatenbereiches.
	// @parm VARIANT | XMax | Der (optionale) Parameter <p XMax> enthält den Wert der rechten
	// Koordinate des zu untersuchenden Koordinatenbereiches.
	// @parm VARIANT | YMax | Der (optionale) Parameter <p YMax> enthält den Wert der oberen
	// Koordinate des zu untersuchenden Koordinatenbereiches.
	// @comm Die Parameter <p XMax> bzw. <p YMax> sind in sofern optional, als daß entweder beide 
	// gegeben sein sollten oder aber beide nicht geben sind (in diesem Fall werden die 
	// Parameter <p X> bzw. <p Y> als Mittelpunktskoordinaten des zu untersuchenden Koordinatenbereiches
	// ausgewertet). Fehlt nur einer der beiden Parameter, so werden alle Objekte geliefert, die den
	// übergebenen Punkt enthalten bzw. berühren.
	// @comm Die Werte der übergebenen Koordinaten werden in Bezug auf das aktuell für das
	// Projekt ausgewählte Koordinatensystem ausgewertet.
	// @rdesc Der Rückgabewert enthält eine Datenobjektsammlung vom Typ <o GeoObjects>, die alle Objekte
	// dieser Ansicht enthält, deren Geometrie den gebenen Kriterien genügt.
	// @xref <i DView>, <o GeoObjects>
	[id(610), helpstring("Liefert die Liste aller Objekte dieser Ansicht in einem Bereich."), helpcontext(DView_GetObjectsInRect_meth)]
		HRESULT GetObjectsInRect ([in]double X, [in]double Y, 
			[in, optional]VARIANT XMax, [in, optional]VARIANT YMax, [out, retval]DGeoObjects **Objs);

	// @doc DVIEW | METHOD
	// @method <o GeoObject> * | DView | GetObject | Die Methode <om .GetObject>
	// liefert ein Objekt dieser Ansicht
	// @parm VARIANT | GeoObj | Der Parameter <p GeoObj> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @comm Ein Objekt gehört genau dann zu einer Ansicht, entweder wenn seine Objektklasse in dieser 
	// Ansicht vertreten ist, oder aber eine Rechercheobjektmenge zu dieser Ansicht gehört, zu der das
	// Objekt gehört.
	// @xref <i DView>, <o GeoObject>
	[id(700), helpstring("Ein Objekt dieser Ansicht"), helpcontext(DView_GetObject_meth)]
		HRESULT GetObject ([in]VARIANT GeoObj, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObject **Obj);

	// @doc DVIEW | METHOD
	// @method HRESULT | DView | GetFeatures | Die Methode <om .GetFeatures>
	// Liste aller Eigenschaften dieser Ansicht
	// @parm VARIANT | Features | Der (optionale) Parameter <p Features> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DView>
	[id(800), helpstring("Liste aller Eigenschaften dieser Ansicht"), helpcontext(DView_GetFeatures_meth)]
		HRESULT GetFeatures ([in, optional]VARIANT Features, [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeatures **Feats);

	// @doc DVIEW | METHOD
	// @method HRESULT | DView | GetFeature | Die Methode <om .GetFeature>
	// Eine Eigenschaft dieser Ansicht
	// @parm VARIANT | Feature | Der Parameter <p Feature> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DView>
	[id(900), helpstring("Eine Eigenschaft dieser Ansicht"), helpcontext(DView_GetFeature_meth)]
		HRESULT GetFeature ([in]VARIANT Feature, [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeature **Feat);

	// @doc DVIEW | METHOD
	// @method <o GeoObjects> * | DView | GetClipObject | Die Methode <om .GetClipObject>
	// Clipping Objekt der Ansicht
	// @xref <i DView>
	[
		id(1700), 
		helpstring("Clipping Objekt der Ansicht"),
		helpcontext(DView_GetClipObject_meth)
	]
	HRESULT GetClipObject ([out, retval]DGeoObject **ClipObj);
	
	// @doc DVIEW | METHOD
	// @method void | DView | SetClipObject | Die Methode <om .SetClipObject>
	// Clipping Objekt der Ansicht ändern
	// @parm UserDefined | ClipObj | Der Parameter <p ClipObj> ...
	// @xref <i DView>
	[
		id(1701), 
		helpstring("Clipping Objekt der Ansicht ändern"), 
		helpcontext(DView_SetClipObject_meth)
	]
	HRESULT SetClipObject ([in]DGeoObject *ClipObj);
	
	// @doc DVIEW | METHOD
	// @method void | DView | ResetClipObject | Die Methode <om .ResetClipObject>
	// Clipping Objekt der Ansicht rücksetzen
	// @xref <i DView>
	[
		id(1702), 
		helpstring("Clipping Objekt der Ansicht rücksetzen"), 
		helpcontext(DView_ResetClipObject_meth)
	]
	HRESULT ResetClipObject();

	// @doc DVIEW | PROPERTY
	// @property long | DView | RefScale | Die Eigenschaft <op .RefScale>
	// setzt bzw. liefert den aktuellen Bezugsmaßstab dieser Ansicht.
	// @comm Die Änderung des Bezugsmaßstabes wirkt sich erst beim nächsten Neuzeichnen
	// der Ansicht aus.
	// @comm Als Bezugsmaßstab der aktuellen Ansicht wird der Maßstab bezeichnet, auf den sich
	// sämtliche Größenangaben innerhalb der Darstellungsparameter (also Text- und Punktgrößen, 
	// Linienstärken etc.) beziehen.
	// @comm Wenn für die aktuelle Ansicht ein Bezugsmaßstab definiert ist, dann werden sämtliche
	// Darstellungsparameter in Bezug auf den aktuellen Darstellungsmaßstab berechnet und bei der 
	// Anzeige verwendet.
	// @comm Der Bezugsmaßstab kann durch vorgeben des Wertes '0' (Null) rückgesezt werden.
	// @xref <i DView>
	[
		id(1703), 
		propget,
		helpstring("Liefert Bezugsmaßstab dieser Ansicht."), 
		helpcontext(DView_RefScale_prop)
	]
	HRESULT RefScale ([out, retval]long *RefScale);
	[
		id(1703), 
		propput,
		helpstring("Setzt Bezugsmaßstab dieser Ansicht."), 
		helpcontext(DView_RefScale_prop)
	]
	HRESULT RefScale ([in]long RefScale);

	// @doc DVIEW | PROPERTY
	// @property long | DView | Scale | Die Eigenschaft <op .Scale>
	// setzt bzw. liefert den aktuellen Darstellungsmaßstab dieser Ansicht.
	// @comm Beim Setzen des Darstellungsmaßstabes wird der aktuelle Bildmittelpunkt
	// beibehalten. Soll der gesamte Bildausschnitt verändert werden, so
	// muß die Methode <om .SetActRect> verwendet werden.
	// @comm Die Änderung des Darstellungsmaßstabes wirkt sich erst beim nächsten Neuzeichnen
	// der Ansicht aus.
	// @xref <i DView>, <om .SetActRect>
	[
		id(1704), 
		propget,
		helpstring("Liefert Darstellungsmaßstab dieser Ansicht."), 
		helpcontext(DView_Scale_prop)
	]
	HRESULT Scale ([out, retval]long *Scale);
	[
		id(1704), 
		propput,
		helpstring("Setzt Darstellungsmaßstab dieser Ansicht."), 
		helpcontext(DView_Scale_prop)
	]
	HRESULT Scale ([in]long Scale);
	
	// @doc DVIEW | PROPERTY
	// @property BSTR | DView | Description | Die Eigenschaft <op .Description>
	// setzt bzw. liefert einen zusätzlichen Beschreibungstext der Ansicht.
	// @comm Der zusätzliche Beschreibungstext wird im Caption des Ansichtsfensters
	// und als Überschrift in der Legende verwendet.
	// @xref <i DView>
	[
		id(1705), 
		propget, 
		helpstring("Liefert Beschreibungstext der Ansicht."), 
		helpcontext(DView_Description_prop)
	]
	HRESULT Description ([out, retval]BSTR *ViewDesc);
	[
		id(1705), 
		propput, 
		helpstring("Setzt Beschreibungstext der Ansicht."), 
		helpcontext(DView_Description_prop)
	]
	HRESULT Description ([in]BSTR ViewDesc);

	// @doc DVIEW | METHOD
	// @method void | DView | GetConstraintRect | Die Methode <om .GetConstraintRect>
	// liefert den aktuell eingestellten Ansichtsausschnitt.
	// @parm double | X | Der (ByRef) Parameter <p X> liefert den Wert der linken Koordinate
	// des aktuell eingestellten Ansichtsausschnittes.
	// @parm double | Y | Der (ByRef) Parameter <p Y> liefert den Wert der unteren Koordinate
	// des aktuell eingestellten Ansichtsausschnittes.
	// @parm VARIANT | XMax | Der (optionale, ByRef) Parameter <p XMax> liefert den Wert der 
	// rechten Koordinate des aktuell eingestellten Sichtausschnittes.
	// @parm VARIANT | YMax | Der (optionale, ByRef) Parameter <p YMax> liefert den Wert der 
	// oberen Koordinate des aktuell eingestellten Ansichtsausschnittes.
	// @comm Die Parameter <p XMax> bzw. <p YMax> sind in sofern optional, als daß entweder beide 
	// gegeben sein sollten oder aber beide nicht geben sind (in diesem Fall enthalten die 
	// Parameter <p X> bzw. <p Y> nach einem erfolgreichen Aufruf der Methode <om .GetConstraintRect> die
	// Mittelpunktskoordinaten des eingestellten Ansichtsausschnittes). Fehlt nur einer der beiden
	// Parameter, so liefert die Methode <om .GetConstraintRect> die Mittelpunktskoordinaten des aktuell
	// eingestellten Ansichtsausschnittes.
	// @comm Der eingestellte Ansichtsausschnitt ist der maximal (größte) für eine Ansicht anzuzeigende 
	// Bereich. Er wirkt sich lediglich beim Rückvergrößern aus und kann nicht unterschritten werden.
	// @comm Der eingestellte Ansichtsausschnitt kann mit der Methode <om .SetConstraintRect> verändert werden.
	// @comm Die Werte der gelieferten Koordinaten beziehen sich auf das aktuell für das
	// Projekt ausgewählte Koordinatensystem.
	// @xref <i DView>
	[
		id(320),
		helpstring("Liefert den aktuell eingestellten Sichtausschnitt."), 
		helpcontext(DView_GetConstraintRect_meth)
	]
	HRESULT GetConstraintRect ([out] double *X, [out] double *Y, 
		[out, optional] VARIANT *XMax, [out, optional] VARIANT *YMax);

	// @doc DVIEW | METHOD
	// @method void | DView | SetConstraintRect | Die Methode <om .SetConstraintRect>
	// setzt den aktuell eingestellten Ansichtsausschnitt.
	// @parm double | X | Der Parameter <p X> enthält den Wert der linken Koordinate
	// des aktuell eingestellten Ansichtsausschnittes.
	// @parm double | Y | Der Parameter <p Y> enthält den Wert der unteren Koordinate
	// des aktuell eingestellten Ansichtsausschnittes.
	// @parm VARIANT | XMax | Der (optionale) Parameter <p XMax> enthält den Wert der rechten
	// Koordinate des eingestellten Ansichtsausschnittes.
	// @parm VARIANT | YMax | Der (optionale) Parameter <p YMax> enthält den Wert der oberen
	// Koordinate des eingestellten Ansichtsausschnittes.
	// @comm Die Parameter <p XMax> bzw. <p YMax> sind in sofern optional, als daß entweder beide 
	// gegeben sein sollten oder aber beide nicht geben sind (in diesem Fall werden die 
	// Parameter <p X> bzw. <p Y> als Mittelpunktskoordinaten des eingestellten Ansichtsausschnittes
	// ausgewertet). Fehlt nur einer der beiden Parameter, so verändert die Methode <om .SetConstraintRect> 
	// lediglich die die Mittelpunktskoordinaten des eingestellten Ansichtsausschnittes.
	// @comm Der eingestellte Ansichtsausschnitt ist der maximal (größte) für eine Ansicht anzuzeigende 
	// Bereich. Er wirkt sich lediglich beim Rückvergrößern aus und kann nicht unterschritten werden.
	// @comm Der eingestellte Ansichtsausschnitt kann mit der Methode <om .GetConstraintRect> 
	// abgefragt werden.
	// @comm Die Werte der übergebenen Koordinaten werden in Bezug auf das aktuell für das
	// Projekt ausgewählte Koordinatensystem ausgewertet.
	// @xref <i DView>, <om .GetConstraintRect>
	[
		id(321),
		helpstring("Setzt den aktuell eingestellten Sichtausschnitt."), 
		helpcontext(DView_SetConstraintRect_meth)
	]
	HRESULT SetConstraintRect ([in] double X, [in] double Y, 
		[in, optional] VARIANT XMax, [in, optional] VARIANT YMax);

	// @doc DVIEW | METHOD
	// @method void | DView | GetActRect | Die Methode <om .GetActRect>
	// liefert den aktuell dargestellten Bildausschnitt der aktuellen Ansicht.
	// @parm double | X | Der (ByRef) Parameter <p X> liefert den Wert der linken Koordinate
	// des aktuell dargestellten Bildschirmausschnittes.
	// @parm double | Y | Der (ByRef) Parameter <p Y> liefert den Wert der unteren Koordinate
	// des aktuell dargestellten Bildschirmausschnittes.
	// @parm VARIANT | XMax | Der (optionale, ByRef) Parameter <p XMax> liefert den Wert der 
	// rechten Koordinate des aktuell dargestellten Bildschirmausschnittes.
	// @parm VARIANT | YMax | Der (optionale, ByRef) Parameter <p YMax> liefert den Wert der 
	// oberen Koordinate des aktuell dargestellten Bildschirmausschnittes.
	// @comm Die Parameter <p XMax> bzw. <p YMax> sind in sofern optional, als daß entweder beide 
	// gegeben sein sollten oder aber beide nicht geben sind (in diesem Fall enthalten die 
	// Parameter <p X> bzw. <p Y> nach einem erfolgreichen Aufruf der Methode <om .GetActRect> die
	// Mittelpunktskoordinaten des aktuellen Darstellungsbereiches). Fehlt nur einer der beiden
	// Parameter, so liefert die Methode <om .GetActRect> die Mittelpunktskoordinaten des aktuellen
	// Darstellungsbereiches.
	// @comm Der aktuelle Darstellungsbereich kann mit der Methode <om .SetActRect> verändert werden.
	// @comm Die Werte der gelieferten Koordinaten beziehen sich auf das aktuell für das
	// Projekt ausgewählte Koordinatensystem.
	// @xref <i DView>, <om .SetConstraintRect>
	[
		id(322),
		helpstring("Liefert den aktuell dargestellten Bildausschnitt der aktuellen Ansicht."), 
		helpcontext(DView_GetActRect_meth)
	]
	HRESULT GetActRect ([out] double *X, [out] double *Y, 
		[out, optional] VARIANT *XMax, [out, optional] VARIANT *YMax);
	
	// @doc DVIEW | METHOD
	// @method void | DView | SetActRect | Die Methode <om .SetActRect>
	// setzt den aktuell dargestellten Bildausschnitt der aktuellen Ansicht.
	// @parm double | X | Der Parameter <p X> enthält den Wert der linken Koordinate
	// des aktuell darzustellenden Bildschirmausschnittes.
	// @parm double | Y | Der Parameter <p Y> enthält den Wert der unteren Koordinate
	// des aktuell darzustellenden Bildschirmausschnittes.
	// @parm VARIANT | XMax | Der (optionale) Parameter <p XMax> enthält den Wert der rechten
	// Koordinate des aktuell darzustellenden Bildschirmausschnittes.
	// @parm VARIANT | YMax | Der (optionale) Parameter <p YMax> enthält den Wert der oberen
	// Koordinate des aktuell darzustellenden Bildschirmausschnittes.
	// @comm Die Parameter <p XMax> bzw. <p YMax> sind in sofern optional, als daß entweder beide 
	// gegeben sein sollten oder aber beide nicht geben sind (in diesem Fall werden die 
	// Parameter <p X> bzw. <p Y> als Mittelpunktskoordinaten des aktuellen Darstellungsbereiches
	// ausgewertet). Fehlt nur einer der beiden Parameter, so verändert die Methode <om .SetActRect> 
	// lediglich die die Mittelpunktskoordinaten des aktuellen Darstellungsbereiches.
	// @comm Der aktuelle Darstellungsbereich kann mit der Methode <om .GetActRect> abgefragt werden.
	// @comm Die Werte der übergebenen Koordinaten werden in Bezug auf das aktuell für das
	// Projekt ausgewählte Koordinatensystem ausgewertet.
	// @xref <i DView>
	[
		id(323),
		helpstring("Setzt den aktuell dargestellten Bildausschnitt der aktuellen Ansicht."), 
		helpcontext(DView_SetActRect_meth)
	]
	HRESULT SetActRect ([in] double X, [in] double Y, 
		[in, optional] VARIANT XMax, [in, optional] VARIANT YMax);

#if defined(_EXPLICIT_FUNCTIONS)
	[id(501), helpstring("Fügt eine Objektklasse zu dieser Ansicht hinzu.")]
		HRESULT AddClass ([in]VARIANT Class, [in, optional]VARIANT ObjTypes, 
			[out, retval]DGeoClass **Cls);
	[id(502), helpstring("Entfernt eine Objektklasse aus dieser Ansicht.")]
		HRESULT RemoveClass ([in]VARIANT Class, [in, optional]VARIANT ObjTypes);
	
	[id(701), helpstring("Fügt ein Objekt zu diesem Projekt hinzu (not implemented yet).")]
		HRESULT AddObject ([in]VARIANT GeoObj, [out, retval]DGeoObjects **Objs);
	[id(702), helpstring("Entfernt ein Objekt aus dieser Ansicht (not implemented yet).")]
		HRESULT RemoveObject ([in]VARIANT GeoObj);
	
	[id(901), helpstring("Erzeugt eine neue Eigenschaft für diese Ansicht.")]
		HRESULT AddFeature ([in]VARIANT Feature, [out, retval]DGeoFeature **Feat);
	[id(902), helpstring("Löscht eine Eigenschaft dieser Ansicht.")]
		HRESULT RemoveFeature ([in]VARIANT Feature);
#endif // _EXPLICIT_FUNCTIONS
};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DGeoObjects | Über das Interface <i DGeoObjects> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung einer Menge von (Geometrie-)Objekten
// verfügbar.
// @base public | DTRiASBaseClass
// @base public | DTRiASCollection
// @supby <o GeoObjects>
// @xref <o GeoObjects>, <l Typen von Datenobjektsammlungen>
// @group Eigenschaften von <i DGeoObjects> 
// @index | DGEOOBJECTS & PROPERTY
// @group Methoden von <i DGeoObjects> 
// @index | DGEOOBJECTS & METHOD
// @doc GEOOBJECTS
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3D2-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Sammlung von TRiAS® GeoObjekten."),
	helpcontext(DGeoObjects_int)
]  
interface DGeoObjects : DTRiASCollection 
{
	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | CreateGeoObjectWin | Die Methode <om .CreateGeoObjectWin>
	// Generiert Objekt-Recherchefenster
	// @parm VARIANT | Flags | Der (optionale) Parameter <p Flags> ...
	// @xref <i DGeoObjects>
	[	
		id(601), 
		helpstring("Generiert Objekt-Recherchefenster"), 
		helpcontext(DGeoObjects_CreateGeoObjectWin_meth)
	]
	HRESULT CreateGeoObjectWin ([in, optional]VARIANT Flags, [out, retval]DGeoObjectWin **Win);

	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | GeometryIntersection | Die Methode <om .GeometryIntersection>
	// Bildet den Durchschnitt der Flächen dieser Collection und liefert alle Resultierenden Objekte.
	// @parm UserDefined | Class | Der Parameter <p Class> ...
	// @xref <i DGeoObjects>
	[
		id(602), 
		helpstring("Bildet den Durchschnitt der Flächen dieser Collection und liefert alle Resultierenden Objekte."), 
		helpcontext(DGeoObjects_GeometryIntersection_meth)
	]
	HRESULT GeometryIntersection ([in]DGeoClass *Class, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | GeometryUnion | Die Methode <om .GeometryUnion>
	// Bildet die Vereinigung der Flächen dieser Collection und liefert alle Resultierenden Objekte.
	// @parm UserDefined | Class | Der Parameter <p Class> ...
	// @xref <i DGeoObjects>
	[
		id(603), 
		helpstring("Bildet die Vereinigung der Flächen dieser Collection und liefert alle Resultierenden Objekte."),
		helpcontext(DGeoObjects_GeometryUnion_meth)
	]
	HRESULT GeometryUnion ([in]DGeoClass *Class, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | Intersection | Die Methode <om .Intersection>
	// Generiert Collection mit allen Objekten, die in beiden Folgen enthalten sind.
	// @parm UserDefined | Objects | Der Parameter <p Objects> ...
	// @xref <i DGeoObjects>
	[
		id(604), 
		helpstring("Generiert Collection mit allen Objekten, die in beiden Folgen enthalten sind."),
		helpcontext(DGeoObjects_Intersection_meth)
	]
	HRESULT Intersection ([in]DGeoObjects *Objects, [out, retval]DGeoObjects **Objs);
	
	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | Union | Die Methode <om .Union>
	// Generiert Collection mit allen Objekten, die in wenigstens einer der beiden Folgen enthalten sind.
	// @parm UserDefined | Objects | Der Parameter <p Objects> ...
	// @xref <i DGeoObjects>
	[
		id(605), 
		helpstring("Generiert Collection mit allen Objekten, die in wenigstens einer der beiden Folgen enthalten sind."),
		helpcontext(DGeoObjects_Union_meth)
	]
	HRESULT Union ([in]DGeoObjects *Objects, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | Difference | Die Methode <om .Difference>
	// Generiert Collection mit allen Objekten, die in unserer, jedoch nicht der gegebenen Folge enthalten sind.
	// @parm UserDefined | Objects | Der Parameter <p Objects> ...
	// @xref <i DGeoObjects>
	[
		id(606), 
		helpstring("Generiert Collection mit allen Objekten, die in unserer, jedoch nicht der gegebenen Folge enthalten sind."),
		helpcontext(DGeoObjects_Difference_meth)
	]
	HRESULT Difference ([in]DGeoObjects *Objects, [out, retval]DGeoObjects **Objs);
	
	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | SymmetricDifference | Die Methode <om .SymmetricDifference>
	// Generiert Collection mit allen Objekten, die nicht in beiden Folgen enthalten sind.
	// @parm UserDefined | Objects | Der Parameter <p Objects> ...
	// @xref <i DGeoObjects>
	[
		id(607), 
		helpstring("Generiert Collection mit allen Objekten, die nicht in beiden Folgen enthalten sind."),
		helpcontext(DGeoObjects_SymmetricDifference_meth)
	]
	HRESULT SymmetricDifference ([in]DGeoObjects *Objects, [out, retval]DGeoObjects **Objs);
    	
	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | _GeometryLinesUnion | Die Methode <om ._GeometryLinesUnion>
	// Linienvereinigung der Objekte dieser Sammlung (nicht mehr verwenden, veraltet!)
	// @parm UserDefined | Class | Der Parameter <p Class> ...
	// @parm VARIANT | FillGap | Der (optionale) Parameter <p FillGap> ...
	// @parm VARIANT | AsArea | Der (optionale) Parameter <p AsArea> ...
	// @xref <i DGeoObjects>
	[
		id(608), 
		hidden, 
		helpstring("Linienvereinigung der Objekte dieser Sammlung (nicht mehr verwenden, veraltet!)"),
		helpcontext(DGeoObjects__GeometryLinesUnion_meth)
	]
	HRESULT _GeometryLinesUnion ([in]DGeoClass *Class, 
		[in, optional]VARIANT FillGap, [in, optional]VARIANT AsArea,
		[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECTS | METHOD
	// @method HRESULT | DGeoObjects | GetObjectsInRect | Die Methode <om .GetObjectsInRect>
	// Liefert die Liste aller Objekte dieser Sammlung in einem Geometrie-Bereich.
	// @parm double | X | Der Parameter <p X> ...
	// @parm double | Y | Der Parameter <p Y> ...
	// @parm VARIANT | XMax | Der (optionale) Parameter <p XMax> ...
	// @parm VARIANT | YMax | Der (optionale) Parameter <p YMax> ...
	// @xref <i DGeoObjects>
	[
		id(610), 
		helpstring("Liefert die Liste aller Objekte dieser Sammlung in einem Geometrie-Bereich."),
		helpcontext(DGeoObjects_GetObjectsInRect_meth)
	]
	HRESULT GetObjectsInRect ([in]double X, [in]double Y, 
		[in, optional]VARIANT XMax, [in, optional]VARIANT YMax,
		[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECTS | METHOD
	// @method <o GeoClass> * | DGeoObjects | MakeGeoClass | Die Methode <op .MakeGeoClass>- fügt sämtliche
	// Datenobjekte (vom Typ <o GeoObject>) zu einer Rechercheobjektmenge hinzu.
	// @parm BSTR | NameOrOks | Der Parameter <p NameOrOks> enthält den Namen oder den Objektklassenschlüssel
	// der Rechercheobjektmenge. Ein Objektklassenschlüssel wird dabei als Zeichenkette übergeben, die 
	// ausschließlich aus den zeichen 0-9 bzw. A-F besteht und die in eckige Klammern eingeschlossen 
	// sind. So wird beispielsweise die Zeichenkette 'Resultat der Recherche' als Name und die Zeichenkette
	// '[7111]' als Objektklassenschlüssel interpretiert.
	// @rdesc Die Methode <om .MakeGeoClass> liefert die Rechercheobjektmenge zurück, zu der die
	// Datenobjekte dieser Sammlung hinzugefügt wurden.
	// @comm Die referenzierte Rechercheobjektmenge wird neu erzeugt, wenn sie noch nicht existiert.
	// @comm Eine Rechercheobjektmenge unterscheidet sich von einer 'normalen' Objektklasse lediglich 
	// dadurch, daß die Eigenschaft <op DGeoClass.IsQueryDef> den Wert <cv VARIANT_TRUE> liefert.
	// @xref <i DGeoObjects>, <o GeoObject>, <o GeoClass>
	// @xref <op DGeoClass.IsQueryDef>
	[
		id(611),
		helpstring("Fügt alle Objekte dieser Sammlung zu einer Rechercheobjektmenge hinzu."),
		helpcontext(DGeoObjects_MakeGeoClass_meth)
	]
	HRESULT MakeGeoClass ([in] BSTR NameOrOks, [out, retval] DGeoClass **Class);

/*	[	
		id(612), 
		helpstring("Linienvereinigung der Objekte dieser Collection")
	]
	HRESULT GeometryLinesUnion (
		[in, optional]VARIANT Tolerance, [in, optional]VARIANT CreateUniqueIds,
		[in, optional]VARIANT AsArea, [in, optional]VARIANT ProgInd,
		[out, optional] VARIANT *UsedObjs, [out, retval] DGeoObjects **ObjsUnion);
*/
};

///////////////////////////////////////////////////////////////////////////////
// 
#if !defined(_MODGEOMETRYMODE_DEFINED)
#define _MODGEOMETRYMODE_DEFINED
cpp_quote("#if !defined(_MODGEOMETRYMODE_DEFINED)")
cpp_quote("#define _MODGEOMETRYMODE_DEFINED")
// @doc MODGEOMETRYMODEENUMS 
// @enum MODGEOMETRYMODE | Der Mode, mit dem eine Objektgeometrie verändert werden soll.
// @xref <om DGeoObject.PutGeometry>
enum _tagMODGEOMETRYMODE {
	[helpstring("Objektgeometrie modifizieren (default)."), helpcontext(MODGEOMETRYMODE_enum)]
		MODGEOMETRY_ModObject = 0x04,	// @emem Objektgeometrie modifizieren (default).
	[helpstring("Objektgeometrie unabhängig vom Container des TRiAS® Dokumentes speichern."), helpcontext(MODGEOMETRYMODE_enum)]
		MODGEOMETRY_ForceGeometry = 0x20,	// @emem Objektgeometrie unabhängig vom umschließenden Recteck des <tr> Projektes speichern.
	[helpstring("Objekt zur aktuellen Anicht hinzufügen."), helpcontext(MODGEOMETRYMODE_enum)]
		MODGEOMETRY_AddToView = 0x40,	// @emem Objektklasse/Objekttyp dieses Objektes zur aktuellen Ansicht hinzufügen.
	[helpstring("Objektgeometrie nicht im Speicher halten (debug only)."), hidden, helpcontext(MODGEOMETRYMODE_enum)]
		MODGEOMETRY_NoMemoryObject = 0x4000,	// @emem Objektgeometrie nicht im Speicher halten.
};
cpp_quote("#endif // !defined(_MODGEOMETRYMODE_DEFINED)")
#endif // !defined(_MODGEOMETRYMODE_DEFINED)

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DGeoObject | Über das Interface <i DGeoObject> ...
// @base public | DTRiASBaseClass
// @supby <o GeoObject>
// @xref <o GeoObject>
// @group Eigenschaften von <i DGeoObject>
// @index | DGEOOBJECT & PROPERTY
// @group Methoden von <i DGeoObject>
// @index | DGEOOBJECT & METHOD
// @doc DGEOOBJECT
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3D4-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Ein TRiAS® GeoObjekt."),
	helpcontext(DGeoObject_int)
]  
interface DGeoObject : DTRiASBaseClass 
{
///////////////////////////////////////////////////////////////////////////////
// Objekttypen
#if !defined(_OBJECTTYPE_DEFINED)
#define _OBJECTTYPE_DEFINED
// @doc OBJECTTYPEENUMS 
// @enum OBJECTTYPE | Beschreibt den Objekttyp eines <o GeoObject> -Objektes. 
// @comm Der Objekttyp eines Objektes ist durch die Eigenschaft <op DGeoObject.ObjType>
// abfragbar.
// @comm Der Objekttyp eines Objektes leitet im allgemeinen aus dem Typ seiner Geometrie ab.
// @xref <o GeoObject>, <op DGeoObject.ObjType>
cpp_quote("#if !defined(_OBJECTTYPE_DEFINED)")
cpp_quote("#define _OBJECTTYPE_DEFINED")
	typedef [public, v1_enum, helpstring("Mögliche TRiAS® Objekttypen")] 
	enum _tagOBJECTTYPE {
		[helpstring("Punktobjekt."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_Point = 1,	// @emem Punktobjekt
		[helpstring("Linienobjekt."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_Line = 2,	// @emem Linienobjekt
		[helpstring("Flächenobjekt."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_Area = 4,	// @emem Flächenobjekt
		[helpstring("Kreisfläche."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_Circle = 4,
		[helpstring("Komplexobjekt."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_Complex = 16,	// @emem Komplexobjekt (hierarchisches Objekt)
		[helpstring("Textobjekt."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_Text = 8,	// @emem Textobjekt
		[helpstring("Unbekannter Objekttyp."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_Unknown = 0,	// @emem Unbekannter Objekttyp
		[helpstring("Alle bekannten Objekttypen."), helpcontext(OBJECTTYPE_enum)] 
			OBJECTTYPE_All = 0x1f,
	} OBJECTTYPE;
cpp_quote("#endif // _OBJECTTYPE_DEFINED")
#endif // _OBJECTTYPE_DEFINED

#if !defined(_TOPRELATION_DEFINED)
#define _TOPRELATION_DEFINED
// @doc TOPRELATIONENUMS 
// @enum TOPRELATION | Beschreibt mögliche topologische Relationen zwischen zwei Objekten.
// @comm <red Werden mehrere Werte dieses Typs miteinander kombiniert, dann ist darauf zu achten, daß die 
// als> <b veraltet> <red gekennzeichneten Werte nicht mit anderen kombiniert werden dürfen.>
// @comm Die topologischen Relationen <e .TOPRELATION_InnerObject>, <e .TOPRELATION_OuterObject>,
// <e .TOPRELATION_InnerOuterObject> und <e .TOPRELATION_Unknown> sollten nicht mehr verwendet werden,
// da diese Werte lediglich aus Kompatibilitätsgründen mit älteren <tr> Versionen unterstützt 
// werden. Es ist nicht garantiert, daß diese Werte in zukünftigen Versionen von <tr> implementiert
// sind. <nl>Die anderen topologischen Relationen entsprechen inhaltlich und namentlich den durch das
// OpenGIS Consortium standartisierten geometrischen Beziehungsklassen zwischen Geometrien verschiedener 
// Objekte.
// @xref <o GeoObject>, <om DGeoObject.TopRelation>, <om DGeoObject.GetTopRelationObjects>
cpp_quote("#if !defined(_TOPRELATION_DEFINED)")
cpp_quote("#define _TOPRELATION_DEFINED")
	typedef [public, v1_enum, helpstring("Mögliche topologische Relationen zwischen zwei Objekten.")]
	enum _tagTOPRELATION {
		[helpstring("Objekt liegt vollständig innerhalb des Bezugsobjektes (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Within = 0x0100,	// @emem Das untersuchte Objekt liegt vollständig innerhalb des Bezugsobjektes.
		[helpstring("Objekt überdeckt das Bezugsobjekt vollständig (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Contains = 0x0200,	// @emem Das untersuchte Objekt überdeckt das Bezugsobjekt vollständig.
		[helpstring("Objekt liegt teilweise innerhalb, teilweise außerhalb des Bezugsobjektes (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Overlaps = 0x0400,	// @emem Das untersuchte Objekt liegt teilweise innerhalb, teilweise 
				// außerhalb des Bezugsobjektes (nur für die Kombinationen Linie/Linie und Fläche/Fläche anwendbar,
				// der Durchschnitt beider Objekte muß die gleiche Dimension wie die Vergleichsobjekte haben).
		[helpstring("Objekt liegt teilweise innerhalb, teilweise außerhalb des Bezugsobjektes (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Crosses = 0x0800,	// @emem Das untersuchte Objekt liegt teilweise innerhalb, teilweise 
				// außerhalb des Bezugsobjektes (nur für die Kombinationen Linie/Linie, Linie/Fläche und
				// Fläche/Linie anwendbar, der Durchschnitt beider Objekte muß eine geringere Dimension 
				// als die größere der beiden Dimensionen der Vergleichsobjekte haben).
		[helpstring("Objekt berührt das Bezugsobjekt von außen (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Touches = 0x1000,	// @emem Das untersuchte Objekt berührt das Bezugsobjekt von außen.
		[helpstring("Objekt ist vollständig identisch mit dem Bezugsobjekt (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Equal = 0x2000,	// @emem Das untersuchte Objekt ist vollständig identisch mit dem Bezugsobjekt.
		[helpstring("Objekt besitzt keinerlei geometrische Gemeinsamkeiten mit dem Bezugsobjekt (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Disjoint = 0x4000,	// @emem Das untersuchte Objekt besitzt keinerlei geometrische Gemeinsamkeiten 
				// mit dem Bezugsobjekt.
		[helpstring("Objekt besitzt mindestens einen Punkt mit dem Bezugsobjekt gemeinsam (OGC)."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Intersects = 0x3F00,	// @emem Das untersuchte Objekt besitzt mindestens einen Punkt mit dem Bezugsobjekt gemeinsam.
				// (not <e .TOPRELATION_Disjoint>)
		[helpstring("Topologische Relation ist nicht bestimmbar."), helpcontext(TOPRELATION_enum)]
			TOPRELATION_Unclear = 0x8000,	// @emem Die topologische Relation nicht bestimmbar, z. B. durch vorzeitiges 
				// Ende bei falschen Parametern, unzureichendem dynamischen Speicher oder Abbruch durch den Anwender

		[helpstring("Objekt liegt vollständig innerhalb des Bezugsobjektes."), helpcontext(TOPRELATION_enum), restricted, hidden]
			TOPRELATION_InnerObject = 0,	// @emem (<b veraltet>) Das untersuchte Objekt liegt vollständig innerhalb des Bezugsobjektes
		[helpstring("Objekt liegt vollständig außerhalb des Bezugsobjektes."), helpcontext(TOPRELATION_enum), restricted, hidden]
			TOPRELATION_OuterObject = 1,	// @emem (<b veraltet>) Das untersuchte Objekt liegt vollständig außerhalb des Bezugsobjektes
		[helpstring("Objekt liegt sowohl außerhalb als auch innerhalb des Bezugsobjektes."), helpcontext(TOPRELATION_enum), restricted, hidden]
			TOPRELATION_InnerOuterObject = 2,	// @emem (<b veraltet>) Das untersuchte Objekt liegt sowohl außerhalb als auch innerhalb des Bezugsobjektes
		[helpstring("Die Lage des Objektes zu Bezugsobjekt ist unbestimmt."), helpcontext(TOPRELATION_enum), restricted, hidden]
			TOPRELATION_Unknown = 3,	// @emem (<b veraltet>) Die Lage des untersuchten Objektes zum Bezugsobjekt ist unbestimmt.
	} TOPRELATION;
cpp_quote("#endif // _TOPRELATION_DEFINED")
#endif // _TOPRELATION_DEFINED

#if !defined(_OBJOPERMODE_DEFINED)
#define _OBJOPERMODE_DEFINED
// @doc OBJOPERMODEENUMS 
// @enum OBJOPERMODE | Beschreibt mögliche Geometrieoperationen, die beim Verschnitt von Objekten
// angewendet werden können.
// @comm Die Werte dieses Types können beliebig miteinander kombiniert werden.
// @xref <o GeoObject>, <om DGeoObject.GetIntersectObjects>, <om DGeoObject.GetIntersectObjectsCollection>
cpp_quote("#if !defined(_OBJOPERMODE_DEFINED)")
cpp_quote("#define _OBJOPERMODE_DEFINED")
	typedef [public, v1_enum, helpstring("Mögliche Geometrieoperationen.")]
	enum _tagOBJOPERMODE {
		[helpstring("Schnittobjekte liegen innerhalb."), helpcontext(OBJOPERMODE_enum)]
			OBJOPERMODE_InnerParts = 0x01,	// @emem Die beim Verschnitt erzeugten Objekte liegen innerhalb der Geometrie
				// des schneidenden Objektes.
		[helpstring("Schnittobjekte liegen außerhalb."), helpcontext(OBJOPERMODE_enum)]
			OBJOPERMODE_OuterParts = 0x02,	// @emem Die beim Verschnitt erzeugten Objekte liegen außerhalb der Geometrie
				// des schneidenden Objektes.
		[helpstring("Schnittobjekte liegen auf der Kontur."), helpcontext(OBJOPERMODE_enum)]
			OBJOPERMODE_ContourParts = 0x04,	// @emem Die beim Verschnitt erzeugten Objekte liegen auf der Kontur der Geometrie
				// des schneidenden Objektes.
	} OBJOPERMODE;
cpp_quote("#endif // _OBJOPERMODE_DEFINED")
#endif // _OBJOPERMODE_DEFINED

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Properties | Die Eigenschaft <op .Properties>
	// ...
	// @comm Die Eigenschaft <op .Properties> ist zur Zeit nicht implementiert.
	// @xref <i DGeoObject>
	[id(9), propget] HRESULT Properties ([out, retval]DTRiASProperties **Props);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | CreateProperty | Die Methode <om .CreateProperty>
	// ...
	// @parm VARIANT | PropName | Der Parameter <p PropName> ...
	// @parm VARIANT | PropType | Der Parameter <p PropType> ...
	// @parm VARIANT | Value | Der Parameter <p Value> ...
	// @comm Die Methode <om .CreateProperty> ist zur Zeit nicht implementiert.
	// @xref <i DGeoObject>
	[id(10)] HRESULT CreateProperty ([in, optional]VARIANT PropName, [in, optional]VARIANT PropType, 
		[in, optional]VARIANT Value, [out, retval]DTRiASProperty **Prop);
		
	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Value | Die Eigenschaft <op .Value>
	// Liefert die ObjektNummer dieses Objektes.
	// @xref <i DGeoObject>
	[	
		id(DISPID_VALUE), 
		propget, 
		helpstring("Liefert die ObjektNummer dieses Objektes."),
		helpcontext(DGeoObject_Value_prop)
	]
	HRESULT Value ([out, retval]long *Value);
		
	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Name | Die Eigenschaft <op .Name>
	// Liefert den Objektnamen dieses Objektes.
	// @xref <i DGeoObject>
	[
		id(3), 
		propget, 
		helpstring("Liefert den Objektnamen dieses Objektes."),
		helpcontext(DGeoObject_Name_prop)
	]
	HRESULT Name ([out, retval]BSTR *Name);
	[
		id(3), 
		propput, 
		helpstring("Modifiziert den Objektnamen dieses Objektes."),
		helpcontext(DGeoObject_Name_prop)
	]
	HRESULT Name ([in]BSTR Name);
 
	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | ObjType | Die Eigenschaft <op .ObjType>
	// liefert den Typ dieses Objektes (readonly).
	// @xref <i DGeoObject>
 	[
		id(701), 
		propget, 
		helpstring("Liefert den Typ dieses Objektes."),
		helpcontext(DGeoObject_ObjType_prop)
	]
	HRESULT ObjType ([out, retval]OBJECTTYPE *ObjType);		// Typ des Objektes

	// @doc DGEOOBJECT | PROPERTY
	// @property <o GeoClass> * | DGeoObject | ObjClass | Die Eigenschaft <op .ObjClass>
	// liefert die Objektklasse dieses Objektes (readonly).
	// @comm Die Eigenschaft <op .ObjClass> kann nicht direkt modifiziert werden.
	// @comm Die Objektklasse eines Objektes kann durch Hinzufügen des Objektes zu der neuen 
	// Objektklasse verändert werden (<om DGeoClass.GetObject> mit dem Parameterwert 
	// <p Mode> = <e GEOOBJECTMODE.GEOOBJECTMODE_Add>).
	// @xref <i DGeoObject>, <t GEOOBJECTMODE>, <om DGeoClass.GetObject>
 	[
		id(702), 
		propget, 
		helpstring("Liefert die Objektklasse dieses Objektes."),
		helpcontext(DGeoObject_ObjClass_prop)
	]
	HRESULT ObjClass ([out, retval]DGeoClass **Cls);	// Klasse des Objektes

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | ObjDistance | Die Methode <om .ObjDistance>
	// Berechnet Abstand zum gegebenen Objekt.
	// @parm UserDefined | GeoObj | Der Parameter <p GeoObj> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @parm VARIANT | MinMax | Der (optionale) Parameter <p MinMax> ...
	// @xref <i DGeoObject>
	[
		id(703), 
		helpstring("Berechnet Abstand zum gegebenen Objekt."),
		helpcontext(DGeoObject_ObjDistance_meth)
	]
	HRESULT ObjDistance ([in]DGeoObject *GeoObj, 
			[in, optional]VARIANT Mode, [in, optional]VARIANT MinMax,
			[out, retval]double *Dist);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | ClassDistance | Die Methode <om .ClassDistance>
	// Berechnet die Abstände zum den Objekten der gegebenen Objektklasse.
	// @parm UserDefined | Class | Der Parameter <p Class> ...
	// @parm VARIANT | GeoObj | Der (optionale) Parameter <p GeoObj> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @parm VARIANT | MinMax | Der (optionale) Parameter <p MinMax> ...
	// @xref <i DGeoObject>
	[
		id(704), 
		helpstring("Berechnet die Abstände zum den Objekten der gegebenen Objektklasse."),
		helpcontext(DGeoObject_ClassDistance_meth)
	]
	HRESULT ClassDistance ([in]DGeoClass *Class, [out, optional]VARIANT *GeoObj, 
			[in, optional]VARIANT Mode, [in, optional]VARIANT MinMax, 
			[out, retval]double *Dist);
	
	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetGeometryPt | Die Methode <om .GetGeometryPt>
	// Liefert die Geometrie (den Schwerpunkt) des Objektes.
	// @parm double | X | Der Parameter <p X> ...
	// @parm double | Y | Der Parameter <p Y> ...
	// @xref <i DGeoObject>
	[
		id(705), 
		helpstring("Liefert die Geometrie (den Schwerpunkt) des Objektes."),
		helpcontext(DGeoObject_GetGeometryPt_meth)
	]
	HRESULT GetGeometryPt ([out]double *X, [out]double *Y, [out, retval]OBJECTTYPE *ObjType);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetGeometry | Die Methode <om .GetGeometry>
	// Liefert die Geometrie des Objektes.
	// @parm long | Cnt | Der Parameter <p Cnt> ...
	// @parm VARIANT | X | Der (optionale) Parameter <p X> ...
	// @parm VARIANT | Y | Der (optionale) Parameter <p Y> ...
	// @parm VARIANT | ContCnt | Der (optionale) Parameter <p ContCnt> ...
	// @parm VARIANT | Conture | Der (optionale) Parameter <p Conture> ...
	// @xref <i DGeoObject>
	[
		id(706), 
		helpstring("Liefert die Geometrie des Objektes."),
		helpcontext(DGeoObject_GetGeometry_meth)
	]
	HRESULT GetGeometry ([out]long *Cnt, 
			[out, optional]VARIANT *X, [out, optional]VARIANT *Y,
			[out, optional]VARIANT *ContCnt, [out, optional]VARIANT *Conture,
			[out, retval]OBJECTTYPE *ObjType);
	
	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | PutGeometryPt | Die Methode <om .PutGeometryPt>
	// Modifiziert die Geometrie (den Schwerpunkt) des Objektes.
	// @parm UserDefined | ObjType | Der Parameter <p ObjType> ...
	// @parm double | X | Der Parameter <p X> ...
	// @parm double | Y | Der Parameter <p Y> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoObject>
	[
		id(707), 
		helpstring("Modifiziert die Geometrie (den Schwerpunkt) des Objektes."),
		helpcontext(DGeoObject_PutGeometryPt_meth)
	]
	HRESULT PutGeometryPt ([in]OBJECTTYPE ObjType, 
			[in]double X, [in]double Y, [in, optional]VARIANT Mode, [out, retval]VARIANT_BOOL *Result);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | PutGeometry | Die Methode <om .PutGeometry>
	// modifiziert die Geometrie des Objektes.
	// @parm <t OBJECTTYPE> | ObjType | Der Parameter <p ObjType> gibt den Objekttyp vor, der der
	// übergebenen Geometrie zugrunde liegt.
	// @parm VARIANT | X | Der Parameter <p X> enthält die X-Koordinaten (Rechtswerte) der Stützpunkte
	// der neu zu speichernden Geometrie.
	// @parm VARIANT | Y | Der Parameter <p Y> enthält die Y-Koordinaten (Hochwerte) der Stützpunkte
	// der neu zu speichernden Geometrie.
	// @parm VARIANT | Conture | Der (optionale) Parameter <p Conture> enthält die Startindizies der
	// Konturen einer Fläche innerhalb der Koordinatenfelder (<p X> bzw. <p Y>). Dieser Parameter muß 
	// lediglich für Flächengeometrien gegeben sein, wenn die übergebene Geometrie zumindest eine Insel
	// enthält.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> enthält Werte vom Typ <t MODGEOMETRYMODE>
	// enthalten, ansonsten tritt ein Fehler auf. 
	// @comm Der Typ des Objektes darf durch die Methode <om .PutGeometry> nicht modifiziert werden.
	// Wird die Methode <om .PutGeometry> für ein neu erzeugtes Objekt erstmalig gerufen, so wird 
	// dadurch gleichzeitig der Objekttyp dieses Objektes festgelegt.
	// @xref <i DGeoObject>, <t OBJECTTYPE>
	[
		id(708), 
		helpstring("Modifiziert die Geometrie des Objektes."),
		helpcontext(DGeoObject_PutGeometry_meth)
	]
	HRESULT PutGeometry ([in]OBJECTTYPE ObjType, [in]VARIANT X, [in]VARIANT Y, 
			[in, optional]VARIANT Conture, [in, optional]VARIANT Mode, [out, retval]VARIANT_BOOL *Result);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetText | Die Methode <om .GetText>
	// Liefert den Text eines Text-Objektes.
	// @xref <i DGeoObject>
	[
		id(709), 
		helpstring("Liefert den Text eines Text-Objektes."),
		helpcontext(DGeoObject_GetText_meth)
	]
	HRESULT GetText ([out, retval]BSTR *Text);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | PutText | Die Methode <om .PutText>
	// Modifiziert den Text für ein Text-Objekt.
	// @parm BSTR | Text | Der Parameter <p Text> ...
	// @xref <i DGeoObject>
	[
		id(710), 
		helpstring("Modifiziert den Text für ein Text-Objekt."),
		helpcontext(DGeoObject_PutText_meth)
	]
	HRESULT PutText ([in]BSTR Text);
 
	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetFeatures | Die Methode <om .GetFeatures>
	// Liefert die Liste von Objekteigenschaften dieses Objektes.
	// @parm VARIANT | __MIDL_0011 | Der (optionale) Parameter <p __MIDL_0011> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoObject>
	[
		id(800), 
		helpstring("Liefert die Liste von Objekteigenschaften dieses Objektes."),
		helpcontext(DGeoObject_GetFeatures_meth)
	]
	HRESULT GetFeatures ([in, optional]VARIANT , [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeatures **Feats);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetFeature | Die Methode <om .GetFeature>
	// Liefert eine Objekteigenschaft dieses Objektes.
	// @parm VARIANT | Feature | Der Parameter <p Feature> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @parm VARIANT | Props | Der (optionale) Parameter <p Props> ...
	// @xref <i DGeoObject>
	[
		id(900), 
		helpstring("Liefert eine Objekteigenschaft dieses Objektes."),
		helpcontext(DGeoObject_GetFeature_meth)
	]
	HRESULT GetFeature ([in]VARIANT Feature, [in, optional]VARIANT Mode, 
			[in, optional]VARIANT Props, [out, retval]DGeoFeature **Feat);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | RePaint | Die Methode <om .RePaint>
	// Objekt neu zeichnen.
	// @parm VARIANT | Complete | Der (optionale) Parameter <p Complete> ...
	// @xref <i DGeoObject>
	[
		id(711), 
		helpstring("Objekt neu zeichnen."),
		helpcontext(DGeoObject_RePaint_meth)
	]
	HRESULT RePaint ([in, optional]VARIANT Complete);

	// @doc DGEOOBJECT | METHOD
	// @method <t TOPRELATION> | DGeoObject | TopRelation | Die Methode <om .TopRelation>
	// liefert die topologische Relationen, welche dieses Objekt zu einem anderen Objekt besitzt.
	// @parm <o GeoObject> | GeoObj | Der Parameter <p GeoObj> enthält das Objekt, zu welchem die
	// topologische Relation bestimmt werden soll.
	// @rdesc Der Rückgabewert enthält die topologische Relation deren Werte vom Typ <t TOPRELATION>
	// sein können. Wenn ein Fehler auftritt, so wird er Wert <e TOPRELATION.TOPRELATION_Unclear> 
	// geliefert.
	// @xref <i DGeoObject>, <o GeoObject>, <t TOPRELATION>
	[
		id(712), 
		helpstring("Topologische Relationen zu einem anderen Objekt bestimmen."),
		helpcontext(DGeoObject_TopRelation_meth)
	]
	HRESULT TopRelation ([in]DGeoObject *GeoObj, [out, retval]TOPRELATION *RelType);

	// @doc DGEOOBJECT | METHOD
	// @method <o GeoObjects> | DGeoObject | GetTopRelationObjects | Die Methode <om .GetTopRelationObjects>
	// liefert sämtliche Objekte des aktuellen Projektes, die eine gegebene topologische Relation zu 
	// diesem Objekt haben.
	// @parm <t TOPRELATION> | RelType | Der Parameter <p RelType> gibt die topologische Relation vor,
	// welche bei der Bestimmung der Resultatsmenge angewendet werden soll. Der Wert dieses Parameters 
	// kann eine Kombination der Werte des Typs <t TOPRELATION> sein.
	// @rdesc Der Rückgabewert ist eine Datenobjektsammlung vom Typ <o GeoObjects>, die sämtliche
	// Objekte enthält, die dem gegebenen Kriterium entsprechen.
	// @xref <i DGeoObject>, <o GeoObjects>, <t TOPRELATION>
	[
		id(713), 
		helpstring("Alle Objekte liefern, die eine topologische Relation zu uns haben."),
		helpcontext(DGeoObject_GetTopRelationObjects_meth)
	]
	HRESULT GetTopRelationObjects ([in]TOPRELATION RelType, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method <o GeoObjects> * | DGeoObject | GetBufferObjects | Die Methode <om .GetBufferObjects>
	// erzeugt Pufferzonen für dieses Objekt.
	// @parm double | Width | Der Parameter <p Width> ...
	// @parm VARIANT | Count | Der (optionale) Parameter <p Count> ...
	// @parm VARIANT | FullCircle | Der (optionale) Parameter <p FullCircle> ...
	// @parm VARIANT | Class | Der (optionale) Parameter <p Class> ...
	// @rdesc Der Rückgabewert enthält eine Datenobjektsammlung mit allen neu erzeugten 
	// Pufferzonen.
	// @xref <i DGeoObject>, <o GeoObjects> 
	[
		id(714), 
		helpstring("Buffer für dieses Objekt generieren."),
		helpcontext(DGeoObject_GetBufferObjects_meth)
	]
	HRESULT GetBufferObjects ([in]double Width, 
			[in, optional]VARIANT Count, [in, optional]VARIANT FullCircle, 
			[in, optional]VARIANT Class, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method <o GeoObjects> * | DGeoObject | GetCircleBufferObjects | Die Methode <om .GetCircleBufferObjects>
	// erzeugt kreisförmige Pufferzonen für dieses Objekt.
	// @parm double | Width | Der Parameter <p dblWidth> ...
	// @parm VARIANT | Count | Der (optionale) Parameter <p Count> ...
	// @parm VARIANT | FullCircle | Der (optionale) Parameter <p FullCircle> ...
	// @parm VARIANT | Class | Der (optionale) Parameter <p Class> ...
	// @rdesc Der Rückgabewert enthält eine Datenobjektsammlung mit allen neu erzeugten 
	// Pufferzonen.
	// @xref <i DGeoObject>, <o GeoObjects> 
	[
		id(715), 
		helpstring("Kreisförmige Buffer für dieses Objekt generieren."),
		helpcontext(DGeoObject_GetCircleBufferObjects_meth)
	]
	HRESULT GetCircleBufferObjects ([in]double Width, 
			[in, optional]VARIANT Count, [in, optional]VARIANT FullCircle, 
			[in, optional]VARIANT Class, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method <o GeoObjects> | DGeoObject | GetIntersectObjects | Die Methode <om .GetIntersectObjects>
	// verwendet die Geometrie dieses Objektes als 'Messer' um die Geometrie des übergebenen Objektes
	// zu zerschneiden.
	// @parm <o GeoObject> | Obj | Der Parameter <p Obj> enthält das zu zerschneidende Objekt.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> enthält Werte des Types <t OBJOPERMODE>, die
	// festlegen, welche Objekte als Resultat dieser Methode erzeugt werden sollen.
	// @rvalue <o GeoObjects>  | Die Methode <om .GetIntersectObjects> liefert eine Sammlung aller Objekte, die im Resultat der
	// Schnittoperation entsprechend dem Parameter <p Mode> erzeugt worden sind.
	// @xref <i DGeoObject>, <t OBJOPERMODE>
	[
		id(716), 
		helpstring("Objektverschnitt: Dieses Objekt als schneidendes verwenden."),
		helpcontext(DGeoObject_GetIntersectObjects_meth)
	]
	HRESULT GetIntersectObjects ([in]DGeoObject *GeoObj, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method <o GeoObjects> | DGeoObject | GetIntersectObjectsCollection | Die Methode <om .GetIntersectObjectsCollection>
	// verwendet die Geometrie dieses Objektes als 'Messer' um die Geometrie sämtlicher übergebenen Objekte
	// zu zerschneiden.
	// @parm <o GeoObjects> | Objects | Der Parameter <p Objects> enthält die Sammlung sämtlicher zu verarbeitender
	// Objekte.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> enthält Werte des Types <t OBJOPERMODE>, die
	// festlegen, welche Objekte als Resultat dieser Methode erzeugt werden sollen.
	// @rvalue <o GeoObjects> | Die Methode <om .GetIntersectObjects> liefert eine Sammlung aller Objekte, die im Resultat der
	// Schnittoperation entsprechend dem Parameter <p Mode> erzeugt worden sind.
	// @xref <i DGeoObject>, <t OBJOPERMODE>
	[
		id(717), 
		helpstring("Objektverschnitt: Dieses Objekt als schneidendes für die Objektmenge verwenden."),
		helpcontext(DGeoObject_GetIntersectObjectsCollection_meth)
	]
	HRESULT GetIntersectObjectsCollection ([in]DGeoObjects *Objects, 
			[in, optional]VARIANT Mode, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method <o GeoObjects> | DGeoObject | GetIntersectObjectsClass | Die Methode <om .GetIntersectObjectsClass>
	// verwendet die Geometrie dieses Objektes als 'Messer' um die Geometrie sämtlicher Objekte der
	// übergebenen Objektklasse zu zerschneiden.
	// @parm <o GeoClass> | Class | Der Parameter <p Class> enthält die Objektklasse, deren sämtliche
	// Objekte verschnitten werden sollen.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> enthält Werte des Types <t OBJOPERMODE>, die
	// festlegen, welche Objekte als Resultat dieser Methode erzeugt werden sollen.
	// @rvalue <o GeoObjects> | Die Methode <om .GetIntersectObjects> liefert eine Sammlung aller Objekte, die im Resultat der
	// Schnittoperation entsprechend dem Parameter <p Mode> erzeugt worden sind.
	// @xref <i DGeoObject>
	[
		id(718), 
		helpstring("Objektverschnitt: Dieses Objekt als schneidendes für alle Objekte einer Objektklasse verwenden."),
		helpcontext(DGeoObject_GetIntersectObjectsClass_meth)
	]
	HRESULT GetIntersectObjectsClass ([in]DGeoClass *Class, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GeometryIntersection | Die Methode <om .GeometryIntersection>
	// Durchschnitt dieser Fläche mit der gegebenen.
	// @parm UserDefined | GeoObj | Der Parameter <p GeoObj> ...
	// @parm VARIANT | Class | Der (optionale) Parameter <p Class> ...
	// @xref <i DGeoObject>
	[
		id(719), 
		helpstring("Durchschnitt dieser Fläche mit der gegebenen."),
		helpcontext(DGeoObject_GeometryIntersection_meth)
	]
	HRESULT GeometryIntersection ([in]DGeoObject *GeoObj, [in, optional]VARIANT Class, 
			[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GeometryUnion | Die Methode <om .GeometryUnion>
	// Vereinigung dieser Fläche mit der gegebenen.
	// @parm UserDefined | GeoObj | Der Parameter <p GeoObj> ...
	// @parm VARIANT | Class | Der (optionale) Parameter <p Class> ...
	// @xref <i DGeoObject>
	[
		id(720), 
		helpstring("Vereinigung dieser Fläche mit der gegebenen."),
		helpcontext(DGeoObject_GeometryUnion_meth)
	]
	HRESULT GeometryUnion ([in]DGeoObject *GeoObj, [in, optional]VARIANT Class, 
			[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetVisInfo | Die Methode <om .GetVisInfo>
	// Visualisierung dieses Objektes in einer Ansicht.
	// @parm VARIANT | View | Der (optionale) Parameter <p View> ...
	// @xref <i DGeoObject>
	[
		id(721), 
		helpstring("Visualisierung dieses Objektes in einer Ansicht."),
		helpcontext(DGeoObject_GetVisInfo_meth)
	]
	HRESULT GetVisInfo ([in, optional]VARIANT View, [out, retval]DVisInfo **VisInfo);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | SetVisInfo | Die Methode <om .SetVisInfo>
	// Modifizieren der Visualisierung dieses Objektes in einer Ansicht.
	// @parm UserDefined | VisInfo | Der Parameter <p VisInfo> ...
	// @parm VARIANT | View | Der (optionale) Parameter <p View> ...
	// @xref <i DGeoObject>
	[
		id(722), 
		helpstring("Modifizieren der Visualisierung dieses Objektes in einer Ansicht."),
		helpcontext(DGeoObject_SetVisInfo_meth)
	]
	HRESULT SetVisInfo ([in]DVisInfo *VisInfo, [in, optional]VARIANT View);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetCommonContourObjects | Die Methode <om .GetCommonContourObjects>
	// Liefert Objekte mit gemeinsamen Konturabschnitten mit diesem Objekt.
	// @parm UserDefined | Objects | Der Parameter <p Objects> ...
	// @parm VARIANT | Class | Der (optionale) Parameter <p Class> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoObject>
	[
		id(723), 
		helpstring("Liefert Objekte mit gemeinsamen Konturabschnitten mit diesem Objekt."),
		helpcontext(DGeoObject_GetCommonContourObjects_meth)
	]
	HRESULT GetCommonContourObjects ([in]DGeoObjects *Objects,
			[in, optional]VARIANT Class, [in, optional]VARIANT Mode,
			[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method <t OBJECTTYPE> | DGeoObject | GetGeometryRect | Die Methode <om .GetGeometryRect>
	// liefert die Koordinaten des umschließenden Rechtecks des Objektes.
	// @parm double | XMin | Der Parameter <p XMin> enthält nach der Abarbeitung den minimalen 
	// X-Wert (Rechtswert) des umschließenden Rechteckes des Objektes.
	// @parm double | YMin | Der Parameter <p YMin> enthält nach der Abarbeitung den minimalen 
	// Y-Wert (Hochwert) des umschließenden Rechteckes des Objektes.
	// @parm double | XMax | Der Parameter <p XMax> enthält nach der Abarbeitung den maximalen 
	// X-Wert (Rechtswert) des umschließenden Rechteckes des Objektes.
	// @parm double | YMax | Der Parameter <p YMax> enthält nach der Abarbeitung den maximalen 
	// Y-Wert (Hochwert) des umschließenden Rechteckes des Objektes.
	// @rvalue <t OBJECTTYPE> | Die Methode <om .GetGeometryRect> liefert den Objekttyp (<t OBJECTTYPE>) dieses 
	// Objektes zurück.
	// @xref <i DGeoObject>, <t OBJECTTYPE>
	[
		id(724), 
		helpstring("Liefert umschließendes Rechteck des Objektes"),
		helpcontext(DGeoObject_GetGeometryRect_meth)
	]
	HRESULT GetGeometryRect ([out]double *XMin, [out]double *YMin,
			[out]double *XMax, [out]double *YMax, [out, retval]OBJECTTYPE *ObjType);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Selected | Die Eigenschaft <op .Selected>
	// Liefert, ob dieses Objekt im GeoObjectWin selektiert ist.
	// @parm VARIANT | ObjWin | Der (optionale) Parameter <p ObjWin> ...
	// @xref <i DGeoObject>
	[
		id(725), 
		propget, 
		helpstring("Liefert, ob dieses Objekt im GeoObjectWin selektiert ist."),
		helpcontext(DGeoObject_Selected_prop)
	]
	HRESULT Selected ([in, optional] VARIANT ObjWin, [out, retval] VARIANT_BOOL *IsSelected);
	[
		id(725), 
		propput, 
		helpstring("Legt fest, ob dieses Objekt im GeoObjectWin selektiert ist."),
		helpcontext(DGeoObject_Selected_prop)
	]
	HRESULT Selected ([in, optional] VARIANT ObjWin, [in] VARIANT_BOOL IsSelected);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Activated | Die Eigenschaft <op .Activated>
	// Liefert, ob dieses Objekt im GeoObjectWin aktiviert ist
	// @xref <i DGeoObject>
	[
		id(726), 
		propget, 
		helpstring("Liefert, ob dieses Objekt im GeoObjectWin aktiviert ist."),
		helpcontext(DGeoObject_Activated_prop)
	]
	HRESULT Activated ([in, optional] VARIANT ObjWin, [out, retval] VARIANT_BOOL *IsActivated);
	[
		id(726), 
		propput, 
		helpstring("Legt fest, ob dieses Objekt im GeoObjectWin aktiviert ist."),
		helpcontext(DGeoObject_Activated_prop)
	]
	HRESULT Activated ([in, optional] VARIANT ObjWin, [in] VARIANT_BOOL IsActivated);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | AddFeature | Die Methode <om .AddFeature>
	// Erzeugt eine neue Eigenschaft für dieses Objekt
	// @xref <i DGeoObject>
	[
		id(901), 
		helpstring("Erzeugt eine neue Eigenschaft für dieses Objekt."),
		helpcontext(DGeoObject_AddFeature_meth)
	]
	HRESULT AddFeature ([in]VARIANT Feature, [in, optional]VARIANT Props, 
			[in, optional] VARIANT OptData, [out, retval]DGeoFeature **Feat);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | RemoveFeature | Die Methode <om .RemoveFeature>
	// Löscht eine Eigenschaft dieses Objektes
	// @xref <i DGeoObject>
	[
		id(902), 
		helpstring("Löscht eine Eigenschaft dieses Objektes."),
		helpcontext(DGeoObject_RemoveFeature_meth)
	]
	HRESULT RemoveFeature ([in]VARIANT Feature);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Feature | Die Eigenschaft <op .Feature>
	// Liefert den Wert einer Objekteigenschaft dieses Objektes
	// @xref <i DGeoObject>
	[
		id(727), 
		propget,
		helpstring("Liefert den Wert einer Objekteigenschaft dieses Objektes."),
		helpcontext(DGeoObject_Feature_prop)
	]
	HRESULT Feature ([in] BSTR Name, [out, retval] VARIANT *Value);
	[
		id(727), 
		propput,
		helpstring("Setzt den Wert einer Objekteigenschaft dieses Objektes."),
		helpcontext(DGeoObject_Feature_prop)
	]
	HRESULT Feature ([in] BSTR Name, [in] VARIANT Value);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | ResetVisInfo | Die Methode <om .ResetVisInfo>
	// Rücksetzen der Visualisierung dieses Objektes in einer Ansicht
	// @xref <i DGeoObject>
	[
		id(728), 
		helpstring("Rücksetzen der Visualisierung dieses Objektes in einer Ansicht."),
		helpcontext(DGeoObject_ResetVisInfo_meth)
	]
	HRESULT ResetVisInfo ([in, optional]VARIANT View);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | Hilight | Die Methode <om .Hilight>
	// Legt fest, das dieses Objekt im Hauptfenster gekennzeichnet ist
	// @xref <i DGeoObject>
	[
		id(729), 
		helpstring("Legt fest, das dieses Objekt im Hauptfenster gekennzeichnet ist."),
		helpcontext(DGeoObject_Hilight_meth)
	]
	HRESULT Hilight ([in] TRIASCOLOR crAct);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | UnHilight | Die Methode <om .UnHilight>
	// Legt fest, das dieses Objekt im Hauptfenster nicht mehr gekennzeichnet ist
	// @xref <i DGeoObject>
	[
		id(730), 
		helpstring("Legt fest, das dieses Objekt im Hauptfenster nicht mehr gekennzeichnet ist."),
		helpcontext(DGeoObject_UnHilight_meth)
	]
	HRESULT UnHilight ();

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | ShiftGeometrySegment | Die Methode <om .ShiftGeometrySegment>
	// Verschiebt eine Teilgeometrie des Objektes bis selbige den gegebenen Punkt schneidet
	// @xref <i DGeoObject>
	[
		id(731),
		helpstring("Verschiebt eine Teilgeometrie des Objektes bis selbige den gegebenen Punkt schneidet."),
		helpcontext(DGeoObject_ShiftGeometrySegment_meth)
	]
	HRESULT ShiftGeometrySegment ([in]double DestX, [in]double DestY, 
		[in, optional] VARIANT TargetBeginX, [in, optional] VARIANT TargetBeginY,
		[in, optional] VARIANT TargetEndX, [in, optional] VARIANT TargetEndY,
		[in, optional] VARIANT MoveDir, 
		[in, optional] VARIANT ContinueBegin, [in, optional] VARIANT ContinueEnd, 
		[in, optional] VARIANT Eps,
		[in, optional] VARIANT ClipXMin, [in, optional] VARIANT ClipYMin, 
		[in, optional] VARIANT ClipXMax, [in, optional] VARIANT ClipYMax, 
		[out, retval] DGeoObject **NewObj);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Guid | Die Eigenschaft <op .Guid>
	// Liefert den 'unique ident (GUID)' dieses Objektes
	// @xref <i DGeoObject>
	[
		id(732), 
		propget,
		helpstring("Liefert den 'unique ident (GUID)' dieses Objektes."),
		helpcontext(DGeoObject_Guid_prop)
	]
	HRESULT Guid ([out, retval] BSTR *Ident);
	[
		id(732), 
		propput,
		restricted,
		helpstring("Setzt den 'unique ident (GUID)' dieses Objektes."),
		helpcontext(DGeoObject_Guid_prop)
	]
	HRESULT Guid ([in] BSTR Ident);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GeometryXOR | Die Methode <om .GeometryXOR>
	// Exklusives Oder dieser Fläche mit den gegebenen
	// @xref <i DGeoObject>
	[
		id(733), 
		helpstring("Exklusives Oder dieser Fläche mit den gegebenen."),
		helpcontext(DGeoObject_GeometryXOR_meth)
	]
	HRESULT GeometryXOR ([in]DGeoObjects *Objects, [out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | MakeRectangular | Die Methode <om .MakeRectangular>
	// Rechtwinkligkeit für ein Objekt herstellen
	// @xref <i DGeoObject>
	[
		id(734), 
		helpstring("Rechtwinkligkeit für ein Objekt herstellen."),
		helpcontext(DGeoObject_MakeRectangular_meth)
	]
	HRESULT MakeRectangular ([in, optional] VARIANT vRefLine, 
		[in, optional] VARIANT vEps90, 
		[in, optional] VARIANT vEps180, 
		[in, optional] VARIANT vEpsCom, 
		[in, optional] VARIANT vEnumCommon, 
		[out, retval]DGeoObjects **Objs);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetRelatedObject | Die Methode <om .GetRelatedObject>
	// Liefert ein abhängiges (Text-)Objekt
	// @xref <i DGeoObject>
	[
		id(735), 
		helpstring("Liefert ein abhängiges (Text-)Objekt."),
		helpcontext(DGeoObject_GetRelatedObject_meth)
	]
	HRESULT GetRelatedObject ([out, retval]DGeoObject **Obj);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | CreateObjectRelation | Die Methode <om .CreateObjectRelation>
	// Erzeugt eine Relation zu einem (Text-)Objekt
	// @xref <i DGeoObject>
	[
		id(736), 
		helpstring("Erzeugt eine Relation zu einem (Text-)Objekt."),
		helpcontext(DGeoObject_CreateObjectRelation_meth)
	]
	HRESULT CreateObjectRelation ([in]DGeoObject *ObjIn);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | RemoveObjectRelation | Die Eigenschaft <om .RemoveObjectRelation>
	// Löscht eine Relation zu einem abhängiges (Text-)Objekt
	// @xref <i DGeoObject>
	[
		id(737), 
		helpstring("Löscht eine Relation zu einem abhängiges (Text-)Objekt."),
		helpcontext(DGeoObject_RemoveObjectRelation_meth)
	]
	HRESULT RemoveObjectRelation([out, retval]DGeoObject **Obj);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | AnalyzeGeometry | Die Methode <om .AnalyzeGeometry>
	// Prüft die Geometrie des Objektes auf Geometriefehler
	// @xref <i DGeoObject>
	[
		id(738), 
		helpstring("Prüft die Geometrie des Objektes auf Geometriefehler."),
		helpcontext(DGeoObject_AnalyzeGeometry_meth)
	]
	HRESULT AnalyzeGeometry([out, retval]VARIANT_BOOL *Success);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | AnalyzeGeometryObject | Die Methode <om .AnalyzeGeometryObject>
	// Prüft die Geometrie des Objektes im Zusammenhang mit der Geoemtrie des übergebenen Objektes
	// @xref <i DGeoObject>
	[
		id(739), 
		helpstring("Prüft die Geometrie des Objektes im Zusammenhang mit der Geoemtrie des übergebenen Objektes."),
		helpcontext(DGeoObject_AnalyzeGeometryObject_meth)
	]
	HRESULT AnalyzeGeometryObject([in] DGeoObject *ObjIn, [in, optional] VARIANT Mode, [out, retval]VARIANT_BOOL *Success);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetBufferObjectEx | Die Eigenschaft <om .GetBufferObjectEx>
	// Einen Buffer für dieses Objekt generieren (mit zusätzlichen Parametern)
	// @xref <i DGeoObject>
	[
		id(740), 
		helpstring("Einen Buffer für dieses Objekt generieren (mit zusätzlichen Parametern)."),
		helpcontext(DGeoObject_GetBufferObjectEx_meth)
	]
	HRESULT GetBufferObjectEx ([in]double Width, 
			[in, optional]VARIANT FullCircle, [in, optional]VARIANT Side, 
			[in, optional]VARIANT ConvexMode, [in, optional]VARIANT Precision, 
			[out, retval]DGeoObject **Obj);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Visible | Die Eigenschaft <op .Visible>
	// Liefert, ob dieses Objekt in einer Ansicht ausgeblendet ist
	// @xref <i DGeoObject>
	[
		id(741), 
		propget,
		helpstring("Liefert, ob dieses Objekt in einer Ansicht ausgeblendet ist."),
		helpcontext(DGeoObject_Visible_prop)
	]
	HRESULT Visible ([in] VARIANT ViewName, [out, retval] VARIANT_BOOL *IsShown);
	[
		id(741), 
		propput,
		helpstring("Setzt, ob dieses Objekt in einer Ansicht ausgeblendet ist."),
		helpcontext(DGeoObject_Visible_prop)
	]
	HRESULT Visible ([in] VARIANT ViewName, [in] VARIANT_BOOL IsShown);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | UniqueID | Die Eigenschaft <op .UniqueID>
	// Liefert den 'Unique Ident' dieses Objektes
	// @xref <i DGeoObject>
	[
		id(742), 
		propget,
		helpstring("Liefert den 'Unique Ident' dieses Objektes."),
		helpcontext(DGeoObject_UniqueID_prop)
	]
	HRESULT UniqueID ([out, retval] BSTR *Ident);
	[
		id(742), 
		propput,
		restricted,
		helpstring("Setzt den 'unique ident (GUID)' dieses Objektes."),
		helpcontext(DGeoObject_UniqueID_prop)
	]
	HRESULT UniqueID ([in] BSTR Ident);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | OldUniqueID | Die Eigenschaft <op .OldUniqueID>
	// Liefert den 'Unique Ident' der Ursprungsobjekte, aus denen dieses Objekt hervorgegangen ist
	// @xref <i DGeoObject>
	[
		id(743), 
		propget,
		helpstring("Liefert den 'unique ident (GUID)' der Ursprungsobjekte, aus denen dieses Objekt hervorgegangen ist."),
		helpcontext(DGeoObject_OldUniqueID_prop)
	]
	HRESULT OldUniqueID ([out, retval] BSTR *Ident);
	[
		id(743), 
		propput,
		restricted,
		helpstring("Setzt den 'unique ident (GUID)' der Ursprungsobjekte, aus denen dieses Objekt hervorgegangen ist."),
		helpcontext(DGeoObject_OldUniqueID_prop)
	]
	HRESULT OldUniqueID ([in] BSTR Ident);

	// @doc DGEOOBJECT | PROPERTY
	// @property HRESULT | DGeoObject | Connection | Die Eigenschaft <op .Connection>
	// liefert die Verbindung zu der Datenquelle, aus der dieses Objekt geladen wurde.
	// @xref <i DGeoObject>
	[
		id(2001), 
		propget,
		helpstring("Liefert die Connection, aus der dieses Objekt geladen wurde."),
		helpcontext(DGeoObject_Connection_prop)
	]
	HRESULT Connection ([out, retval] ITRiASConnection **Conn);

	// @doc DGEOOBJECT | METHOD
	// @method <o GeoObject> | DGeoObject | CloneObject | Die Methode <om .CloneObject> 
	// kopiert das Objekt mit allen seinen Eigenschaften.
	// @parm <o GeoClass> | Class | Der optionale Parameter <p Class> enthält die Objektklasse
	// der das neu erzeugte (gedoppelte Objekte) zugeordnet werden soll. Die Objektklasse
	// legt gleichzeitig die Datenquelle fest, in welche das neue Objekt gespeichert werden soll.
	// Wenn dieser Parameter nicht gegeben ist, dann wird das neu erzteugte Objekt der Objektklasse
	// des Ausgangsobjektes zugeordnet.
	// @rvalue <o GeoObject> | Die Methode <om .CloneObject> liefert das neu erzeugte Objekt als
	// Rückgabewert. Im Fehlerfall liefert die Methode 'Nothing'.
	// @xref <i DGeoObject>, <o GeoClass>
	[
		id(744), 
		helpstring("Kopiert das Objekt mit allen seinen Eigenschaften."),
		helpcontext(DGeoObject_CloneObject_meth)
	]
	HRESULT CloneObject ([in, optional] VARIANT Class, [out, retval] DGeoObject **NewObj);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetGeometryPt | Die Methode <om .GetGeometryPt>
	// Liefert die Geometrie (den Schwerpunkt) des Objektes.
	// @parm VARIANT | CS | Der Parameter <p CS> enthält das Koordinatensystem <i ITRiASCS>
	// in welches die gelieferten Koordinatenwerte konvertiert sein sollen. 
	// @parm double | X | Der Parameter <p X> ...
	// @parm double | Y | Der Parameter <p Y> ...
	// @xref <i DGeoObject>
	[
		id(745), 
		helpstring("Liefert die Geometrie (den Schwerpunkt) des Objektes im vorgegebenen Koordinatensystem."),
		helpcontext(DGeoObject_GetGeometryPtCS_meth)
	]
	HRESULT GetGeometryPtCS ([in] VARIANT CS, [out] double *X, [out] double *Y, [out, retval] OBJECTTYPE *ObjType);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | GetGeometry | Die Methode <om .GetGeometry>
	// Liefert die Geometrie des Objektes.
	// @parm VARIANT | CS | Der Parameter <p CS> enthält das Koordinatensystem <i ITRiASCS>
	// in welches die gelieferten Koordinatenwerte konvertiert sein sollen.
	// @parm long | Cnt | Der Parameter <p Cnt> ...
	// @parm VARIANT | X | Der (optionale) Parameter <p X> ...
	// @parm VARIANT | Y | Der (optionale) Parameter <p Y> ...
	// @parm VARIANT | ContCnt | Der (optionale) Parameter <p ContCnt> ...
	// @parm VARIANT | Conture | Der (optionale) Parameter <p Conture> ...
	// @xref <i DGeoObject>
	[
		id(746), 
		helpstring("Liefert die Geometrie des Objektes im vorgegebenen Koordinatensystem."),
		helpcontext(DGeoObject_GetGeometryCS_meth)
	]
	HRESULT GetGeometryCS ([in] VARIANT CS, [out] long *Cnt, 
			[out, optional] VARIANT *X, [out, optional] VARIANT *Y,
			[out, optional] VARIANT *ContCnt, [out, optional] VARIANT *Conture,
			[out, retval] OBJECTTYPE *ObjType);
	
	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | PutGeometryPt | Die Methode <om .PutGeometryPt>
	// Modifiziert die Geometrie (den Schwerpunkt) des Objektes.
	// @parm VARIANT | CS | Der Parameter <p CS> enthält das Koordinatensystem <i ITRiASCS>
	// in welchem die übergebenen Koordinatenwerte vorliegen.
	// @parm UserDefined | ObjType | Der Parameter <p ObjType> ...
	// @parm double | X | Der Parameter <p X> ...
	// @parm double | Y | Der Parameter <p Y> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoObject>
	[
		id(747), 
		helpstring("Modifiziert die Geometrie (den Schwerpunkt) des Objektes im vorgegebenen Koordinatensystem."),
		helpcontext(DGeoObject_PutGeometryPtCS_meth)
	]
	HRESULT PutGeometryPtCS ([in] VARIANT CS, [in] OBJECTTYPE ObjType, 
			[in] double X, [in] double Y, [in, optional] VARIANT Mode, 
			[out, retval] VARIANT_BOOL *Result);

	// @doc DGEOOBJECT | METHOD
	// @method HRESULT | DGeoObject | PutGeometry | Die Methode <om .PutGeometry>
	// modifiziert die Geometrie des Objektes.
	// @parm VARIANT | CS | Der Parameter <p CS> enthält das Koordinatensystem <i ITRiASCS>
	// in welchem die übergebenen Koordinatenwerte vorliegen.
	// @parm <t OBJECTTYPE> | ObjType | Der Parameter <p ObjType> gibt den Objekttyp vor, der der
	// übergebenen Geometrie zugrunde liegt.
	// @parm VARIANT | X | Der Parameter <p X> enthält die X-Koordinaten (Rechtswerte) der Stützpunkte
	// der neu zu speichernden Geometrie.
	// @parm VARIANT | Y | Der Parameter <p Y> enthält die Y-Koordinaten (Hochwerte) der Stützpunkte
	// der neu zu speichernden Geometrie.
	// @parm VARIANT | Conture | Der (optionale) Parameter <p Conture> enthält die Startindizies der
	// Konturen einer Fläche innerhalb der Koordinatenfelder (<p X> bzw. <p Y>). Dieser Parameter muß 
	// lediglich für Flächengeometrien gegeben sein, wenn die übergebene Geometrie zumindest eine Insel
	// enthält.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> enthält Werte vom Typ <t MODGEOMETRYMODE>
	// enthalten, ansonsten tritt ein Fehler auf. 
	// @comm Der Typ des Objektes darf durch die Methode <om .PutGeometry> nicht modifiziert werden.
	// Wird die Methode <om .PutGeometry> für ein neu erzeugtes Objekt erstmalig gerufen, so wird 
	// dadurch gleichzeitig der Objekttyp dieses Objektes festgelegt.
	// @xref <i DGeoObject>, <t OBJECTTYPE>
	[
		id(748), 
		helpstring("Modifiziert die Geometrie des Objektes im vorgegebenen Koordinatensystem."),
		helpcontext(DGeoObject_PutGeometryCS_meth)
	]
	HRESULT PutGeometryCS ([in] VARIANT CS, [in] OBJECTTYPE ObjType, [in] VARIANT X, 
			[in] VARIANT Y, [in, optional] VARIANT Conture, [in, optional] VARIANT Mode, 
			[out, retval] VARIANT_BOOL *Result);

	// @doc DGEOOBJECT | METHOD
	// @method <t OBJECTTYPE> | DGeoObject | GetGeometryRect | Die Methode <om .GetGeometryRect>
	// liefert die Koordinaten des umschließenden Rechtecks des Objektes.
	// @parm VARIANT | CS | Der Parameter <p CS> enthält das Koordinatensystem <i ITRiASCS>
	// in welchem die übergebenen Koordinatenwerte vorliegen.
	// @parm double | XMin | Der Parameter <p XMin> enthält nach der Abarbeitung den minimalen 
	// X-Wert (Rechtswert) des umschließenden Rechteckes des Objektes.
	// @parm double | YMin | Der Parameter <p YMin> enthält nach der Abarbeitung den minimalen 
	// Y-Wert (Hochwert) des umschließenden Rechteckes des Objektes.
	// @parm double | XMax | Der Parameter <p XMax> enthält nach der Abarbeitung den maximalen 
	// X-Wert (Rechtswert) des umschließenden Rechteckes des Objektes.
	// @parm double | YMax | Der Parameter <p YMax> enthält nach der Abarbeitung den maximalen 
	// Y-Wert (Hochwert) des umschließenden Rechteckes des Objektes.
	// @rvalue <t OBJECTTYPE> | Die Methode <om .GetGeometryRect> liefert den Objekttyp (<t OBJECTTYPE>) dieses 
	// Objektes zurück.
	// @xref <i DGeoObject>, <t OBJECTTYPE>
	[
		id(749), 
		helpstring("Liefert umschließendes Rechteck des Objektes im vorgegebenen Koordinatensystem."),
		helpcontext(DGeoObject_GetGeometryRectCS_meth)
	]
	HRESULT GetGeometryRectCS ([in] VARIANT CS, [out] double *XMin, [out] double *YMin,
			[out] double *XMax, [out] double *YMax, [out, retval] OBJECTTYPE *ObjType);
};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DGeoClasses | Über das Interface <i DGeoClasses> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung einer Menge von Objektklassen
// verfügbar.
// @base public | DTRiASBaseClass
// @base public | DTRiASCollection
// @supby <o GeoClasses>
// @xref <o GeoClasses>
// @group Eigenschaften von <i DGeoClasses>
// @index | DGEOCLASSES & PROPERTY
// @group Methoden von <i DGeoClasses>
// @index | DGEOCLASSES & METHOD
// @doc DGEOCLASSES
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3CA-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Sammlung von TRiAS® Objektklassen."),
	helpcontext(DGeoClasses_int)
]  
interface DGeoClasses : DTRiASCollection 
{
//	[id(10000), hidden, restricted] HRESULT Dummy(void);
	// intentionally left free
};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DGeoClass | Über das Interface <i DGeoClass> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung einer Objektklasse verfügbar.
// @base public | DTRiASBaseClass
// @supby <o GeoClass>
// @xref <o GeoClass>
// @group Eigenschaften von <i DGeoClass> 
// @index | DGEOCLASS & PROPERTY
// @group Methoden von <i DGeoClass> 
// @index | DGEOCLASS & METHOD
// @doc DGEOCLASS
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3CC-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Eine TRiAS® Objektklasse."),
	helpcontext(DGeoClass_int)
]  
interface DGeoClass : DTRiASBaseClass 
{
	// @doc DGEOCLASS | PROPERTY
	// @property HRESULT | DGeoClass | Properties | Die Eigenschaft <op .Properties>
	// ...
	// @comm Die Eigenschaft <op .Properties> ist zur Zeit nicht implementiert.
	// @xref <i DGeoClass>
	[id(9), propget] HRESULT Properties ([out, retval]DTRiASProperties **Props);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | CreateProperty | Die Methode <om .CreateProperty>
	// ...
	// @parm VARIANT | PropName | Der Parameter <p PropName> ...
	// @parm VARIANT | PropType | Der Parameter <p PropType> ...
	// @parm VARIANT | Value | Der Parameter <p Value> ...
	// @comm Die Methode <om .CreateProperty> ist zur Zeit nicht implementiert.
	// @xref <i DGeoClass>
	[id(10)] HRESULT CreateProperty ([in, optional]VARIANT PropName, [in, optional]VARIANT PropType, 
		[in, optional]VARIANT Value, [out, retval]DTRiASProperty **Prop);
		
	// @doc DGEOCLASS | PROPERTY
	// @property HRESULT | DGeoClass | Value | Die Eigenschaft <op .Value>
	// liefert den Objektklassenschlüssel in der Form als Zeichenkette in der Form '[...]', wobei
	// der Objektklassenschlüssel selbst per Definition aus den Zeichen 0-9 und A-F bestehen muß.
	// @xref <i DGeoClass>
	[
		id(DISPID_VALUE), propget, 
		helpstring("Objektklassenschlüssel"), 
		helpcontext(DGeoClass_Value_prop)
	]
	HRESULT Value ([out, retval]BSTR *Value);
		
	// @doc DGEOCLASS | PROPERTY
	// @property HRESULT | DGeoClass | Name | Die Eigenschaft <op .Name> setzt bzw. liefert den
	// Kurzbezeichner der Objektklasse.
	// @comm Der Kurzbezeichner ist bei unterligeneden relationalen Datenquellen i.a. der Tabellenname
	// der Tabelle, aus der die Objekte dieser Objektklasse geladen werden.
	// @xref <i DGeoClass>
	[
		id(3), propget, 
		helpstring("Kurzbezeichner der Objektklasse"),
		helpcontext(DGeoClass_Name_prop)
	]
	HRESULT Name ([out, retval]BSTR *Value);
	[
		id(3), propput, 
		helpstring("Kurzbezeichner der Objektklasse"),
		helpcontext(DGeoClass_Name_prop)
	]	
	HRESULT Name ([in]BSTR Name);
		
	// @doc DGEOCLASS | PROPERTY
	// @property HRESULT | DGeoClass | FullName | Die Eigenschaft <op .FullName> setzt bzw. liefert
	// einen zusätzlichen ausführlicheren Beschreibungstext der dieser Objektklasse zugeordnet sein
	// kann.
	// @comm Nicht alle Datenquellentypen unterstützen einen derartigen Beschreibungstext.
	// @xref <i DGeoClass>
	[
		id(501), propget, 
		helpstring("Voller Bezeichner der Objektklasse"),
		helpcontext(DGeoClass_FullName_prop)
	]
	HRESULT FullName ([out, retval]BSTR *Value);
	[
		id(501), propput, 
		helpstring("Voller Bezeichner der Objektklasse"),
		helpcontext(DGeoClass_FullName_prop)
	] 
	HRESULT FullName ([in]BSTR FullName);
	
	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetViews | Die Methode <om .GetViews>
	// Ansichten in denen diese Klasse vertreten ist
	// @parm VARIANT | ObjType | Der (optionale) Parameter <p ObjType> ...
	// @xref <i DGeoClass>
	[
		id(1000), 
		helpstring("Ansichten in denen diese Klasse vertreten ist"),
		helpcontext(DGeoClass_GetViews_meth)
	]
	HRESULT GetViews ([in, optional]VARIANT ObjType, [out, retval]DViews **Views);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetObjects | Die Methode <om .GetObjects>
	// Liefert die Liste aller Objekte dieser Objektklasse.
	// @parm VARIANT | ObjTypes | Der (optionale) Parameter <p ObjTypes> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoClass>
	[
		id(600), 
		helpstring("Liefert die Liste aller Objekte dieser Objektklasse."),
		helpcontext(DGeoClass_GetObjects_meth)
	]
	HRESULT GetObjects ([in, optional]VARIANT ObjTypes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjects **Objs);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetObjectsInRect | Die Methode <om .GetObjectsInRect>
	// Liefert die Liste aller Objekte dieser Objektklasse in einem Bereich.
	// @parm double | X | Der Parameter <p X> ...
	// @parm double | Y | Der Parameter <p Y> ...
	// @parm VARIANT | XMax | Der (optionale) Parameter <p XMax> ...
	// @parm VARIANT | YMax | Der (optionale) Parameter <p YMax> ...
	// @xref <i DGeoClass>
	[
		id(610), 
		helpstring("Liefert die Liste aller Objekte dieser Objektklasse in einem Bereich."),
		helpcontext(DGeoClass_GetObjectsInRect_meth)
	]
	HRESULT GetObjectsInRect ([in]double X, [in]double Y, 
			[in,optional]VARIANT XMax, [in,optional]VARIANT YMax, [out, retval]DGeoObjects **Objs);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetObject | Die Methode <om .GetObject>
	// Objekt dieser Objektklasse
	// @parm VARIANT | GeoObj | Der Parameter <p GeoObj> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoClass>
	[id(700), helpstring("Objekt dieser Objektklasse"), helpcontext(DGeoClass_GetObject_meth)]
		HRESULT GetObject ([in]VARIANT GeoObj, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObject **Obj);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetFeatures | Die Methode <om .GetFeatures>
	// Liste von Features dieser Objektklasse
	// @parm VARIANT | Features | Der (optionale) Parameter <p Features> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoClass>
	[id(800), helpstring("Liste von Features dieser Objektklasse"), helpcontext(DGeoClass_GetFeatures_meth)]
		HRESULT GetFeatures ([in, optional]VARIANT Features, [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeatures **Feats);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetFeature | Die Methode <om .GetFeature>
	// Feature dieser Objektklasse
	// @parm VARIANT | Feature | Der Parameter <p Feature> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoClass>
	[id(900), helpstring("Feature dieser Objektklasse"),helpcontext(DGeoClass_GetFeature_meth)]
		HRESULT GetFeature ([in]VARIANT Feature, [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeature **Feat);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetVisInfo | Die Methode <om .GetVisInfo>
	// Visualisierung eines Objekttyps dieser Objektklasse in einer Ansicht
	// @parm UserDefined | ObjType | Der Parameter <p ObjType> ...
	// @parm VARIANT | View | Der (optionale) Parameter <p View> ...
	// @xref <i DGeoClass>
	[
		id(502), 
		helpstring("Visualisierung eines Objekttyps dieser Objektklasse in einer Ansicht"),
		helpcontext(DGeoClass_GetVisInfo_meth)
	]
	HRESULT GetVisInfo ([in]OBJECTTYPE ObjType, [in, optional]VARIANT View, 
			[out, retval]DVisInfo **VisInfo);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | SetVisInfo | Die Methode <om .SetVisInfo>
	// Modifizieren der Visualisierung eines Objekttyps dieser Objektklasse in einer Ansicht
	// @parm UserDefined | VisInfo | Der Parameter <p VisInfo> ...
	// @parm VARIANT | View | Der (optionale) Parameter <p View> ...
	// @xref <i DGeoClass>
	[
		id(503), 
		helpstring("Modifizieren der Visualisierung eines Objekttyps dieser Objektklasse in einer Ansicht"),
		helpcontext(DGeoClass_SetVisInfo_meth)
	]
	HRESULT SetVisInfo ([in]DVisInfo *VisInfo, [in, optional]VARIANT View);

	// @doc DGEOCLASS | PROPERTY
	// @property HRESULT | DGeoClass | Code | Die Eigenschaft <op .Code>
	// Identifikator
	// @xref <i DGeoClass>
	[id(504), propget, helpstring("Identifikator"), helpcontext(DGeoClass_Code_prop)]
		HRESULT Code ([out, retval]long *Ident);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | ResetVisInfo | Die Methode <om .ResetVisInfo>
	// Rücksetzen der Visualisierung dieser Objektklasse in einer Ansicht.
	// @parm UserDefined | ObjType | Der Parameter <p ObjType> ...
	// @parm VARIANT | View | Der (optionale) Parameter <p View> ...
	// @xref <i DGeoClass>
	[
		id(505), 
		helpstring("Rücksetzen der Visualisierung dieser Objektklasse in einer Ansicht."),
		helpcontext(DGeoClass_ResetVisInfo_meth)
	]
	HRESULT ResetVisInfo ([in]OBJECTTYPE ObjType, [in, optional]VARIANT View);

	// @doc DGEOCLASS | PROPERTY
	// @property HRESULT | DGeoClass | Connection | Die Eigenschaft <op .Connection>
	// Liefert die Connection, aus der dieses Objekt geladen wurde.
	// @xref <i DGeoClass>
	[
		id(2001), 
		propget,
		helpstring("Liefert die Connection, aus der dieses Objekt geladen wurde."),
		helpcontext(DGeoClass_Connection_prop)
	]
	HRESULT Connection ([out, retval] ITRiASConnection **Conn);

	// @doc DGEOCLASS | PROPERTY
	// @property HRESULT | DGeoClass | Updatable | Die Eigenschaft <op .Updatable>
	// Schreibschutz dieser Objektklasse
	// @xref <i DGeoClass>
	[id(506), propget, helpstring("Schreibschutz dieser Objektklasse"), helpcontext(DGeoClass_Updatable_prop)]
		HRESULT Updatable ([out, retval] VARIANT_BOOL *ROMode);	
	[id(506), propput, helpstring("Schreibschutz dieser Objektklasse"), helpcontext(DGeoClass_Updatable_prop)] 
		HRESULT Updatable ([in] VARIANT_BOOL ROMode);
	
	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetObjectFeatures | Die Methode <om .GetObjectFeatures>
	// Liste von Features dieser Objektklasse
	// @parm VARIANT | Features | Der (optionale) Parameter <p Features> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoClass>
	[
		id(810), 
		helpstring("Liste von Features dieser Objektklasse"),
		helpcontext(DGeoClass_GetObjectFeatures_meth)
	]
	HRESULT GetObjectFeatures ([in, optional]VARIANT Features, [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeatures **Feats);

	// @doc DGEOCLASS | METHOD
	// @method HRESULT | DGeoClass | GetObjectFeature | Die Methode <om .GetObjectFeature>
	// Feature dieser Objektklasse
	// @parm VARIANT | Feature | Der Parameter <p Feature> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoClass>
	[
		id(910), 
		helpstring("Feature dieser Objektklasse"), 
		helpcontext(DGeoClass_GetObjectFeature_meth)
	]
	HRESULT GetObjectFeature ([in]VARIANT Feature, [in, optional]VARIANT Mode, 
			[out, retval]DGeoFeature **Feat);

	// @doc DGEOCLASS | PROPERTY
	// @property VARIANT_BOOL | DGeoClass | IsQueryDef | Die Eigenschaft <op .IsQueryDef> liefert,
	// ob diese Objektklasse eine Rechercheobjektmenge repräsentiert (readonly).
	// @comm Die Eigenschaft <op .IsQueryDef> kann nicht gesetzt werden.
	// @xref <i DGeoClass>
	[
		id(2002),
		propget,
		helpstring("Liefert ob diese Objektklasse eine Rechercheobjektmenge repräsentiert."),
		helpcontext(DGeoClass_IsQueryDef_prop)
	]
	HRESULT IsQueryDef ([out, retval] VARIANT_BOOL *IsQueryDef);

	[
		id(DISPID_VALUE), propput, 
		helpstring("Objektklassenschlüssel"), 
		helpcontext(DGeoClass_Value_prop)
	]
	HRESULT Value ([in]BSTR Value);

#if defined(_EXPLICIT_FUNCTIONS)
	[id(701), helpstring("Fügt ein Objekt zu dieser Objektklasse hinzu.")]
		HRESULT AddObject ([in]VARIANT GeoObj, [out, retval]DGeoObject **Obj);
	[id(702), helpstring("Entfernt ein Objekt aus dieser Objektklasse.")]
		HRESULT RemoveObject ([in]VARIANT GeoObj);

	[id(901), helpstring("Erzeugt eine neue Eigenschaft für diese Objektklasse.")]
		HRESULT AddFeature ([in]VARIANT Feature, [in, optional]VARIANT Props, 
			[out, retval]DGeoFeature **Feat);
	[id(902), helpstring("Löscht eine Eigenschaft dieser Objektklasse.")]
		HRESULT RemoveFeature ([in]VARIANT Feature);
#endif // _EXPLICIT_FUNCTIONS
};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DGeoFeatures | Über das Interface <i DGeoFeatures> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung einer Menge von Objekteigenschaften
// verfügbar.
// @base public | DTRiASBaseClass
// @base public | DTRiASCollection
// @supby <o GeoFeatures>
// @xref <o GeoFeatures>
// @group Eigenschaften von <i DGeoFeatures>
// @index | DGEOFEATURES & PROPERTY
// @group Methoden von <i DGeoFeatures>
// @index | DGEOFEATURES & METHOD
// @doc DGEOFEATURES
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3D6-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Sammlung von Eigenschaften eines TRiAS® Objektes, einer TRiAS® Objektklasse oder einer TRiAS® Ansicht."),
	helpcontext(DGeoFeatures_int)
]  
interface DGeoFeatures : DTRiASCollection 
{
//	[id(10000), hidden, restricted] HRESULT Dummy(void);
	// intentionally left free
};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DGeoFeature | Über das Interface <i DGeoFeature> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung einer Objekteigenschaft verfügbar.
// @base public | DTRiASBaseClass
// @supby <o GeoFeature>
// @xref <o GeoFeature>
// @group Eigenschaften von <i DGeoFeature>
// @index | DGEOFEATURE & PROPERTY
// @group Methoden von <i DGeoFeature>
// @index | DGEOFEATURE & METHOD
// @doc DGEOFEATURE
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3D8-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Eine Eigenschaft eines TRiAS® Objektes, einer TRiAS® Objektklasse oder einer TRiAS® Ansicht."),
	helpcontext(DGeoFeature_int)
]  
interface DGeoFeature : DTRiASBaseClass 
{
#if !defined(_PROPERTYCAPS_DEFINED)
#define _PROPERTYCAPS_DEFINED
// @doc PROPERTYCAPSENUMS 
// @enum PROPERTYCAPS | Beschreibt eine Objekteigenschaft.
// @xref <o GeoFeature>, <op DGeoFeature.Flags>
cpp_quote("#if !defined(_PROPERTYCAPS_DEFINED)")
cpp_quote("#define _PROPERTYCAPS_DEFINED")
	typedef [public, v1_enum, helpstring("Mögliche Typen einer Objekteigenschaft."), helpcontext(PROPERTYCAPS_enum)]
	enum _tagPROPERTYCAPS {
		[helpstring("Normale Objekteigenschaft (readonly)."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_NONE = 0x00,			// @emem Normale Objekteigenschaft (readonly).
		[helpstring("Normale Objekteigenschaft (nicht readonly)."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_NOTREADONLY = 0x01,	// @emem Normale Objekteigenschaft (nicht readonly).
		[helpstring("Normale Objekteigenschaft (systemintern)."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_RESTRICTED = 0x02,		// @emem Normale Objekteigenschaft (systemintern).
		[helpstring("Objekteigenschaft kann als Vorlage genutzt werden."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_USEABLEASTEMPLATE = 0x04,	// @emem Objekteigenschaft kann als Vorlage genutzt werden.
		[helpstring("Objekteigenschaft erfordert Nutzerinteraktion um Wert zu liefern."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_INTERACTIVE = 0x08,	// @emem Objekteigenschaft erfordert Nutzerinteraktion um ihren Wert zu liefern.
		[helpstring("Objekteigenschaft erfordert Nutzerinteraktion bei Initialiserung."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_INTERACTIVE_INIT = 0x10,	// @emem Objekteigenschaft erfordert Nutzerinteraktion bei Initialiserung.
		[helpstring("Wert der Objekteigenschaft wird dynamisch generiert."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_GENERATED = 0x20,		// @emem Wert der Objekteigenschaft wird dynamisch generiert.
		[helpstring("Objekteigenschaft kann Recherchen selbst durchführen."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_SEARCHABLE = 0x40,		// @emem Objekteigenschaft kann Recherchen selbst durchführen.
		[helpstring("Objekteigenschaft liefert Zeichenkette."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_OBJPROPTYPE_STRING = 0x00000000,	// @emem Objekteigenschaft liefert Zeichenkette.
		[helpstring("Objekteigenschaft liefert ganze Zahlen."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_OBJPROPTYPE_INTEGER = 0x00010000,	// @emem Objekteigenschaft liefert ganze Zahlen.
		[helpstring("Objekteigenschaft liefert Fließkommazahlen."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_OBJPROPTYPE_DOUBLE = 0x00020000,	// @emem Objekteigenschaft liefert Fließkommazahlen.
		[helpstring("Objekteigenschaft liefert einen boolschen Wert."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_OBJPROPTYPE_BOOL = 0x00040000,		// @emem Objekteigenschaft liefert einen boolschen Wert.
		[helpstring("Objekteigenschaft liefert Datum."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_OBJPROPTYPE_DATE = 0x00080000,		// @emem Objekteigenschaft liefert ein Datum.
		[helpstring("Objekteigenschaft hat unbekannten Typ."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_OBJPROPTYPE_UNKNOWN = 0x00800000,	// @emem Objekteigenschaft hat unbekannten Typ.
		[helpstring("Unbekannte Eigenschaften der Objekteigenschaft."), helpcontext(PROPERTYCAPS_enum)]
			PROPERTYCAPS_UNKNOWN = 0xFFFFFFFF,
	} PROPERTYCAPS;
cpp_quote("#endif // !defined(_PROPERTYCAPS_DEFINED)")
#endif // !defined(_PROPERTYCAPS_DEFINED)

#if !defined(_FEATURESEARCHMODE_DEFINED)
#define _FEATURESEARCHMODE_DEFINED
// @doc FEATURESEARCHMODEENUMS 
// @enum FEATURESEARCHMODE | Beschreibt, wie nach einer Objekteigenschaft gesucht werden soll.
// @comm Die verschiedenen Suchmodi dürfen untereinander nicht miteinander kombiniert werden.
// @comm Die verschiedenen Suchmodi dürfen mit den Werten des Typs <t FEATURESEARCHQUALIFIER>
// kombiniert werden, um die Recherche zusätzlich einzuschränken.
// @xref <o GeoFeature>, <om DGeoFeature.GetObjects>, <t FEATURESEARCHQUALIFIER>
cpp_quote("#if !defined(_FEATURESEARCHMODE_DEFINED)")
cpp_quote("#define _FEATURESEARCHMODE_DEFINED")
	enum _tagFEATURESEARCHMODE {
		[helpstring("Exakte Suche nach der vorgegebenen Zeichenkette."), helpcontext(FEATURESEARCHMODE_enum)]
			FEATURESEARCHMODE_ExactMatch = 1,	// @emem Exakte Suche nach der vorgegebenen Zeichenkette.
		[helpstring("Ungefähre Suche nach der vorgegebenen Zeichenkette."), helpcontext(FEATURESEARCHMODE_enum)]
			FEATURESEARCHMODE_InexactMatch = 2,	// @emem Ungefähre Suche nach der vorgegebenen Zeichenkette.
				// Die Suche mit diesem Mode toleriert 1-2 Tippfehler.
		[helpstring("Suche nach der vorgegebenen Zeichenkette als Teilzeichenkette."), helpcontext(FEATURESEARCHMODE_enum)]
			FEATURESEARCHMODE_SubStringMatch = 3,	// @emem Suche nach der vorgegebenen Zeichenkette als 
				// Teilzeichenkette. 
		[helpstring("Suche nach der vorgegebenen Zeichenkette als Teilzeichenkette am Textanfang."), helpcontext(FEATURESEARCHMODE_enum)]
			FEATURESEARCHMODE_SubStringStartMatch = 4,	// @emem Suche nach der vorgegebenen Zeichenkette als 
				// Teilzeichenkette am Textanfang. 
		[helpstring("Suche nach der vorgegebenen Zeichenkette als Suchmuster."), helpcontext(FEATURESEARCHMODE_enum)]
			FEATURESEARCHMODE_RegularExpression = 5,	// @emem Suche nach der vorgegebenen Zeichenkette als 
				// Suchmuster. 
		[helpstring("Testet auf Existenz einer Objekteigenschaft."), helpcontext(FEATURESEARCHMODE_enum)]
			FEATURESEARCHMODE_ExistanceOnly = 6,	// @emem Testet auf Existenz einer Objekteigenschaft
		[helpstring("Suche nach der vorgegebenen Zeichenkette als Suchmuster und Teilzeichenkette."), helpcontext(FEATURESEARCHMODE_enum)]
			FEATURESEARCHMODE_SubRegularExpression = 7,	// @emem Suche nach der vorgegebenen Zeichenkette als 
				// Suchmuster und Teilzeichenkette.
	};
cpp_quote("#endif // !defined(_FEATURESEARCHMODE_DEFINED)")
#endif // !defined(_FEATURESEARCHMODE_DEFINED)

#if !defined(_FEATURESEARCHQUALIFIER_DEFINED)
#define _FEATURESEARCHQUALIFIER_DEFINED
// @doc FEATURESEARCHQUALIFIERENUMS 
// @enum FEATURESEARCHQUALIFIER | Beschreibt, welche zusätzlichen Kriterien bei der Suche nach 
// einer Objekteigenschaft angewendet werden sollen.
// @comm Die verschiedenen Suchmodi müssen mit den Werten des Typs <t FEATURESEARCHMODE>
// kombiniert werden, da die Werte an sich keine Bedeutung besitzen.
// @xref <o GeoFeature>, <om DGeoFeature.GetObjects>, <t FEATURESEARCHMODE>
cpp_quote("#if !defined(_FEATURESEARCHQUALIFIER_DEFINED)")
cpp_quote("#define _FEATURESEARCHQUALIFIER_DEFINED")
	enum _tagFEATURESEARCHQUALIFIER {
		[helpstring("Suche auf aktuelle Ansicht beschränken."), helpcontext(FEATURESEARCHQUALIFIER_enum)]
			FEATURESEARCHQUALIFIER_ActViewOnly = 0x80,	// @emem Suche auf aktuelle Ansicht beschränken
		[helpstring("Resultat der Suche negieren."), helpcontext(FEATURESEARCHQUALIFIER_enum)]
			FEATURESEARCHQUALIFIER_NegateResult = 0x100,	// @emem Resultat der Suche negieren (komplementäre 
				// Objektmenge liefern)
		[helpstring("Bei der Suche Groß-/Kleinschreibung ignorieren."), helpcontext(FEATURESEARCHQUALIFIER_enum)]
			FEATURESEARCHQUALIFIER_IgnoreCase = 0x200,	// @emem Bei der Suche Groß-/Kleinschreibung ignorieren.
	};
cpp_quote("#endif // !defined(_FEATURESEARCHQUALIFIER_DEFINED)")
#endif // !defined(_FEATURESEARCHQUALIFIER_DEFINED)

	// @doc DGEOFEATURE | PROPERTY
	// @property HRESULT | DGeoFeature | Properties | Die Eigenschaft <op .Properties>
	// ...
	// @comm Die Eigenschaft <op .Properties> ist zur Zeit nicht implementiert.
	// @xref <i DGeoFeature>
	[id(9), propget] HRESULT Properties ([out, retval]DTRiASProperties **Props);

	// @doc DGEOFEATURE | METHOD
	// @method HRESULT | DGeoFeature | CreateProperty | Die Methode <om .CreateProperty>
	// ...
	// @parm VARIANT | PropName | Der Parameter <p PropName> ...
	// @parm VARIANT | PropType | Der Parameter <p PropType> ...
	// @parm VARIANT | Value | Der Parameter <p Value> ...
	// @comm Die Methode <om .CreateProperty> ist zur Zeit nicht implementiert.
	// @xref <i DGeoFeature>
	[id(10)] HRESULT CreateProperty ([in, optional]VARIANT PropName, [in, optional]VARIANT PropType, 
		[in, optional]VARIANT Value, [out, retval]DTRiASProperty **Prop);
		
	// @doc DGEOFEATURE | PROPERTY
	// @property HRESULT | DGeoFeature | Value | Die Eigenschaft <op .Value>
	// Merkmalscode (falls internes Merkmal)
	// @xref <i DGeoFeature>
	[
		id(DISPID_VALUE), propget, helpcontext(DGeoFeature_Value_prop),
		helpstring("Merkmalscode (falls internes Merkmal)")
	]
	HRESULT Value ([out, retval]BSTR *Value);

	// @doc DGEOFEATURE | PROPERTY
	// @property HRESULT | DGeoFeature | Name | Die Eigenschaft <op .Name>
	// Name der Objekteigenschaft.
	// @xref <i DGeoFeature>
	[id(3), propget, helpstring("Name der Objekteigenschaft."), helpcontext(DGeoFeature_Name_prop)]
		HRESULT Name ([out, retval]BSTR *Value);
	[id(3), propput, helpstring("Namen der Objekteigenschaft ändern."), helpcontext(DGeoFeature_Name_prop)]
		HRESULT Name ([in]BSTR Name);

	// @doc DGEOFEATURE | PROPERTY
	// @property HRESULT | DGeoFeature | FullName | Die Eigenschaft <op .FullName>
	// FullName der Objekteigenschaft.
	// @xref <i DGeoFeature>
	[
		id(700), propget, helpcontext(DGeoFeature_FullName_prop), 
		helpstring("FullName der Objekteigenschaft.")
	]	
	HRESULT FullName ([out, retval]BSTR *FullName);	
	[
		id(700), propput, helpcontext(DGeoFeature_FullName_prop), 
		helpstring("FullName der Objekteigenschaft ändern.")
	]
	HRESULT FullName ([in]BSTR FullName);
		
	// @doc DGEOFEATURE | PROPERTY
	// @property HRESULT | DGeoFeature | Feature | Die Eigenschaft <op .Feature>
	// Wert der Objekteigenschaft.
	// @xref <i DGeoFeature>
	[
		id(901), propget, helpcontext(DGeoFeature_Feature_prop), 
		helpstring("Wert der Objekteigenschaft.")
	]
	HRESULT Feature ([out, retval]BSTR *Value);
	[
		id(901), propput, helpcontext(DGeoFeature_Feature_prop), 
		helpstring("Wert der Objekteigenschaft verändern.")
	]
	HRESULT Feature ([in]BSTR Value);

	// @doc DGEOFEATURE | PROPERTY
	// @property HRESULT | DGeoFeature | Flags | Die Eigenschaft <op .Flags>
	// Eigenschaften des GeoFeature-Datenobjektes.
	// @xref <i DGeoFeature>
	[
		id(902), propget, helpcontext(DGeoFeature_Flags_prop), 
		helpstring("Eigenschaften des GeoFeature-Datenobjektes.")
	]
	HRESULT Flags ([out, retval]PROPERTYCAPS *Props);
	[
		id(902), propput, helpcontext(DGeoFeature_Flags_prop), 
		helpstring("Eigenschaft des GeoFeature-Datenobjektes verändern.")
	]
	HRESULT Flags ([in]PROPERTYCAPS Props);
                
	// @doc DGEOFEATURE | METHOD
	// @method HRESULT | DGeoFeature | GetViews | Die Methode <om .GetViews>
	// Liste von Ansichten mit dieser Eigenschaft.
	// @xref <i DGeoFeature>
	[
		id(1000), 
		helpstring("Liste von Ansichten mit dieser Eigenschaft."), 
		helpcontext(DGeoFeature_GetViews_meth)
	]
	HRESULT GetViews ([out, retval]DViews **Views);

	// @doc DGEOFEATURE | METHOD
	// @method HRESULT | DGeoFeature | GetClasses | Die Methode <om .GetClasses>
	// Liste von Objektklassen mit dieser Eigenschaft.
	// @parm VARIANT | Classes | Der (optionale) Parameter <p Classes> ...
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> ...
	// @xref <i DGeoFeature>
	[
		id(400), 
		helpstring("Liste von Objektklassen mit dieser Eigenschaft."), 
		helpcontext(DGeoFeature_GetClasses_meth)
	]
	HRESULT GetClasses ([in, optional]VARIANT Classes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoClasses **Clss);

	// @doc DGEOFEATURE | METHOD
	// @method HRESULT | DGeoFeature | GetObjects | Die Methode <om .GetObjects>
	// liefert eine Datenobjektsammlung aller Objekte mit dieser Objekteigenschaft.
	// @parm VARIANT | ToSearch | Der (optionale) Parameter <p ToSearch> gibt die zu suchende 
	// Zeichenkette vor. Wenn dieser Parameter nicht gegeben ist, dann werden alle Objekte 
	// geliefert, für die diese Objekteiegnschaft definiert und gegeben ist.
	// @parm VARIANT | Mode | Der (optionale) Parameter <p Mode> erlaubt, die Suche nach einer
	// Objekteigenschaft zusätzlich einzuschränken. Der Parameter muß Werte des Typs 
	// <t FEATURESEARCHMODE> evtl. kombiniert mit Werten des Typs <t FEATURESEARCHQUALIFIER>
	// enthalten. Wenn dieser Parameter nicht gegeben ist, dann wird der Wert
	// <e FEATURESEARCHMODE.FEATURESEARCHMODE_Exactmatch> angenommen.
	// @xref <i DGeoFeature>, <t FEATURESEARCHMODE>, <t FEATURESEARCHQUALIFIER>
	[
		id(600), 
		helpstring("Liefert die Liste aller Objekte mit dieser Objekteigenschaft."), 
		helpcontext(DGeoFeature_GetObjects_meth)
	]
	HRESULT GetObjects ([in, optional]VARIANT ToSearch, [in, optional]VARIANT Mode, [out, retval]DGeoObjects **Objs);

	// @doc DGEOFEATURE | PROPERTY
	// @property HRESULT | DGeoFeature | ConfigData | Die Eigenschaft <op .ConfigData>
	// liefert zusätzliche (interne) Informationen über diese Objekteigenschaft.
	// @xref <i DGeoFeature>
	[
		id(903), propget, helpcontext(DGeoFeature_ConfigData_prop), 
		helpstring("Liefert zusätzliche (interne) Informationen über diese Objekteigenschaft.")
	]
	HRESULT ConfigData ([out, retval] VARIANT *OptData);
};
	
///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE | TRIASTLB
// @interface DGeoObjectWins | Über das Interface <i DGeoObjectWins> sind sämtliche
// Eigenschaften und Methoden zur Beeinflussung einer Objektsammlung von 
// Objektrecherchefensternverfügbar.
// @base public | DTRiASBaseClass
// @base public | DTRiASCollection
// @supby <o GeoObjectWins>
// @xref <o GeoObjectWins>
// @group Eigenschaften von <i DGeoObjectWins>
// @index | DGEOOBJECTWINS & PROPERTY
// @group Methoden von <i DGeoObjectWins>
// @index | DGEOOBJECTWINS & METHOD
// @doc DGEOOBJECTWINS
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3DC-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Sammlung von TRiAS® Objektrecherchefenstern."),
	helpcontext(DGeoObjectWins_int)
]  
interface DGeoObjectWins : DTRiASCollection 
{
	// @doc DGEOOBJECTWINS | PROPERTY
	// @property HRESULT | DGeoObjectWins | ActGeoObjectWin | Die Eigenschaft <op .ActGeoObjectWin>
	// Liefert aktiviertes Objekt-Recherchefensters
	// @xref <i DGeoObjectWins>
	[
		id(1500), propget, helpcontext(DGeoObjectWins_ActGeoObjectWin_prop),
		helpstring("Liefert aktiviertes Objekt-Recherchefensters")
	]
	HRESULT ActGeoObjectWin ([out, retval]DGeoObjectWin **Win);
};

///////////////////////////////////////////////////////////////////////////////
// Ein Objektrecherchefenster
[
	odl, object, oleautomation, dual,
	uuid(8DE4E3DE-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("Ein TRiAS® Objektrecherchefenster."),
	helpcontext(DGeoObjectWin_int)
]  
interface DGeoObjectWin : DTRiASBaseClass 
{
	[id(9), propget] HRESULT Properties ([out, retval]DTRiASProperties **Props);
	[id(10)] HRESULT CreateProperty ([in, optional]VARIANT PropName, [in, optional]VARIANT PropType, 
		[in, optional]VARIANT Value, [out, retval]DTRiASProperty **Prop);
		
// StandardProperties
	[id(DISPID_VALUE), propget, helpstring("Fensterhandle")]
		HRESULT Value ([out, retval]long *Handle);
		
	[id(3), propget, helpstring("Caption des Objekt-Recherchefensters")]
		HRESULT Name ([out, retval]BSTR *Name);
	[id(3), propput, helpstring("Caption des Objekt-Recherchefensters")]
		HRESULT Name ([in]BSTR Name);

	[id(1600), propget, helpstring("Anzeigestatus des Objekt-Recherchefensters")]
		HRESULT Visible ([out, retval]VARIANT_BOOL *IsVisible);
	[id(1600), propput, helpstring("Anzeigestatus des Objekt-Recherchefensters")]
		HRESULT Visible ([in]VARIANT_BOOL IsVisible);
		
	[id(1603), helpstring("Liefert aktiviertes Objekt dieses Objekt-Recherchefensters.")]
		HRESULT GetActObject ([out, retval]DGeoObject **Obj);
	[id(1604), helpstring("Setzt aktiviertes Objekt dieses Objekt-Recherchefensters.")]
		HRESULT SetActObject ([in]DGeoObject *GeoObj);

// Methods
	[id(400), helpstring("Liste von Objektklassen in diesem Objekt-Rechrechefensters")]
		HRESULT GetClasses ([in, optional]VARIANT Classes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoClasses **Clss);
	[id(500), helpstring("Eine Objektklasse aus diesem Objekt-Rechrechefensters")]
		HRESULT GetClass ([in]VARIANT Class, [in, optional]VARIANT Mode, 
			[out, retval]DGeoClass **Cls);

	[id(600), helpstring("Liefert die Liste aller Objekte dieses Objekt-Rechrechefensters.")]
		HRESULT GetObjects ([in, optional]VARIANT ObjTypes, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObjects **Objs);
	[id(700), helpstring("Aktiviertes Objekt des Objekt-Recherchefensters")]
		HRESULT GetObject ([in]VARIANT GeoObj, [in, optional]VARIANT Mode, 
			[out, retval]DGeoObject **Obj);

	[id(1601), helpstring("Fügt Menupunkt in alle Objekt-Recherchefenster ein")]
		HRESULT AddMenuItem ([in]int IsSubMenu, [in]int Position,
							 [in]BSTR Text, [in, optional]VARIANT HelpText);

	[id(1602), helpstring("Liefert selektierte Objekte dieses Fensters")]
		HRESULT GetSelectedObjects ([out, retval]DGeoObjects **Objs);

	[id(1605), helpstring("Anzuzeigende Objekteigenschaft setzen.")]
		HRESULT SetShownFeature ([in] BSTR FeatName);

	[id(112), propget, helpstring("Linke Koordinate des Objekt-Recherchefenster.")]
		HRESULT Left ([out, retval]long *Left);
	[id(112), propput, helpstring("Linke Koordinate des Objekt-Recherchefenster verändern.")]
		HRESULT Left ([in]long Left);
	[id(113), propget, helpstring("Obere Koordinate des Objekt-Recherchefenster.")]
		HRESULT Top ([out, retval]long *Top);
	[id(113), propput, helpstring("Obere Koordinate des Objekt-Recherchefenster verändern.")]
		HRESULT Top ([in]long Top);
	[id(114), propget, helpstring("Breite des Objekt-Recherchefenster.")]
		HRESULT Width ([out, retval]long *Width);
	[id(114), propput, helpstring("Breite des Objekt-Recherchefenster verändern.")]
		HRESULT Width ([in]long Width);
	[id(115), propget, helpstring("Höhe des Objekt-Recherchefenster.")]
		HRESULT Height ([out, retval]long *Height);
	[id(115), propput, helpstring("Höhe des Objekt-Recherchefenster verändern.")]
		HRESULT Height ([in]long Height);

	[id(116), helpstring("Ist aktiviertes Recherchefenster.")]
		HRESULT IsActive ([out, retval]VARIANT_BOOL *IsActWin);
	[id(117), helpstring("Setzt aktiviertes Recherchefenster.")]
		HRESULT SetActive (void);

	[id(118), propget, helpstring("Farbe, die zur Objektmarkierung verwendet wird.")]
		HRESULT Color ([out, retval]long *MarkColor);
	[id(118), propput, helpstring("Farbe, die zur Objektmarkierung verwendet wird.")]
		HRESULT Color ([in]long MarkColor);

#if defined(_EXPLICIT_FUNCTIONS)
	[id(501), helpstring("Fügt eine Objektklasse zu diesem Objekt-Recherchefenster hinzu.")]
		HRESULT AddClass ([in]VARIANT Class, [in, optional]VARIANT ObjTypes, 
			[out, retval]DGeoClass **Cls);
	[id(502), helpstring("Entfernt alle Objekte einer Objektklasse aus diesem Objekt-Recherchefenster.")]
		HRESULT RemoveClass ([in]VARIANT Class, [in, optional]VARIANT ObjTypes);

	[id(701), helpstring("Fügt ein Objekt zu diesem Objekt-Recherchefenster hinzu.")]
		HRESULT AddObject ([in]VARIANT GeoObj, [out, retval]DGeoObject **Obj);
	[id(702), helpstring("Entfernt ein Objekt aus diesem Objekt-Recherchefenster.")]
		HRESULT RemoveObject ([in]VARIANT GeoObj);
#endif // _EXPLICIT_FUNCTIONS
};

///////////////////////////////////////////////////////////////////////////////
// TRiAS ObjektEigenschaft (read-only)
[
	odl, 
	object, 
	uuid(079638B6-3123-101C-BB62-00AA0018497C),
	helpstring("Eine externe TRiAS® Objekteigenschaft (read-only)."),
	dual,
	oleautomation,
	helpcontext(DObjectProperty_int)
]
interface DObjectProperty : IDispatch
{
	[id(2000), propget, helpstring("Berechnet den kumulativen Index für diese Objekteigenschaft.")] 
		HRESULT Cumulation ([out, retval] VARIANT *Value);
	[id(2001), propget, helpstring("Liefert Zähler, wie oft Objekteigenschaft seit dem letztem Reset berechnet wurde.")] 
		HRESULT Count([out, retval] long *Count);
	[id(2002), propget, helpstring("Liefert Namen dieser Objekteigenschaft.")] 
		HRESULT PropertyName ([out, retval] BSTR *Info);
	[id(2003), propget, helpstring("Liefert Eigenschaften dieser Objekteigenschaft.")] 
		HRESULT PropertyFlags ([out, retval] PROPERTYCAPS *Flags);

	[id(2004), helpstring("Liefert Info zu Helpdatei und Helpkontext.")] 
		HRESULT HelpInfo ([optional] VARIANT *HelpFile, [optional] VARIANT *HelpCtx,
						  [out, retval] BSTR *HelpInfo);
	[id(2005), helpstring("Setzt interne Datenstrukturen der Objekteigenschaft zurück.")] 
		HRESULT Reset (void);

	[id(2006), helpstring("Liefert die Objekteigenschaft für ein bestimmtes Objekt.")]
		HRESULT GetProperty ([in] DGeoObject *GeoObj, [out, retval] VARIANT *Value);
	[id(2007), helpstring("Wird nach Laden der Objekteigenschaft gerufen.")]
		HRESULT Init ([in] DApplication *App, [out, retval] VARIANT_BOOL *Success);
};

///////////////////////////////////////////////////////////////////////////////
// TRiAS ObjektEigenschaft (writeable)
[
	odl, 
	object, 
	uuid(079638D8-3123-101C-BB62-00AA0018497C),
	helpstring("Zusätzliches Interface für eine externe TRiAS® Objekteigenschaft (writeable)."),
	dual,
	oleautomation,
	helpcontext(DWriteAbleObjectProperty_int)
]
interface DWriteAbleObjectProperty : IDispatch
{
	[id(2020), helpstring("Modifiziert die Objekteigenschaft für ein bestimmtes Objekt.")]
		HRESULT SetProperty ([in] DGeoObject *GeoObj, [in] VARIANT Value);
};

///////////////////////////////////////////////////////////////////////////////
// TRiAS Objekteigenschaft, die selbst eine Recherche ausführen kann
[
	odl, 
	object, 
	uuid(4C135007-520A-4E4B-A3C1-9957522236AA),
	helpstring("Zusätzliches Interface für eine externe TRiAS® Objekteigenschaft (searchable)."),
	dual,
	oleautomation,
	helpcontext(DSearchAbleObjectProperty_int)
]
interface DSearchAbleObjectProperty : IDispatch
{
	[id(2030), helpstring("Fragt, ob eine bestimmte Recherche ausgeführt werden kann.")]
		HRESULT ConsiderSearch ([in] BSTR ToMatch, [in] VARIANT Mode, 
			[out, retval] VARIANT_BOOL *CanDoSearch);
	[id(2031), helpstring("Führt eine Recherche aus.")]
		HRESULT SearchObjects ([in] BSTR ToMatch, [in] VARIANT Mode, 
			[out, retval] DGeoObjects **ObjsResult);
};


///////////////////////////////////////////////////////////////////////////////
// @doc TYPELIB
// Die eigentliche TypeLibrary
[
	uuid(8DE4E3C0-4D53-101B-AAE1-E7E7E7E7E7E7), 
	helpstring("TRiAS Application Type Library"),
	helpfile(TYPELIB_HELPFILE_NAME),
	version(TYPELIB_VERSION),
	lcid(TYPELIB_LCID)
]
library TRiAS 
{
// zu importierende TLB's
	importlib("stdole32.tlb");
	importlib("stdole2.tlb");

	typedef 
	[
		public, v1_enum, 
		helpstring("Laufzeitidentifikation für TRiAS®-Datenobjekte."),
		helpcontext(RTTI_enum)
	]
	enum _tagRTTI RTTI;

#if !defined(_OPENMODE_DEFINED)
#define _OPENMODE_DEFINED
	typedef [public, v1_enum, helpstring("Modi zum Eröffnen eines Projektes"), helpcontext(OPENMODE_enum)]
	enum _tagOPENMODE OPENMODE;
#endif // _OPENMODE_DEFINED

	typedef [public, v1_enum, helpstring("Modi für 'GetDocument'"), helpcontext(DOCMODE_enum)]
	enum _tagDOCMODE DOCMODE;

	typedef [public, v1_enum, helpstring("Modi für 'GetView'"), helpcontext(VIEWMODE_enum)]
	enum _tagVIEWMODE VIEWMODE;

	typedef [public, v1_enum, helpstring("Modi für 'GetClass'"), helpcontext(GEOCLASSMODE_enum)]
	enum _tagGEOCLASSMODE GEOCLASSMODE;

	typedef [public, v1_enum, helpstring("Modi für 'GetObject'"), helpcontext(GEOOBJECTMODE_enum)]
	enum _tagGEOOBJECTMODE GEOOBJECTMODE;

	typedef [public, v1_enum, helpstring("Modi für 'GetObjectWin'"), helpcontext(GEOOBJWINMODE_enum)]
	enum _tagGEOOBJWINMODE GEOOBJWINMODE;

	typedef [public, v1_enum, helpstring("Modi für 'GetFeature'"), helpcontext(FEATUREMODE_enum)]
	enum _tagFEATUREMODE FEATUREMODE;

	typedef [public, v1_enum, helpstring("Modi für das Erzeugen eines Objekt-Recherchefensters"), helpcontext(CREATEOBJECTWIN_enum)]
	enum _tagCREATEOBJECTWIN CREATEOBJECTWIN;

	typedef [public, v1_enum, helpstring("Modi zum modifizieren der Geometrie eines Objektes ('PutGeometry')."), helpcontext(MODGEOMETRYMODE_enum)]
	enum _tagMODGEOMETRYMODE MODGEOMETRYMODE;

	typedef [public, v1_enum, helpstring("Mögliche Suchmodi für eine Objekteigenschaft."), helpcontext(FEATURESEARCHMODE_enum)]
	enum _tagFEATURESEARCHMODE FEATURESEARCHMODE;

	typedef [public, v1_enum, helpstring("Mögliche Suchmodi für eine Objekteigenschaft."), helpcontext(FEATURESEARCHQUALIFIER_enum)]
	enum _tagFEATURESEARCHQUALIFIER FEATURESEARCHQUALIFIER;

	typedef [public, v1_enum, helpstring("Mögliche Headereintragstypen."), helpcontext(HEADERFLAG_enum)]
	enum _tagHEADERFLAG HEADERFLAG;

	interface DApplication; 
	interface DDocuments;
	interface DDocument;
	interface DViews;
	interface DView;
	interface DGeoObjects;
	interface DGeoObject;
	interface DGeoClasses;
	interface DGeoClass;
	interface DGeoFeatures;
	interface DGeoFeature;
	interface DGeoObjectWins;
	interface DGeoObjectWin;
	interface DObjectProperty;
	interface DWriteAbleObjectProperty;
	interface DSearchObjects;
	interface DSearchAbleObjectProperty;

	interface DTRiASNotificationSink;
	interface DTRiASSysNotificationSink;

	interface IGeoComponent;
	interface IGeoComponentCallback;
	interface IGeoComponentUI;
	interface IGeoComponentUICallback;

///////////////////////////////////////////////////////////////////////////////
// neue InterfaceBezeichner
	typedef [restricted, hidden] DTRiASBaseClass _DTRiASBaseClass;
	typedef [restricted, hidden] DTRiASCollection _DTRiASCollection;
	typedef [restricted, hidden] DTRiASProperty _DTRiASProperty;
	typedef [restricted, hidden] DTRiASProperties _DTRiASProperties;
	typedef [restricted, hidden] DApplication _DApplication;
	typedef [restricted, hidden] DDocuments _DDocuments;
	typedef [restricted, hidden] DDocument _DDocument;
	typedef [restricted, hidden] DViews _DViews;
	typedef [restricted, hidden] DView _DView;
	typedef [restricted, hidden] DGeoClasses _DGeoClasses;
	typedef [restricted, hidden] DGeoClass _DGeoClass;
	typedef [restricted, hidden] DGeoObjects _DGeoObjects;
	typedef [restricted, hidden] DGeoObject _DGeoObject;
	typedef [restricted, hidden] DGeoFeatures _DGeoFeatures;
	typedef [restricted, hidden] DGeoFeature _DGeoFeature;
	typedef [restricted, hidden] DGeoObjectWins _DGeoObjectWins;
	typedef [restricted, hidden] DGeoObjectWin _DGeoObjectWin;

///////////////////////////////////////////////////////////////////////////////
// ganz neue InterfaceBezeichner (für Konsistenz von VB <--> BS)

// @doc OBJECT TRIASTLB
// @object GeoDocuments | Ein Datenobjekt vom Typ <o GeoDocuments> repräsentiert das 
	typedef [public, helpcontext(GeoDocuments_obj)] DDocuments GeoDocuments;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoViews | Ein Datenobjekt vom Typ <o GeoViews> repräsentiert eine Menge
// von Ansichten eines <tr> Projektes. Dieses Datenobjekt wird in erster Linie
// im Zusammenhang mit der Methode <om DDcoument.GetViews> verwendet, die sämtliche
// existierenden Ansichten des aktuellen Projektes in einer Datenobjektsammlung zur
// Verfügung stellt.
// @supint <i DViews> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASCollection> | Basisklasse für alle Collection-Interfaces von <tr>
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DViews>, <om DDocument.GetViews>
	typedef [public, helpcontext(GeoViews_obj)] DViews GeoViews;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoView | Ein Datenobjekt vom Typ <o GeoView> repräsentiert eine konkrete
// Ansicht eines <tr>- Projektes. Eine Ansicht ist die Zusammenfassung aller Objekte
// vorgegebener Objekttypen und Objektklassen sowie deren Darstellungsparameter.
// Eine Ansicht ist der wichtigste Interaktionsbegriff in <tr>, da fast alle
// Operationen die ein Nutzer über die <tr> Oberfläche ausführen kann, sich auf die 
// 'sichtbaren' Objekte beziehen, also auf die aktuelle Ansicht.
// @supint <i DView> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle.
// @xref <i DView>
	typedef [public, helpcontext(GeoView_obj)] DView GeoView;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoClasses | Ein Datenobjekt vom Typ <o GeoClasses> repräsentiert eine Menge 
// von Objektklassen eines <tr> -Projektes.
// @supint <i DGeoClasses> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASCollection> | Basisklasse für alle Collection-Interfaces von <tr>
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DGeoClasses>
	typedef [public, helpcontext(GeoClasses_obj)] DGeoClasses GeoClasses;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoClass | Ein Datenobjekt vom Typ <o GeoClass> repräsentiert eine
// Objektklasse eines <tr> -Projektes. Eine Objektklasse ist eine Menge von Einzelobjekten,
// die sich auf Grund einer gemeinsamen Haupteigenschaft zu einer Klasse zusammenfassen 
// lassen. In <tr> werden zwei Typen von Objektklassen unterschieden. Objektklassen,
// die bereits in einer der Datenquellen definiert sind (z.B. alle Objekte einer gegebenen
// Tabelle oder sämtliche Objekte eines Identifikators) und sogenannte Rechercheobjektmengen
// (d.h. alle Objekte, die einem beliebigen Recherchkriterium genügen).
// @supint <i DGeoClass> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle.
// @xref <i DGeoClass>
	typedef [public, helpcontext(GeoClass_obj)] DGeoClass GeoClass;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoObjects | Ein Datenobjekt vom Typ <o GeoObjects> repräsentiert eine 
// beliebge Menge von Einzelobjekten eines <tr> -Projektes.
// @supint <i DGeoObjects> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASCollection> | Basisklasse für alle Collection-Interfaces von <tr>
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DGeoObjects>
	typedef [public, helpcontext(GeoObjects_obj)] DGeoObjects GeoObjects;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoObject | Ein Datenobjekt vom Typ <o GeoObject> repräsentiert ... 
// @supint <i DGeoObject> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DGeoObject>
	typedef [public, helpcontext(GeoObject_obj)] DGeoObject GeoObject;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoFeatures | Ein Datenobjekt vom Typ <o GeoFeatures> repräsentiert ... 
// @supint <i DGeoFeatures> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASCollection> | Basisklasse für alle Collection-Interfaces von <tr>
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DGeoFeatures>
	typedef [public, helpcontext(GeoFeatures_obj)] DGeoFeatures GeoFeatures;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoFeature | Ein Datenobjekt vom Typ <o GeoFeature> repräsentiert ... 
// @supint <i DGeoFeature> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DGeoFeature>
	typedef [public, helpcontext(GeoFeature_obj)] DGeoFeature GeoFeature;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoObjectWins | Ein Datenobjekt vom Typ <o GeoObjectWins> repräsentiert ... 
// @supint <i DGeoObjectWins> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASCollection> | Basisklasse für alle Collection-Interfaces von <tr>
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DGeoObjectWins>
	typedef [public, helpcontext(GeoObjectWins_obj)] DGeoObjectWins GeoObjectWins;

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoObjectWin | Ein Datenobjekt vom Typ <o GeoObjectWin> repräsentiert ... 
// @supint <i DGeoObjectWin> | Stellt Methoden und Eigenschaften für den Umgang mit dem 
// vorliegenden Datenobjekt zur Verfügung.
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DGeoObjectWin>
	typedef [public, helpcontext(GeoObjectWin_obj)] DGeoObjectWin GeoObjectWin;

// @doc
// Helperinterface für Kontextverwaltung bei Projekten
	[
		object,
		uuid(C671F833-FCC9-11D2-9BFC-F46020524153),
		local,
		helpstring("IManageDocumentContext Interface"),
		pointer_default(unique)
	]
	interface IManageDocumentContext : IUnknown
	{
		HRESULT GetCtxHandle (INT_PTR *Ctx);
		HRESULT SetCtxHandle (INT_PTR Ctx);
	};

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object Application | Ein Datenobjekt vom Typ <o Application> repräsentiert das 
// Programm <tr> in seiner Gesamtheit. Es gestattet den Zugriff auf alle Einzelelemente, 
// die bei der Arbeit mit <tr> auftreten, wie <o GeoDocument> (Projekt), <o GeoView> (Ansicht), 
// <o GeoClass> (Objektklasse) oder <o GeoObject> (Geometrieobjekt).
// @comm Es existiert jeweils genau ein Objekt vom Typ <o Application>, das jeweils genau eine 
// Instanz des Programmes <tr> repräsentiert. 
// Diesem Objekt kann kein neuer Wert zugewiesen werden. Es ist nicht möglich ein weiteres 
// Objekt vom Typ Application zu erzeugen ohne eine neue Programminstanz von <tr> zu starten.
// @comm <b Interne Makrosprache>: Dieses Objekt ist vordefiniert, existiert genau in einer Instanz
// und muß nicht deklariert oder definiert werden. Es heißt 'TRiAS'. 
// @supint <i DApplication> | Methoden und Eigenschaften, die den Zugriff auf die zugehörige
// Programminstanz von <tr> ermöglichen.
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DApplication>, <o GeoDocument>, <o GeoView>, <o GeoClass>, <o GeoObject>
	[
		uuid(8DE4E3C2-4D53-101B-AAE1-E7E7E7E7E7E7), 
		helpstring("TRiAS® Applikations-Datenobjekt."),
		helpcontext(Application_obj)
	]  
	coclass Application 
	{
		[default] interface DApplication;
//		[default, source] interface DTRiASNotificationSink;
		[source, restricted] interface ITRiASNotificationSink;
//		[source, restricted] interface DTRiASSysNotificationSink;
		[source, restricted] interface ITRiASSysNotificationSink;
	};

///////////////////////////////////////////////////////////////////////////////
// @doc OBJECT TRIASTLB
// @object GeoDocument | Ein Datenobjekt vom Typ <o GeoDocument> repräsentiert 
// das aktuelle <tr> Projekt, d.h. die Gesamtheit aller die Zusammenfassung aller Objekte
// <o GeoObject>, Objektklassen <o GeoClass> und Ansichten <o GeoView> aller derzeit in 
// einer <tr> Sitzung referenzierter Datenquellen.
// @supint <i DDocument> | Über das Interface <i DDocument> sind sämtliche Eigenschaften
// und Methoden zugänglich, die ein <tr> Projekt betreffen
// @supint <i DTRiASBaseClass> | BasisInterface für sämtliche <tr>- Interfaces der 
// OLE-Automationsschnittstelle
// @xref <i DDocument>
// @xref <o GeoView>, <o GeoClass>, <o GeoObject>
	[
		uuid(937EEB40-2234-101B-AAE1-E7E7E7E7E7E7), 
		helpstring("Ein TRiAS® Projekt."),
		helpcontext(GeoDocument_obj)
	]  
	coclass GeoDocument
	{
		[default] interface DDocument;
		[restricted] interface IManageDocumentContext;
	}

// @doc
	[
		uuid(ED9655EA-3122-101C-BB62-00AA0018497C), 
		helpstring("Wrapper für externe Erweiterungen"),
		hidden
	]
	coclass WrapperExtension
	{
		[default] interface IInitDTRiASExtension;
		[source, restricted] interface DTRiASExtension;
	};

// @doc
	[
		uuid(CF883AF6-553F-101B-AAE1-E7E7E7E7E7E7),
		helpstring("TRiASDataObject Class")
	]
	coclass TRiASDataObject
	{
		[default] interface ITRiASDataObject;
		interface IDataObject;
	};

// @doc
	[
		uuid(07963819-3123-101C-BB62-00AA0018497C),
		helpstring("General purpose ProgressIndcator")
	]
	coclass ProgressIndicator
	{
		[default] interface IProgressIndicator2;
	}

// ACHTUNG ist ein Synonym für PropertySequenceService
	[
		uuid(92BB6B5E-3F46-4236-A0B6-DDDBD632CE1D),
		helpstring("GeoComponentSequenceService Class")
	]
	coclass GeoComponentSequenceService
	{
		[default] interface IPropertySequenceService;
	};
}; // end of library TRiASTLB

	