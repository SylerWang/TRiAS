
//////////////////////////////////////////////////////////////////////////////
//
//  FILENAME:          legmerky.cxx
//
//  FILE DESCRIPTION:  Source file with derived parser class support
//
//  Input file:        obj32\Legmerkm.ypp
//  Options:           -no_ast_dump -no_debug -table fast -no_line -no_far
//                     -no_microsoft_precompiled_header 
//  Character Set:     CHARSET ASCII8
//  Output Directory:  current directory
//  Include Paths:     current directory
//
//  Automatically generated by Yacc++ Revision 2.3 (1999 January 4)
//  on Sat Nov 13 20:04:47 2004
//
//////////////////////////////////////////////////////////////////////////////

#define yy_psr_c_ 1
#define yy_psr_code_ 1
#define yy_psr_defn_ 1
#define yy_mypsr_c_ 1

#include "yy_ansi.h"
#include "yy_stdio.h"
#include "yy_stdlb.h"
#include "yy_strng.h"
#include "yy_trace.h"
#include "yy_asrt.h"
#include "yy_bool.h"
#include "legmerky.hxx"

static yy_psr_LegendMerkmal_ref_factory_obj yy_psr_LegendMerkmal_ref_factory;

char *yy_psr_LegendMerkmal_spelling[]
= {
    /*   -2  */    "yy_error",
    /*    0  */    "yy_eof",
    /*    0  */    "yy_eof",
    /*    1  */    "INTEGER",
    /*    2  */    "STRING",
    /*    3  */    "P",
    /*    4  */    "p",
    /*    5  */    "L",
    /*    6  */    "l",
    /*    7  */    "F",
    /*    8  */    "f",
    /*    9  */    "T",
    /*   10  */    "t",
    /*   11  */    "H",
    /*   12  */    "h",
    /*   13  */    "HEntryInfo",
    /*   14  */    "TEntryInfo",
    /*   15  */    "FEntryInfo",
    /*   16  */    "LEntryInfo",
    /*   17  */    "PEntryInfo",
    /*   18  */    "MerkmalsInfo",
    /*   19  */    "MerkmalsInfos",
};

int yy_psr_LegendMerkmal_cmd[yy_psr_LegendMerkmal_obj::yy_psr_cmd_max_]
={
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 138, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 138, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 204, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 204, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 270, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 270, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 336, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 336, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 402, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 402, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 72, 0,
yy_psr_obj::yy_psr_ign_chg_, 468, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ract_rdc_, 0, yy_psr_LegendMerkmal_obj::MerkmalsInfos_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 138, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 138, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 204, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 204, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 270, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 270, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 336, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 336, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 402, 0,
yy_psr_obj::yy_psr_push_shf_chg_, 402, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_push_shf_rdc_, yy_psr_LegendMerkmal_obj::MerkmalsInfo_, 0,
yy_psr_obj::yy_psr_shf_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 534, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 600, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 666, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 732, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 798, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_acpt_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 864, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 930, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 996, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 1062, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_chg_, 1128, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 1, yy_psr_LegendMerkmal_obj::PEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 2, yy_psr_LegendMerkmal_obj::LEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 3, yy_psr_LegendMerkmal_obj::FEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 4, yy_psr_LegendMerkmal_obj::TEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,

yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,
yy_psr_obj::yy_psr_shf_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_ract_rdc_, 5, yy_psr_LegendMerkmal_obj::HEntryInfo_,
yy_psr_obj::yy_psr_err_, 0, 0,

};

yy_psr_start_state_tbl yy_psr_LegendMerkmal_start_state[]
= {
{yy_psr_LegendMerkmal_obj::MerkmalsInfos_, 6}, 
};

int yy_psr_LegendMerkmal_last_start[]
= {
/* yy_psr_class_LegendMerkmal_: */ 0, 
};

yy_psr_LegendMerkmal_obj::yy_psr_LegendMerkmal_obj(
    yy_lex_ptr  yy_this_lex_obj_ptr,
    int         yy_psr_new_class,
    int         yy_psr_new_start,
    int         yy_psr_new_left_max,
    int         yy_psr_new_rt_max,
    int         yy_psr_new_rdc_max)
   : yy_psr_obj_fast(
    yy_true,
     -2,
     19,
     12,
     yy_psr_LegendMerkmal_cmd,
     yy_this_lex_obj_ptr,
     0,
     NULL,
     NULL,
     yy_psr_LegendMerkmal_spelling,
     yy_psr_LegendMerkmal_start_state,
     yy_psr_LegendMerkmal_last_start,
     yy_psr_LegendMerkmal_ref_factory,
     yy_psr_max_class_,
     yy_psr_new_left_max,
     yy_psr_new_rt_max,
     yy_psr_new_rdc_max),
    
		m_pEntries (NULL),
		m_iEntryCnt (0)
	
{
    yy_psr_start(yy_psr_new_class, yy_psr_new_start);


}   // constructor for yy_psr_LegendMerkmal_obj


yy_psr_LegendMerkmal_obj::~yy_psr_LegendMerkmal_obj()
{

		DeleteAST();
	
}   // destructor for yy_psr_LegendMerkmal_obj


void yy_psr_LegendMerkmal_obj::yy_psr_do_action(
    int            yy_psr_action_index)
{

    switch (yy_psr_action_index) {

case(0): {
 yy_psr_rdc() = MerkmalsInfos_; yy_psr_rslt() = yy_ast_ptr(new MerkmalsInfos(this));
	} break;  // case 0

case(1): {
 yy_psr_rdc() = PEntryInfo_; yy_psr_rslt() = yy_ast_ptr(new PEntryInfo(this));
	} break;  // case 1

case(2): {
 yy_psr_rdc() = LEntryInfo_; yy_psr_rslt() = yy_ast_ptr(new LEntryInfo(this));
	} break;  // case 2

case(3): {
 yy_psr_rdc() = FEntryInfo_; yy_psr_rslt() = yy_ast_ptr(new FEntryInfo(this));
	} break;  // case 3

case(4): {
 yy_psr_rdc() = TEntryInfo_; yy_psr_rslt() = yy_ast_ptr(new TEntryInfo(this));
	} break;  // case 4

case(5): {
 yy_psr_rdc() = HEntryInfo_; yy_psr_rslt() = yy_ast_ptr(new HEntryInfo(this));
	} break;  // case 5

    default:

    // bad parser action code operand

#if yy_trace_after_error_ <= yy_trace_
        yy_psr_dmp(yy_psr_cur_lex()->yy_lex_cur_inp()->yy_inp_cur_err(),
            "bad parser action code operand");
#endif /*yy_trace_after_error_ <= yy_trace_ */
        yy_err_report(401, yy_psr_action_index);
        yy_psr_abort();
        return;

    }   // end switch

}   // yy_psr_LegendMerkmal_obj::yy_psr_do_action()


HEntryInfo::HEntryInfo(
    yy_psr_LegendMerkmal_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last() - 1)
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+2);
            }
        }
    else {
        yy_this_operand = NULL;
        }

}   // constructor for parser non-terminal HEntryInfo

HEntryInfo::~HEntryInfo()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal HEntryInfo

int HEntryInfo::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // HEntryInfo::yy_type()

int HEntryInfo::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // HEntryInfo::yy_num_operands()

yy_ref_obj &HEntryInfo::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // HEntryInfo::yy_operand()

TEntryInfo::TEntryInfo(
    yy_psr_LegendMerkmal_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last() - 1)
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+2);
            }
        }
    else {
        yy_this_operand = NULL;
        }

}   // constructor for parser non-terminal TEntryInfo

TEntryInfo::~TEntryInfo()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal TEntryInfo

int TEntryInfo::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // TEntryInfo::yy_type()

int TEntryInfo::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // TEntryInfo::yy_num_operands()

yy_ref_obj &TEntryInfo::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // TEntryInfo::yy_operand()

FEntryInfo::FEntryInfo(
    yy_psr_LegendMerkmal_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last() - 1)
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+2);
            }
        }
    else {
        yy_this_operand = NULL;
        }

}   // constructor for parser non-terminal FEntryInfo

FEntryInfo::~FEntryInfo()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal FEntryInfo

int FEntryInfo::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // FEntryInfo::yy_type()

int FEntryInfo::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // FEntryInfo::yy_num_operands()

yy_ref_obj &FEntryInfo::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // FEntryInfo::yy_operand()

LEntryInfo::LEntryInfo(
    yy_psr_LegendMerkmal_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last() - 1)
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+2);
            }
        }
    else {
        yy_this_operand = NULL;
        }

}   // constructor for parser non-terminal LEntryInfo

LEntryInfo::~LEntryInfo()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal LEntryInfo

int LEntryInfo::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // LEntryInfo::yy_type()

int LEntryInfo::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // LEntryInfo::yy_num_operands()

yy_ref_obj &LEntryInfo::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // LEntryInfo::yy_operand()

PEntryInfo::PEntryInfo(
    yy_psr_LegendMerkmal_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc()),
      yy_this_num_operands(yy_this_psr_ptr->yy_psr_last() - 1)
{
    int yy_index;

    if (0 < yy_this_num_operands) {
        yy_this_operand = new yy_ref_obj[yy_this_num_operands];

        if (yy_this_operand == NULL) {
            yy_err_report(406);
            yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
            }

        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            yy_this_operand[yy_index] = yy_this_psr_ptr->yy_psr_ref(yy_index+2);
            }
        }
    else {
        yy_this_operand = NULL;
        }

}   // constructor for parser non-terminal PEntryInfo

PEntryInfo::~PEntryInfo()
{
    int yy_index;

    if (yy_this_operand != NULL && 0 < yy_this_num_operands) {
        for (yy_index = 0; yy_index < yy_this_num_operands; ++yy_index) {
            delete yy_ast_ptr(yy_this_operand[yy_index]);
            }

        delete [] yy_this_operand;
        yy_this_operand = NULL;
        }

}   // destructor for parser non-terminal PEntryInfo

int PEntryInfo::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // PEntryInfo::yy_type()

int PEntryInfo::yy_num_operands(
    int yy_new_num_operands)
{

    yy_this_num_operands = yy_new_num_operands;

    return(yy_this_num_operands);

}   // PEntryInfo::yy_num_operands()

yy_ref_obj &PEntryInfo::yy_operand(
    int yy_operand_num,
    yy_ref_obj yy_new_operand)
{

    if (yy_ast_ptr(yy_this_operand[yy_operand_num]) != NULL) {
        delete yy_ast_ptr(yy_this_operand[yy_operand_num]);
        }

    yy_this_operand[yy_operand_num] = yy_new_operand;

    return(yy_this_operand[yy_operand_num]);

}   // PEntryInfo::yy_operand()

MerkmalsInfos::MerkmalsInfos(
    yy_psr_LegendMerkmal_obj *yy_this_psr_ptr)
    : yy_this_type(yy_this_psr_ptr->yy_psr_rdc())
{

		((yy_psr_LegendMerkmal_obj *)(yy_this_psr_ptr)) -> EnterLegEntries();
		delete this;	// wird nicht mehr gebraucht
	
}   // constructor for parser non-terminal MerkmalsInfos

MerkmalsInfos::~MerkmalsInfos()
{

}   // destructor for parser non-terminal MerkmalsInfos

int MerkmalsInfos::yy_type(
    int yy_new_type)
{

    yy_this_type = yy_new_type;

    return(yy_this_type);

}   // MerkmalsInfos::yy_type()


    yy_psr_LegendMerkmal_ref_factory_obj::yy_psr_LegendMerkmal_ref_factory_obj()
{
}   // yy_psr_LegendMerkmal_ref_factory_obj

    yy_psr_LegendMerkmal_ref_factory_obj::~yy_psr_LegendMerkmal_ref_factory_obj()
{
}   // ~yy_psr_LegendMerkmal_ref_factory_obj

yy_ref_ptr yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_new_obj(
    int              yy_type,
    int              yy_int) const
{

    yy_ref_ptr       yy_object;

    yy_object = new yy_ref_obj(yy_type, yy_int);
    if (yy_object == NULL) {
        yy_err_report(406);
        yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
        }

    return(yy_object);

}   // yy_ref_factory_new_obj

yy_ref_ptr yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_new_array(
    size_t           yy_size) const
{

    yy_ref_ptr       yy_array;

    assert(yy_size < (UINT_MAX / sizeof(yy_ref_obj)));
    yy_array = new yy_ref_obj [yy_size];
    if (yy_array == NULL) {
        yy_err_report(406);
        yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
        }

    return(yy_array);

}   // yy_ref_factory_new_array

void yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_delete(
    yy_ref_ptr       yy_ref) const
{
    if (yy_ref != NULL) {
        delete yy_ref;
        }

}   // yy_ref_factory_delete

void yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_delete_array(
    yy_ref_ptr       yy_array) const
{

    if (yy_array != NULL) {
        delete [] yy_array;
        }

}   // yy_ref_factory_delete_array

yy_ref_ptr yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_grow_array(
    size_t           yy_new_size,
    yy_ref_ptr       yy_old_array,
    size_t           yy_old_size,
    size_t           yy_copy_bottom,
    size_t           yy_copy_top) const
{
    size_t           yy_index;
    yy_ref_ptr       yy_new_array;

//  create a new array

    assert(yy_old_size < yy_new_size);
    assert(yy_new_size < (UINT_MAX / sizeof(yy_ref_obj)));
    yy_new_array = new yy_ref_obj [yy_new_size];
    if (yy_new_array == NULL) {
        yy_err_report(406);
        yy_assert_fail("space unavailable from new", __FILE__, __LINE__);
        return(NULL);
        }

//  copy the current contents into the new array

    for (yy_index = 0; yy_index < yy_copy_bottom; ++yy_index) {
        yy_new_array[yy_index] = yy_old_array[yy_index];
        }

    for (yy_index = 0; yy_index < yy_copy_top; ++yy_index) {
        yy_new_array[yy_new_size - yy_copy_top + yy_index] =
            yy_old_array[yy_old_size - yy_copy_top + yy_index];
        }

    return(yy_new_array);

}   // yy_ref_factory_grow_array

void yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_assign(
    yy_ref_obj       &yy_target,
    const yy_ref_obj &yy_source) const
{
    yy_target = yy_source;

}   // yy_ref_factory_assign

void yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_array_assign(
    yy_ref_ptr       yy_array,
    size_t           yy_target,
    size_t           yy_source) const
{
    yy_array[yy_target] = yy_array[yy_source];

}   // yy_ref_factory_array_assign

void yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_array_assign(
    yy_ref_ptr       yy_array,
    size_t           yy_target,
    const yy_ref_obj &yy_source) const
{
    yy_array[yy_target] = yy_source;

}   // yy_ref_factory_array_assign

yy_ref_obj &yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_array_deref(
    yy_ref_ptr       yy_array,
    size_t           yy_source) const
{
    return (yy_array[yy_source]);

}   // yy_ref_factory_array_deref

int &yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_array_deref_int(
    yy_ref_ptr       yy_array,
    size_t           yy_source) const
{
    return (yy_array[yy_source].yy_int);

}   // yy_ref_factory_array_deref_int

int &yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_factory_array_deref_type(
    yy_ref_ptr       yy_array,
    size_t           yy_source) const
{
    return (yy_array[yy_source].yy_type());

}   // yy_ref_factory_array_deref_type

size_t yy_psr_LegendMerkmal_ref_factory_obj::yy_ref_obj_size(
    size_t           yy_ref_size,
    const char       *file,
    int              lineno) const
{
    size_t           yy_local_ref_size;

    yy_local_ref_size = sizeof(yy_ref_obj);

    if (yy_local_ref_size != yy_ref_size) {
        yy_err_report(408, __FILE__, __LINE__, file, lineno);
        assert(yy_local_ref_size == yy_ref_size);
        }

    return (yy_local_ref_size);

}   // yy_ref_obj_size

const char *yy_psr_LegendMerkmal_ref_factory_obj::yy_restore_data(
    const char               *yy_data_ptr,
    yy_ref_ptr               yy_array,
    size_t           yy_target) const
{
    yy_memmove(yy_array + yy_target, yy_data_ptr,
            sizeof(yy_ref_obj));

    yy_data_ptr += sizeof(yy_ref_obj);

    return(yy_data_ptr);

}  // yy_restore_data

char *yy_psr_LegendMerkmal_ref_factory_obj::yy_save_data(
    char             *yy_data_ptr,
    yy_ref_ptr               yy_array,
    size_t           yy_source) const
{
    yy_memmove(yy_data_ptr, yy_array + yy_source,
            sizeof(yy_ref_obj));

    yy_data_ptr += sizeof(yy_ref_obj);

    return(yy_data_ptr);

}  // yy_save_data

size_t yy_psr_LegendMerkmal_ref_factory_obj::yy_sizeof_data(void) const
{
    return(sizeof(yy_ref_obj));

}  // yy_sizeof_data
