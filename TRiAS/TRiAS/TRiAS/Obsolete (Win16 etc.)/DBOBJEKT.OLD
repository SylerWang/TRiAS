// Funktionen fuer DatenBasisObjekt --------------------------------------------
// File: DBOBJEKT.CXX

#include "triaspre.hxx"

#if !defined(WIN32)
#include <toolhelp.h>
#endif
#include <xtensnxx.h>
#include <xtensnd.h>
#include "clbmpobj.hxx"

#include "triasres.h"

#if defined(WIN32)
#include <undoguid.h>		// GUID
#include <iunredo.hxx>		// Interface
#include <relliste.hxx>
#endif

#include "viewtree.hxx"

#ifdef _DEBUG
#undef THIS_FILE
static char BASED_CODE THIS_FILE[] = __FILE__;
#endif

// globale Daten
extern Window *CurrActW;
extern short GCancelFlag;
extern App *CurrApp;

extern HPALETTE hPalette;		// AnwendungsFarbPalette
extern HINSTANCE hInstance;

extern unsigned long TreeOptDelta;

extern bool PrintEFlag;

extern bool LegendeCFlag;
extern bool LegendToRepaint;
extern bool GenerateLegendOnly;

extern short MakeCompleteNewVisInfo (VisInfo **ppVI, short iBits, bool fSpecial = false);
extern short VTypToBits (VisType);
extern short OTypToBits (ObjTyp);

// externe Funktionsdeklarationen ---------------------------------------------
Dimension GetDotsPerMM (HDC hDC);
void EXPORTTRIAS SetNotVisible (void *pObj);
bool WriteTextMerkmal (short iTTyp, long lTarget, long lMCode, char *pText);

// Konstruktor
DatenBasisObjekt :: DatenBasisObjekt (const GeoDB &DB, unsigned int MTyp, pPen pP, pBrush pB)
		  : ExtShapeObject (Point (0, 0), Dimension (), pP, pB)
{
	_toPaint = PF_NOTDRAWED;
	_MarkerTyp = MTyp;
	_DBOCont = ObjContainer (0, 0, 0, 0);
	_SightMenu = NULL;
	_pGeoDB = new GeoDB (DB);
	_Idents = new CIdTree (*_pGeoDB);
	_Shapes = new ObjektListe;
	_pCT = NULL;
	_pSightName = NULL;
	m_pViews = NULL;
	_iDrawSem = false;

	m_pBmp15sw = NULL;
	m_pBmp23sw = NULL;
	m_pBmp32sw = NULL;
	m_iBmpCnt = 0;
	m_fNewPnts = false;
	m_pPunktIDs = NULL;
	
	LoadBitmapBars();

	if (!_Idents || !_Shapes || !_pGeoDB) {
		db_error (EC_NOMEMORY, RC_ctDatenBasisObjekt);
		_toPaint = PF_INVALID;
	} else
		_toPaint = PF_NOTDRAWED;
}

DatenBasisObjekt :: DatenBasisObjekt (void)
		  : ExtShapeObject (Point (0, 0), Dimension (), NULL, NULL)
{
	_toPaint = PF_INVALID;
	_MarkerTyp = 0;
	_DBOCont = ObjContainer (0, 0, 0, 0);
	_SightMenu = NULL;
	_pGeoDB = new GeoDB;
	_Idents = new CIdTree (*_pGeoDB);
	_Shapes = new ObjektListe;
	_pCT = NULL;
	_pSightName = NULL;
	m_pViews = NULL;
	_iDrawSem = false;

	m_pBmp15sw = NULL;
	m_pBmp23sw = NULL;
	m_pBmp32sw = NULL;
	m_iBmpCnt = 0;	
	m_fNewPnts = false;
	m_pPunktIDs = NULL;
	
	if (!_Idents || !_Shapes || !_pGeoDB) 
		db_error (EC_NOMEMORY, RC_ctDatenBasisObjekt);
}

// BitmapsStreifen für Punktobjekte laden -------------------------------------
void DatenBasisObjekt :: LoadBitmapBars (void) 
{
	if (GetGeoDBVersion() >= VERSION0500000B) {
	// neue DatenBasis
	HeaderEntry rsOldPts (DB(), IDS_USEOLDPOINTSTYLE);

		if (rsOldPts.EntryLong (0) == 1) return;	// alte Punkte
	} else {
	// alte DatenBasis
	HeaderEntry rsNewPts (DB(), IDS_USENEWPOINTSTYLE);

		if (rsNewPts.EntryLong (0) == 0) return;	// alte Punkte
	}

// neue Punktsymbole verwenden
	DELETE (m_pBmp15sw);
	DELETE (m_pBmp23sw);
	DELETE (m_pBmp32sw);

	m_pBmp15sw = CBitmapBar :: CreateInstance (ResID (IDB_BITMAP_15_SW), ResID (IDR_BMPOFFSETS15));
	m_pBmp23sw = CBitmapBar :: CreateInstance (ResID (IDB_BITMAP_20_SW), ResID (IDR_BMPOFFSETS23));
	m_pBmp32sw = CBitmapBar :: CreateInstance (ResID (IDB_BITMAP_32_SW), ResID (IDR_BMPOFFSETS32));

	DELETE (m_pPunktIDs);
	m_pPunktIDs = CMapPunktID :: CreateInstance (ResID (IDR_PUNKTIDTABLE));
	
	if (m_pBmp15sw && m_pBmp23sw && m_pBmp32sw && m_pPunktIDs) {
	Dimension dim = m_pBmp15sw -> GetFullSize();
		
		m_iBmpCnt = short(dim.Width()/dim.Height());	// Anzahl der Punktsymbole
		m_fNewPnts = true;
	}
}	


// Umschließendes Rechteck -----------------------------------------------------
Rectangle EXPORTTRIAS DatenBasisObjekt :: BoundingBox (void) 
{
	Point Pt1 = OCtoDC (_DBOCont.XMin(), _DBOCont.YMin());
	Point Pt2 = OCtoDC (_DBOCont.XMax(), _DBOCont.YMax());

return Rectangle (Pt1, Pt2);
}

void EXPORTTRIAS SetNotVisible (void *pObj) 
{
	((CIdentifikator *)pObj) -> SetInvisible();
}

// Ganzes DBObjekt zeichnen ---------------------------------------------------
void DatenBasisObjekt :: DrawEx (DWORD dwData) 
{
	if (!_iDrawSem) {
		_iDrawSem = true;		// nur einmal gleichzeitig zeichnen

	HDC hDCs[2];
	
		hDCs[0] = Handle (API_DRAWOBJECT_HDC);
		hDCs[1] = Handle (API_TARGET_HDC);

		SaveDC (hDCs[0]);		// alten DC speichern
		DotsPerMM() = GetDotsPerMM (hDCs[1]);

	// ExposedArea in DB-Koordinaten umrechnen
	Rectangle rcEA = EA();
	ObjContainer ocT = rcEA;
	
		SetExpOC (ocT);		// ExposedArea umrechnen
		EvalMasstab();		// Masstabskoeffizienten berechnen

#if defined(WIN32)
	// Regions haben in Metafiles nichts zu suchen !?
		if (!PrintEFlag || GetObjectType (hDCs[0]) != OBJ_ENHMETADC)
#endif // WIN32
		{
		// CompoundRegion generieren
		Rectangle *pRc = (dwData != 0) ? (Rectangle *)dwData : &rcEA;
		HRGN hRgn = CreatePaintRegion (hDCs[1], *pRc, ClipRegionONr());

			SelectClipRgn (hDCs[0], hRgn);
			DeleteObject (hRgn);		// Region wieder löschen
		}
		FullDCInit() = FDC_NoInit;	// nicht für jedes Objekt DC initialisieren

	// Palette einstellen       
	HPALETTE hOldPalette;

		if (hPalette != NULL) {
			hOldPalette = SelectPalette (hDCs[0], hPalette, false);
			RealizePalette (hDCs[0]);
		}

	int oldBkMode = SetBkMode (hDCs[0], TRANSPARENT);
	int oldFillMode = SetPolyFillMode (hDCs[0], ALTERNATE);

	// alle Idents als nicht gezeichnet markieren wenn Legende neu 
	// gezeichnet werden soll
		if (LegendToRepaint)
			Idents().IdentTree().Every (SetNotVisible);

	// Objektgeometrien Lesen und Zeichnen / nur Zeichnen
		GetAsyncKeyState (VK_ESCAPE);	// Buffer rücksetzen

		DEXN_EraseBackGround (hDCs);	// Hintergrund zeichnen
		NextDraw (dwData);            	// alles andere zeichnen
		if (!(GCancelFlag & GCFAppClosed))	// wenn App nicht geschlossen wurde
			DEXN_PaintTopLayer (hDCs);	// DeckerLayer zeichnen
		
	// DC rücksetzen
		if (hPalette)
			SelectPalette (hDCs[0], hOldPalette, false);
		SetPolyFillMode (hDCs[0], oldFillMode);
		SetBkMode (hDCs[0], oldBkMode);

		RestoreDC (hDCs[0], -1);	// ursprünglichen DC wiederherstellen

		_iDrawSem = false;
	}
}


// Testen, ob ein Objekt zur aktuellen Visualisieruing gehört -----------------
static bool FMatchGeoTyp (VisType iVTyp, ObjTyp iDefVTyp) 
{
	if (iDefVTyp == OT_KO) return true;		// bei KO alles malen

	switch (iVTyp) {
	case VT_Punkt:
		return iDefVTyp == OT_PUNKT;

	case VT_Linie:
		return iDefVTyp == OT_KANTE;

	case VT_Flaeche:
		return iDefVTyp == OT_FLAECHE || iDefVTyp == OT_KREIS;

	case VT_Text:
		return iDefVTyp == OT_TEXT;

	case VT_Default:
		break;
	}

return true;
}

// Alle Objekte eines Id's einlesen und zeichnen ------------------------------

/*
inline ulong ulmax (ulong x, ulong y)
{
	return (x < y) ? y : x;
}
*/

ErrCode DatenBasisObjekt :: GetGIAll (CIdRefLock &lP, bool fTest, DWORD) 
{
ErrInstall EI_Noon (EC_NOON);
// ErrInstall EI_NoEOK (WC_NOEOK);
ErrCode EC;
#if !defined(WIN32)
TIMERINFO TI;

	memset (&TI, '\0', sizeof(TIMERINFO));
	TI.dwSize = sizeof (TIMERINFO);
#endif // WIN32

long FlexNum = 0;               // Nummer des intern belegten Flex'
CIdRef *pP = (CIdRef *)lP;
CIdentifikator *pId = &pP -> rCId();

	if (pId == NULL) return EC_OKAY;		// Ident nicht gefunden

long lIdent = pId -> Id();

// Abfragen, ob eine Erweiterung etwas mit diesem Ident zu tun haben will
	pId -> DType() = DEXN_DrawIdentifikator (lIdent) & DT_DrawingMask;

// Alle Objekte mit diesem Id holen und zeichnen
short OTypes = 0;		// ObjektTypen dieses Idents

	if ((EC = DB().FindId (lIdent, &FlexNum, &OTypes)) != EC_OKAY) {
		if (FlexNum != 0)
			ferel_ (&FlexNum);
		return EC;          			// sonst Fehler
	}

// wenn Komplexobjekte da sind, dann alle erlauben
	if (OTypes & TPKO) OTypes |= TPAll;

// evtl. nicht vorhandene Objekttypen rauswerfen
	pId -> SetOTypes (OTypes);
	pId -> EnablePainting (pId -> toPaint() & OTypes);	// Typen auf Realitäten einschränken
	pId -> SetSpecial (pId -> GetSpecial() & OTypes);	// auch nicht visualisierte Typen einschränken

long numObj;  
ExtShapeObjectDCreator DOC (Shapes());
ExtShapeObject *pDBO;
CTable tabONr (Shapes().ObjNumTree());
DWORD dwDelta = 0;

// ulong lCount = Shapes().ObjNumTree().Count();
// ulong lCnt = ulmax (TreeOptDelta, lCount ? 2*(ulong)log (lCount)/log(2.0) : 1); 
ulong lCnt = max (TreeOptDelta, Shapes().ObjNumTree().Count());
					// anfängliches OptimierungsDelta
// ulong lCmp = 0;			// Anzahl der Vergleiche beim einfügen
Rectangle CRc = CurrActW -> CanvasRect();
ObjContainer OC;

	OC = CRc;

bool iAllLoaded = pId -> AreAllLoaded();	// TeilFlag merken

	pId -> AllLoaded();			// TeilFlag rücksetzen
	felen_ (&FlexNum, &numObj);

	for (long i = 1L; i <= numObj; i++) {
	long ObjNummer;
	VisInfo *pVI;

	// nach einlesen einer vorgebbaren Menge von Objekten Baum optimieren
		if (dwDelta > Shapes().OptTime()) {
#if !defined(WIN32)
			TimerCount (&TI);

		DWORD dwT = TI.dwmsSinceStart;
#else
		DWORD dwT = timeGetTime();
#endif
			Shapes().ObjIdTree().Optimize();
			Shapes().ObjNumTree().Optimize();

			DEXD_ObjectTreeOptimized (dwDelta);

#if !defined(WIN32)
			TimerCount (&TI);
			Shapes().OptTime() = (TI.dwmsSinceStart - dwT) / 10;
#else
			Shapes().OptTime() = (timeGetTime() - dwT) / 10;
#endif
			if (Shapes().OptTime() == 0) 
				Shapes().OptTime() = 1;
		}
		feget_ (&FlexNum, &i, &ObjNummer);

		DEXD_ObjectToDraw (ObjNummer);

	// wenn gefordert, testen, ob Objekt schon geladen ist
		if (fTest && tabONr.Find (&ObjNummer)) {
		// Objekt ist bereits geladen, nur zeichnen
		{
		ExtShapeObjectLock LockObj (tabONr);

			if (!LockObj) continue;

		ExtShapeObject *pObj = (ExtShapeObject *)LockObj;
		
			if ((pObj -> operator GeoObjekt *()) -> Id() != lIdent)
				continue;	// Objekt ist temporär umklassifiziert

			if (!FMatchGeoTyp (pP -> FVisTyp(), pObj -> isTyp())) 
				continue;

			if (GenerateLegendOnly && pObj -> isTyp() != OT_TEXT) {
				pVI = pObj -> SetAttributes (pId, DotsPerMM(), tabONr);
				if (pVI && pVI != VI_NotChanged) {
					pVI = pId -> ChangeVisInfo (pVI, pP -> FVisTyp());
					DELETE (pVI);
				}
			} else if ((pVI = pObj -> SetAttributes (pId, DotsPerMM(), tabONr)) != NULL) {
			// Typgerecht zeichnen bzw. Textgröße messen für Legende
				if (pVI == VI_OtherType)
					pObj -> TypeDependendDraw (pId, tabONr, DotsPerMM());
				else {
					CurrActW -> DrawEx (pObj, (DWORD)this);
					if (pVI != VI_NotChanged) {
						pVI = pId -> ChangeVisInfo (pVI, pP -> FVisTyp());
						DELETE (pVI);
					}
				}
			}

		} // unlock ExtShapeObject

		// sonst noch was zu tun ?
			if (GCancelFlag == GCFNormal)
				App :: Exec (ExecWhileEvent);

			if (GCancelFlag != GCFNormal || GetAsyncKeyState (VK_ESCAPE)) {	// abbrechen
				EC = WC_RETURN;
				if (!iAllLoaded) pId -> NotAllLoaded();
				break;
			}
			continue;	// nächstes Objekt
		}

	// ansonsten Objektgeometrie lesen
		if ((EC = GetGI (ObjNummer, DOC, &pDBO, &OC)) != EC_OKAY) {
			if (EC == WC_NOFIT) {
				pId -> NotAllLoaded();	// TeilFlag setzen
				continue;
			} else if (EC == EC_NOON) {
				continue;	// gelöschtes Objekt
			} else {
				if (!iAllLoaded) pId -> NotAllLoaded();
				break;          // Fehler
			}
		} else {
		// Zeichenattribute dieses GeoObjektes setzen
#if !defined(WIN32)
			TimerCount (&TI);

		DWORD dwT = TI.dwmsSinceStart;

			DOC.Insert();		// wegspeichern in den Baum
			TimerCount (&TI);
                	dwDelta = TI.dwmsSinceStart - dwT;
#else
		DWORD dwT = timeGetTime();

			DOC.Insert();		// wegspeichern in den Baum
			dwDelta = timeGetTime() - dwT;
#endif 
			if (!FMatchGeoTyp (pP -> FVisTyp(), pDBO -> isTyp())) 
				continue;
			if (GenerateLegendOnly && pDBO -> isTyp() != OT_TEXT) {
				pVI = pDBO -> SetAttributes (pId, DotsPerMM(), tabONr);
				if (pVI && pVI != VI_NotChanged) {
					pVI = pId -> ChangeVisInfo (pVI, pP -> FVisTyp());
					DELETE (pVI);
				}
			} else if ((pVI = pDBO -> SetAttributes (pId, DotsPerMM(), tabONr)) != NULL) {
			// Typgerecht zeichnen
				if (pVI == VI_OtherType)
					pDBO -> TypeDependendDraw (pId, tabONr, DotsPerMM());
				else {
					CurrActW -> DrawEx (pDBO, (DWORD)this);
					if (pVI != VI_NotChanged) {
						pVI = pId -> ChangeVisInfo (pVI, pP -> FVisTyp());
						DELETE (pVI);
					}
				}
			} 

		// sonst noch was zu tun ?
			if (GCancelFlag == GCFNormal)
				App :: Exec (ExecWhileEvent);
			if (GCancelFlag != GCFNormal || GetAsyncKeyState (VK_ESCAPE)) {
				pId -> NotAllLoaded();
				EC = WC_RETURN;
				break;
			}
		}
	}
	ferel_ (&FlexNum);                      // dyn. Feld freigeben
	
	if (EC == WC_NOFIT) EC = EC_OKAY;

return EC;
}


// Alle weiteren Male zeichnen ------------------------------------------------
void DatenBasisObjekt :: NextDraw (DWORD dwData) 
{
CTable tabP(Idents().PrioTree());
CTable tabI(Idents().IdentTree());
bool hasChanged = false;
CTable tabObj (Shapes().ObjIdTree());
CTable tabONr (Shapes().ObjNumTree());
ErrCode RC;

// Alle Idents als nicht gezeichnet markieren, MetaDC setzen
#if defined(WIN32)
bool fMetaDC = (GetObjectType (Handle (API_DRAWOBJECT_HDC)) == OBJ_ENHMETADC) ? true : false;
#else
bool fMetaDC = (GetDeviceCaps (Handle (API_DRAWOBJECT_HDC), TECHNOLOGY) == DT_METAFILE) ? true : false;
#endif

	for (tabI.First(); tabI.Valid(); tabI.Next()) {
	CIdentifikatorLock l(tabI);
	
		if (l) {
			l -> SetObjectDrawn (0);
			l -> SetMetaDC (fMetaDC);
		}
	}
		
// Objekte laden und zeichnen -------------------------------------------------
// es werden nur Idents angefaßt, die gezeichnet werden sollen
	for (tabP.First(); tabP.Valid(); tabP.Next()) {
	// für alle Identifikatoren
	CIdRefLock LockP(tabP);

		if (!LockP) continue;

	CIdRef *pP = (CIdRef *)LockP;
	long lIdent = pP -> rCId().Id();	// lfder Identifikator
	
		pP -> rCId().AddObjectDrawn (VTypToBits (pP -> FVisTyp()));	// dieser Ident wurde behandelt
		DEXD_IdentToHandle (lIdent);
		if (pP -> rCId().toPaint()) {		// Id soll gezeichnet werden
			DEXD_IdentToDraw (lIdent);
			if (pP -> rCId().loaded()) {
			// Objekte bereits (teilweise) geladen
				
				if (!pP -> rCId().AreAllLoaded()) {
				// nicht alle Objekte dieses Id's sind geladen
					DEXD_IdentIsLoadedPart (lIdent);

					if ((RC = GetGIAll (LockP, true, dwData)) == EC_OKAY) {
						pP -> rCId().Load();	// Flag setzen: alle geladen
					} 
					else if (RC == WC_RETURN) {
					// abgebrochen: alles bisherige wieder löschen
						pP -> rCId().Load();	// Flag's setzen
						pP -> rCId().NotAllLoaded();
						
						hasChanged = true;
						pP -> rCId().ResetResources();	// alle Ressourcen freigeben
						break;		// abbrechen
					}
					else if (RC != WC_NOTFOUND) {
					// Fehler
						pP -> rCId().ResetResources();	// alle Ressourcen freigeben
						break;
					}
					hasChanged = true;
				} else {
				// Alle Objekte sind geladen
					DEXD_IdentIsLoadedFull (lIdent);
					
					for (tabObj.FindFirst(&lIdent); 
					     tabObj.Valid(); tabObj.FindNext(&lIdent)) 
					{
					// für alle Objekte mit diesem Identifikator
					ExtShapeObjectLock LockObj(tabObj);

						if (!LockObj) continue;

					ExtShapeObject *pObj = (ExtShapeObject *)LockObj;
					VisInfo *pVI;
					
						DEXD_ObjectToDraw (pObj -> ObjNr());
						if (!FMatchGeoTyp (pP -> FVisTyp(), pObj -> isTyp()))
							continue;

						if (GenerateLegendOnly && pObj -> isTyp() != OT_TEXT) {
							pVI = pObj -> SetAttributes (&pP -> rCId(), DotsPerMM(), tabONr);
							if (pVI && pVI != VI_NotChanged) {
								pVI = pP -> rCId().ChangeVisInfo (pVI, pP -> FVisTyp());
								DELETE (pVI);
							}
						} else if ((pVI = pObj -> SetAttributes (&pP -> rCId(), DotsPerMM(), tabONr)) != NULL) {
						// Typgerecht zeichnen
							if (pVI == VI_OtherType)
								pObj -> TypeDependendDraw (&pP -> rCId(), tabONr, DotsPerMM());
							else {
								CurrActW -> DrawEx (pObj, (DWORD)this);
								if (pVI != VI_NotChanged) {
									pVI = pP -> rCId().ChangeVisInfo (pVI, pP -> FVisTyp());
									DELETE (pVI);
								}
							}
						}

					// sonst noch was zu tun ?
						if (GCancelFlag == GCFNormal)
							App :: Exec(ExecWhileEvent);
						if (GCancelFlag != GCFNormal || GetAsyncKeyState (VK_ESCAPE)) {	
						// abbrechen
							pP -> rCId().ResetResources();	// alle Ressourcen freigeben
							break;
						}
					}
				}
			} else {
			// erst laden, dann zeichnen
				DEXD_IdentIsNotLoaded (lIdent);
				if ((RC = GetGIAll (LockP, false, dwData)) == EC_OKAY) {
					pP -> rCId().Load();	// Flag setzen
				} else if (RC == WC_RETURN) {
					pP -> rCId().Load();	// Flag's setzen
					pP -> rCId().NotAllLoaded();
					
					hasChanged = true;
					pP -> rCId().ResetResources();	// alle Ressourcen freigeben
					break;		// abbrechen
				} else if (RC != WC_NOTFOUND) {
				// Fehler
					pP -> rCId().ResetResources();	// alle Ressourcen freigeben
					break;		// abbrechen
				}
				hasChanged = true;
			}
		} 

	// auf nächsten Ident vorbereiten
		pP -> rCId().ResetResources();	// alle Ressourcen freigeben

		if (GCancelFlag == GCFNormal)
			App :: Exec(ExecWhileEvent);	// sonst noch was zu tun ?

		if (GCancelFlag != GCFNormal || GetAsyncKeyState (VK_ESCAPE))
			break;		// abbrechen
	}
	
// alle nicht angefaßten Idents prüfen, ob was rausgeworfen werden muß
	for (tabI.First(); tabI.Valid(); tabI.Next()) {
	CIdentifikatorLock l(tabI);
	long lIdent = l -> Id();
	short fDrawn = l -> GetObjectDrawn();
	
	// Id soll nicht gezeichnet werden
		if (~fDrawn & l -> GetOTypes())
			DEXD_IdentNotToDraw (lIdent);
		if (l -> loaded()) {
		// aus Speicher löschen, nicht zeichnen
			if (DeleteAllObjs (lIdent, ~fDrawn, tabObj, tabONr)) {
				DEXD_IdentWasLoaded (lIdent);
				hasChanged = true;
				l -> UnLoad();
			}
		} 
		else {
			DEXD_IdentWasNotLoaded (lIdent);	// do nothing else
		}
		if (GCancelFlag == GCFNormal)
			App :: Exec(ExecWhileEvent);	// sonst noch was zu tun ?

		if (GCancelFlag != GCFNormal || GetAsyncKeyState (VK_ESCAPE))
			break;		// abbrechen
	}

	if (hasChanged && !(GCancelFlag & GCFAppClosed)) {		// wenn der Baum verändert wurde
		Shapes().ObjIdTree().Optimize();
		Shapes().ObjNumTree().Optimize();
		DEXD_ObjectTreeOptimized (0L);
	}
}


bool DatenBasisObjekt :: DeleteTempIdents (void)
{
CTable tabP(Idents().PrioTree());
CTable tabObj (Shapes().ObjIdTree());
CTable tabONr (Shapes().ObjNumTree());

	for (tabP.First(); tabP.Valid(); ) {
	long lIdent = -1L;
	bool fToDelete = false;
			
		{
		CIdRefLock l (tabP);
		CIdRef *pP = (CIdRef *)l;
		
			if (pP && pP -> rCId().isTemp()) {
				lIdent = pP -> rCId().Id();	// lfder Identifikator
				fToDelete = true;
			}
		}
		if (fToDelete && lIdent != -1) {
			DeleteAllObjs (lIdent, TPAll, tabObj, tabONr);
			tabP.Delete();
		} else
			tabP.Next();
	}

return true;
}


bool DatenBasisObjekt :: DeleteAllObjs (long lIdent, short fToDelete, 
					CTable &tabObj, CTable &tabONr)
{
bool hasChanged = false;		

	for (tabObj.FindFirst (&lIdent); tabObj.Valid(); ) {
	// für alle Objekte mit diesem Identifikator
	long lONr = -1L;

		{	// Objektnummer holen
		ExtShapeObjectLock l(tabObj);

			if (!l) break;	// Fehler
			if (l -> Id() != lIdent) 
				break;	// fertig mit diesem ID
//			if (l -> Status() == ExtShapeObject :: OS_Temp) {
//				Insist = true;
//				break;
//			}
			if (OTypToBits (l -> isTyp()) & fToDelete)
				lONr = l -> ObjNr();	// Objekt rauslöschen
		}

	// löschen, erst nur Baum, dann Baum mit Objekt
		if (lONr != -1L && tabONr.Find (&lONr)) {
			tabONr.Delete();
			tabObj.Delete();
			hasChanged = true;
		} else
			tabObj.Next();
	}

return hasChanged;
}


// DBOContainer setzen (projektionsspezifisch)
void DatenBasisObjekt :: SetExtend (ObjContainer &R, Point &AspectR) 
{
ObjContainer OC = R;    // temporäre Kopie

//	(*_Prj)(&OC.XMin(), &OC.YMin());
//	(*_Prj)(&OC.XMax(), &OC.YMax());
	Scale (_DBOCont = OC, AspectR);  // Bildausschnitt skalieren
}


PaintFlag DatenBasisObjekt :: SetPaintFlag (PaintFlag newFlag) 
{
register PaintFlag oldFlag = _toPaint;

	_toPaint = newFlag;

return oldFlag;
}

// alle Identifikatoren aus der DB lesen und in IdTree speichern --------------
extern "C" {

bool WINAPI FillOneIdent (long lIdent, bool, void *pData)
{
// ID in Tree einspeichern
VisInfo *pVI[4];

	pVI[0] = pVI[1] = pVI[2] = pVI[3] = NULL;
//	MakeCompleteNewVisInfo ((VisInfo **)pVI, TPAll);

return ((CIdTree *)pData) -> AddIdent (lIdent, pVI, 0, hPalette);
}

}

ErrCode DatenBasisObjekt :: FillIdents (void) 
{
// wenn Idents gefüllt ist, dann wieder raus
	if (Idents().IdentTree().Count() > 0) return EC_OKAY;

// alle Identifikatoren behandeln
bool iResult = DB().EnumIdents ((ENUMNOKEYLONGPROC)FillOneIdent, &Idents());

// beide Bäume optimieren
	Idents().IdentTree().Optimize();
	Idents().PrioTree().Optimize();
	DEXD_IdentTreeOptimized();

return iResult ? EC_OKAY : EC_NOMEMORY;
}

// Destruktor -----------------------------------------------------------------
DatenBasisObjekt :: ~DatenBasisObjekt (void) 
{
	ResetBase ();		// ExtShapeObject zurücksetzen

	_SightMenu = NULL;
	DELETE (_Idents);
	DELETE (_Shapes);
	DELETE (_pGeoDB);
	DELETE (_pSightName);
	DELETE (m_pViews);
	m_pbdDB.EveryDelete();
	
	DELETE (m_pBmp15sw);
	DELETE (m_pBmp23sw);
	DELETE (m_pBmp32sw);
	
	DELETE (m_pPunktIDs);
}

void DatenBasisObjekt :: EveryDelete (void) 
{
	Shapes().EveryDelete ();
	Idents().AllDelete ();
	_toPaint = PF_NOTDRAWED;
	m_pbdDB.EveryDelete();
}

void DatenBasisObjekt :: InitPbd (char *pDir, bool fFlag)
{
	PbdDB().InitPBD (DB(), pDir, fFlag);
}


ErrCode DatenBasisObjekt :: CloseDB (bool fCommit)
{		
// zugehörige PBD schließen
ErrCode RC;

	if (PbdDB().isOpened()) {
		PbdDB().ReleasePBDTempTree();
		DBASSERT (PbdDB().Close (fCommit));
	}

// Datenbasis schließen
	if (DB().isOpened()) {
	string str = DB().GetDBName();

		DBASSERT (DB().Close(fCommit));
		DEXN_isClosedProject(str.c_str());
	}
	
return EC_OKAY;
}

// Modifikation eines Identifikators in der GeoDB und im Speicher -------------
bool DatenBasisObjekt :: ModIdent (long lONr, long newId, long oldId, short iMode) 
{
	if (DEXN_IdentToModify (lONr))
		return false;		// jemand hat was dagegen

CActDB ActDB (DB());

	if (!IsValidIdent(oldId))	// alten Ident besorgen
		oldId = RetrieveIdent (lONr);

	if (!(iMode & MODIDENT_TEMP) && modid (lONr, newId) != EC_OKAY) 
		return false;

// ist das erste Objekt mit diesem Ident
	{
	CTable t(Idents().IdentTree());
	short aniMode = 0;

		if (iMode & MODIDENT_TEMP) aniMode |= ANI_Temp;
		if (iMode & MODIDENT_ADDTOVIEW) aniMode |= ANI_AddToView;
		if (t.Find (&newId)) {
			Idents().AddNewIdent (newId, 
				aniMode, (iMode & MODIDENT_TYP), 
				newId);
		} else {
			Idents().AddNewIdent (newId, 
				aniMode, (iMode & MODIDENT_TYP), 
				oldId);
		}
	}

// Identifikator auch im Speicher ändern 
	if (!Shapes().ModIdent (lONr, oldId, newId)) {
	// Objekt laden, da es noch nicht im Speicher ist 
		{
		ExtShapeObjectDCreator DOC (Shapes());
		ExtShapeObject *pDBO;

			if (GetGI (lONr, DOC, &pDBO, NULL) != EC_OKAY) 
				return false;
		}

	// hier wurde das bereits in der GeoDB umklassifizierte Objekt geladen		
//	// jetzt umklassifizieren
//		if (!Shapes().ModIdent (lONr, oldId, newId))
//			return false;		// nun ist aber genug
	}

// war das letzte Objekt mit diesem Ident
	{
	CTable t(Shapes().ObjIdTree());

		if (!t.Find (&oldId)) 
			Idents().DeleteIdent (oldId);
	}

// umklassifizierten Ident als nicht vollständig geladen kennzeichnen
	{
	CTable t(Idents().IdentTree());

		if (t.Find (&oldId)) {
		CIdentifikatorLock lID (t);

			if (lID) lID -> NotAllLoaded();
		}
	}

// Objekt wurde erfolgreich umklassifiziert
	DEXN_IdentModified (lONr);

return true;
}


// Setzen und Rücksetzen der Zeichenattribute eines Objektes des Baumes -------
VisInfo *DatenBasisObjekt :: PresetAttributes (long ONr)
{
CTable tabON (Shapes().ObjNumTree());
CTable tabId (Idents().IdentTree());
long Ident = RetrieveIdent (ONr);

	if (tabON.Find (&ONr) && tabId.Find (&Ident)) {
	ExtShapeObjectLock lON(tabON);
	CIdentifikatorLock lId(tabId);

		if (lON && lId) 
			return lON -> SetAttributes (lId, DotsPerMM(), tabON, 
			       			     VT_Default, DF_Blinking);
	}

return NULL;
}


bool DatenBasisObjekt :: ResetAttributes (long ONr, VisInfo *pVI)
{
CTable tabON (Shapes().ObjNumTree());
CTable tabId (Idents().IdentTree());
long Ident = RetrieveIdent (ONr);

	if (tabON.Find (&ONr) && tabId.Find (&Ident)) {
	ExtShapeObjectLock lON(tabON);
	CIdentifikatorLock lId (tabId);

		if (lON && lId) {
			lON -> ResetAttributes ();
			lId -> ResetResources();
			if (pVI && pVI != VI_NotChanged && pVI != VI_OtherType) {
				pVI = lId -> ChangeVisInfo (pVI);
				DELETE (pVI);
			}
			return true;
		}
	}

return false;
}

void DatenBasisObjekt :: EvalMasstab (double *pMasstab) 
{
	M() = 1.0;	// für alle Fälle

// wenn Rechteck entartet ist, dann nichts ändern
Rectangle rcEA = EA();

	if (rcEA.Right() == rcEA.Left()) return;

Rectangle CRc = CurrActW -> CanvasRect();

	if (CRc.Left() == CRc.Right()) return;		// Icon

double MSt = -1.0;

	{
	// Fehlermeldung unterdrücken und Defaultwerte verwenden
	ErrInstall EI (WC_NOTFOUND);

	// zuerst versuchen, aus der Sicht den aktuellen BMaástab zu bekommen
		if (DB().GetDBVersion() >= VERSION05000008) {
		// nur ab Version 05.00.08
		long lMCode = HeaderEntry (DB(), IDS_HDRSICHTBMASSTAB).EntryLong(0);
		char ActSight[SIGHTMENUITEM+1];

			GetActiveSightName (ActSight, SIGHTMENUITEM+1);
			if (lMCode != 0 && *ActSight != '\0') {
			char *pMText = NULL;
//			CActDB ActDB (DB());
			Sicht S (DB(), ActSight);

				S.GetMiText (lMCode, &pMText);
				if (pMText != NULL) {
					MSt = (long)atol (pMText);
					if (MSt == 0.0) MSt = -1.0;
				}
				DELETE (pMText);
			}			
		}

	// ansonsten Bezugsmasstab aus DB-Header lesen
		if (MSt == -1.0)
			MSt = HeaderEntry (DB(), IDS_MASSTAB).EntryDouble (-1.0);
		if (MSt == -1.0 || MSt == 0.0) {
			if (pMasstab) {
				pMasstab[0] = 1.0;	// BezugsMaástab
				pMasstab[1] = 1.0;	// DarstellungsMaástab
			}
			return;
		}
	} // Fehlermeldung wieder in alten Zustand schalten

// Koordinaten in DB-Koordinaten umsetzen
Point ptT1 = CRc.UpperLeft();
Point ptT2 = CRc.LowerRight();
Punkt LO = DCtoOC (/*EA()*/ptT1);       // Device --> Objekt
Punkt RU = DCtoOC (/*EA()*/ptT2);

// DatenBasis-Skalierung rausrechnen
double XLO, XRU, YLO, YRU;

	pCT() -> UnScale (LO, &XLO, &YLO);
	pCT() -> UnScale (RU, &XRU, &YRU);

DoublePair P1 (XLO, YLO);
DoublePair P2 (XRU, YLO);	// über X-Koordinate berechnen
double tmpM = ((pCT() -> CoordTransDistance (&P1, &P2) * 1000.0 * DotsPerMM().Width()) /
						((double)(CRc.Right()-CRc.Left())));
	M() = tmpM / MSt;

	if (pMasstab) {
		pMasstab[0] = MSt;	// BezugsMaßstab
		pMasstab[1] = tmpM;	// DarstellungsMaástab
	}
}

// Löschen aller oder aller nicht mehr geladener Identifikatoren --------------
bool DatenBasisObjekt :: RemoveTempIdents (void) 
{
CTable tID (Idents().IdentTree());

	for (tID.First(); tID.Valid(); ) {
	bool toDelete = false;
	long lIdent = -1L;

		{
		CIdentifikatorLock lID (tID);

			if (!lID) continue;		// Fehler
			if (lID -> isTemp()) {
				if (!lID -> loaded()) {
					toDelete = true;
					lIdent = lID -> Id();
				} else if (ReloadAllObjects (lIdent) == EC_OKAY) {
					toDelete = true;
					lIdent = lID -> Id();
				} else						
					return false;	// Fehler
			}
		}

	// diesen Satz evtl. löschen
		if (toDelete) { 
			if (!Idents().DeleteIdent (lIdent)) return false; 
		} else { 
			if (!tID.Next()) break; 
		}
	}

return true;
}


// Alle Objekte mit einem Ident frisch laden ----------------------------------
ErrCode DatenBasisObjekt :: ReloadAllObjects (long lIdent)
{
CTable tabObj (Shapes().ObjIdTree());
CTable tabONr (Shapes().ObjNumTree());
ExtShapeObjectDCreator DOC (Shapes());
ExtShapeObject *pDBO = NULL;
ErrCode EC = EC_OKAY;

	for (tabObj.FindFirst (&lIdent); 
	     tabObj.Valid(); tabObj.FindNext(&lIdent)) 
	{
	// alle Objekte mit diesem Identifikator neu laden
	long lONr = -1L;

		{	// Objektnummer holen
		ExtShapeObjectLock l(tabObj);

			lONr = l -> ObjNr();
		}

	// löschen, erst nur Baum, dann Baum mit Objekt
		if (lONr != -1L && tabONr.Find (&lONr)) {
			tabONr.Delete();
			tabObj.Delete();
		}

	// frisch besorgen
		if ((EC = GetGI (lONr, DOC, &pDBO, NULL)) == EC_OKAY || 
		    EC == WC_NOFIT)
		{ 
			DOC.Insert();	// wegspeichern in den Baum
		} else {
//			DOC.Revoke();
			return EC;
		}
	}

return EC_OKAY;
}


// Neu initialisieren der DBO-Klasse ------------------------------------------
bool DatenBasisObjekt :: ReScale (void)
{
	DELETE (pCT());
	pCT() = new CoordTrans (CurrActW, DB());
	if (pCT() == NULL) {
		db_error (EC_NOMEMORY, RC_DBOReScale);
		return false;
	}

return true;
}


bool DatenBasisObjekt :: ReReadIdents (void) 
{
// Zahlenbasis der Idents holen
	{
	HeaderEntry IdBase (DB(), IDS_IDENTBASE);
	short sBase = (short)IdBase.EntryLong (10);

		if (sBase != 10 && sBase != 16) sBase = 10;
		SetIdBase (sBase);
	}

// Zahlenbasis der MCodes holen
	{
	HeaderEntry MkBase (DB(), IDS_MCODEBASE);
	short sBase = (short)MkBase.EntryLong (10);

		if (sBase != 10 && sBase != 16) sBase = 10;
		SetMkBase (sBase);
	}

	DELETE (_Idents);		// IdentTree löschen
	_Idents = new CIdTree (DB());	// und neu anlegen
	if (_Idents == NULL) {
		db_error (EC_NOMEMORY, RC_DBOReReadIdents);
		return false;
	}
	FillIdents();			// Idents neu einlesen

return true;
}

// Funktionen, die aktuell gezeichneten Ausschnitt liefern --------------------
// ACHTUNG: nur gültig während einer ZeichenAktion 
bool DatenBasisObjekt :: QueryExposedOC (ObjContainer *pOC)
{
	if (!_iDrawSem || !pOC) 
		return false; 	// es wird nicht gezeichnet

	*pOC = ExpOC();

return true;
}

bool DatenBasisObjekt :: QueryExposedArea (Rectangle *pRc)
{
	if (!_iDrawSem || !pRc) 
		return false; 	// es wird nicht gezeichnet

	*pRc = EA();

return true;
}

bool DatenBasisObjekt :: isComFile (void)
{
LPSTORAGE pIStorage = NULL;

	if (DB().GetProjectStorage (&pIStorage)) {
		pIStorage -> Release();
		return true;
	}

return false;
}


// Abfragen der HauptFarbe eines Objektes -------------------------------------
static Color ConvertPalette (Color C, HPALETTE hPal)
{
	if (hPal && C.Reserved() != 0) {
		GetPaletteEntries (hPal, C.Red(), 1, (PALETTEENTRY *)&C);
		C.Reserved() = 0;
	}

return C;
}

Color DatenBasisObjekt :: GetObjectColor (long lONr)
{
// 1. IdentVisInfo besorgen
VisType iVTyp = OTypToVTyp (RetrieveObjTyp (lONr));	// VisualisierungsTyp
CTable t(Idents().IdentTree());
bool fMetaDC = false;

DRAWOBJECT dObj;

	INITSTRUCT(dObj, DRAWOBJECT);
	dObj.lObjNr = lONr;			// ObjektNummer
	dObj.lIdent = RetrieveIdent (lONr);

	if (t.Find(&dObj.lIdent)) {
	CIdentifikatorLock l(t);

		TX_ASSERT(NULL != (CIdentifikator *)l);
		dObj.pNewVI = l -> GetVisInfo (iVTyp);
		fMetaDC = l -> GetMetaDCFlag();
	}

// 2. evtl. Objektbezogene Visualisierung dazugenerieren
	DEXN_DrawObject (dObj);			// alle anderen fragen ...

	if (NULL == dObj.pNewVI) return Color(WHITE);

Color C = WHITE;		// Standard: weiß

	switch (dObj.pNewVI -> isA()) {
	case VT_Punkt:
	case VT_Linie:
	case VT_Text:
	case VT_Default:
		if (fMetaDC)
			C = ConvertPalette (dObj.pNewVI -> PrimColor(), hPalette);
		else
			C = dObj.pNewVI -> PrimColor();
		break;

	case VT_Flaeche:
		C = ConvertPalette (((FVisInfo *)dObj.pNewVI) -> SecColor(), hPalette);
		break;

	default:
		TX_ASSERT(false);
		break;
	}
	DELETE(dObj.pNewVI);

return C;
}


#if defined(WIN32)
// alle Merkmale eines Objektes löschen (mit Undo/Redo) -----------------------
bool DatenBasisObjekt :: DeleteFeatures (LONG lONr)
{
	TX_ASSERT(IsValidONr(lONr));

CActDB ActDB (DB());
MerkmalsListe ML (&PbdDB(), lONr, TT_Objekt, false);
CTable t(ML);

	for (t.First(); t.Valid(); t.Next()) {
	PBD_MerkmalLock l(t);

	// keine SystemMerkmale behandeln (das sollen die tun, die sie erzeugt haben
		TX_ASSERT(NULL != (PBD_Merkmal *)l);

		if (l -> isSystem()) continue;

	// Merkmal löschen
	LPUNDOREDOOBJECTFEATURE pIUndo = NULL;
	HRESULT hr = CoCreateInstance (CLSID_UndoRedoObject, NULL,
			CLSCTX_INPROC_SERVER, IID_IUndoRedoObjectFeature,
			(LPVOID *)&pIUndo);

		if (SUCCEEDED(hr) && 
		    pIUndo -> Init (lONr, l -> GetCode(), "", NULL) == NOERROR) 
		{
			DEX_AddUndoRedo (pIUndo);
		}
		if (pIUndo) pIUndo -> Release();

		if (!WriteTextMerkmal (TT_Objekt, lONr, l -> GetCode(), NULL))
			return false;
	}

return true;
}


// alle Relationen die ein Objekt besitzt auflösen (mit Undo/Redo) ------------
bool DatenBasisObjekt :: DeleteRelations (LONG lONr)
{
	TX_ASSERT(IsValidONr(lONr));

CActDB ActDB (DB());
ObjRelFeld RelC;        // RCodeInfo für ein Objekt
ErrInstall EI (WC_NOTFOUND);
// alle Relationen

	if (DB().RelInfo (lONr, RelC) != EC_OKAY)
		return false;

CRing r(RelC);

	for (r.First(); r.Valid(); r.Next()) {
	ObjRelNummerLock l(r);

		TX_ASSERT(NULL != (ObjRelNummer *)l);

	// Relation auflösen
		if (DelRelation (lONr, l -> _ON, l -> RelCode(), l -> RelTyp()) == EC_OKAY) {
		// Undo/Redo vorbereiten
		LPUNDOREDODELETEOBJECTRELATION pIUndo = NULL;
		HRESULT hr = CoCreateInstance (CLSID_UndoRedoObject, NULL,
				CLSCTX_INPROC_SERVER, IID_IUndoRedoDeleteObjectRelation,
				(LPVOID *)&pIUndo);

			if (SUCCEEDED(hr) && 
			    pIUndo -> Init (lONr, l -> _ON, l -> RelCode(), l -> RelTyp()) == NOERROR) 
			{
				DEX_AddUndoRedo (pIUndo);
			}
			if (pIUndo) pIUndo -> Release();
		}
        }

return true;
}

#endif // WIN32
