// Scanner fuer DQL-Parser
// File: DQLLX.LX

%{
#include "dqllx.htp"
#include <commonvu.hxx>
#include <containr.hxx>

static char SccsId[] = "uve Potsdam GmbH: %W%  %E%";

extern "C" {
	#include <ctype.h>
	#include "dql.h"
//	#include "winio.h"		// fputchar (), puts ()
	#include "ytab.h"
	#include <time.h>

        #include "komplexr.hr"
}

#include <clipbrd.hxx>  		// ClipBoard-Klasse
#include <ristypes.hxx>		 	// Koord
#include <geo_obj.hxx>
#include <dbasekey.hxx>

#include "yystype.hxx"
#include <dbtools.hxx>			// GetEditName ()
#include <ixtensn.hxx>          // Interfaces einer Erweiterung
#include <xtencunk.hxx>         // InterfaceImplementation der BasisKlasse
#include <xtsnaux.hxx>
#include "komplexr.hxx"		 	// KomplexrExtension

// LEX - RetVal definieren
extern YYSTYPE yylval;
extern KomplexrExtension *pKE;
extern ResourceFile *pRF;
extern RMode actRechMode;
extern pchar pScriptName;	   	// Dateiname des akt. Scriptes
extern pWindow pW;			  	// Zeiger auf Hauptfenster
extern Bool DataFromED;		 	// Daten von Editor

// Neudefinition der LEX - I/O Routinen für WINIO
#undef output
#undef input
#undef ECHO

// #define output(c) fputchar(c)
#define output(c)
#define input() ((yytchar=yysptr>yysbuf?U(*--yysptr): \
				  (ActChar<ScriptEnd?*ActChar++:0))=='\n'? \
				  (yylineno++,LineBeg=ActChar,yytchar):yytchar)
// #define ECHO puts(yytext)
#define ECHO

// Globaler Buffer für Script -------------------------------------------------
const char *ScriptBuff = NULL;
const char *ScriptEnd;		  // ScriptEnde
const char *ActChar;			// nächstes einzulesendes Zeichen
const char *LineBeg;			// letzter ZeilenBeginn
const short ExprSize = 256;

/* Variablendefinitionen */
SYS_VAR system_var[] = {        /* Systemvariablen */
        {       "pagenum", 1    },      /* aktuelle Seitennummer */
        {       "linenum", 0    },      /* aktuelle Zeile auf Seite */
        {       "tuplenum", 0   },      /* aktuelle Datensatznummer */
        {       "colnum", 0     },      /* aktuelle Spaltennummer */
        {       NULL, 0 },
};

/* Systemkonstantenberechnungsfunktionen */
short Year (void), Month (void), Day (void), W_day (void);
short Y_day (void), Hour (void), Minute (void), Second (void);

SYS_CONST system_const[] = {  /* Systemkonstanten */
        {       "year", Year            },
        {       "month", Month          },
        {       "day", Day              },
        {       "m_day", Day            },
        {       "w_day", W_day          },
        {       "y_day", Y_day          },
        {       "hour", Hour            },
        {       "minute", Minute        },
        {       "second", Second        },
        {       NULL, NULL              }
};

/* reservierte Worte, die vom Scanner identifiziert werden */
KEYWORD SearchKeys[] = {
// Suchspezifikation
		{	   SEARCH, "search"		},
		{	   DBASE, "dbase"		  },
		{	   WINDOW, "window"		},
//	  {	   UMKREIS, "circumference"		},
//	  {	   UMRING, "buffer"		},
		{	   VIEW, "view"			},
		{	   SELECT, "select"		},
		{	   RECORDS, "records"	  },
		{	   WHERE, "where"		  },
		{	   USE, "use"			  },
		{	   KEY, "key"			  },
		{	   UNIQUE, "unique"		},
		{	   OBJECTS, "objects"	  },
		{	   IS, "is"				},
		{	   AS, "as"				},
		{	   SELECTED, "selected"	},
		{	   GROUP, "group"		  },
		{	   TEMP, "temporary"	   },
		{	   RELATION, "relation"	},
		{	   DEFAULT, "default"	  },
		{	   IDENTLIST, "identlist"  },
		{	   0, ""				   },
};

KEYWORD ReportKeys[] = {
// ReportGenerator
		{	   REPORT, "report"		},
		{	   DECLARATION, "declaration"	  },
		{	   CALL, "call"			},
		{	   PROC, "proc"			},
		{	   HEAD, "head"			},
		{	   TAIL, "foot"			},
		{	   TUPLES, "tuples"		},
		{	   LINES, "lines"		  },
		{	   COLUMNS, "columns"	  },
		{	   ALL, "all"			  },
		{	   FROM, "from"			},
		{	   TO, "to"				},
		{	   BIG, "big"			  },
		{	   PAGE, "page"			},
		{	   TUPLE, "tuple"		  },
		{	   FOR_ONE, "for_one"	  },
		{	   FOR_ALL, "for_all"	  },
		{	   FORMAT, "format"		},
		{	   VARI, "var_i"		   },
		{	   VARF, "var_f"		   },
		{	   VARS, "var_s"		   },
		{	   NEW, "new"			  },
		{	   LINE, "line"			},
		{	   COL, "col"			  },
		{	   SPACE, "space"		  },
		{	   BATCH, "batch"		  },
		{	   LASTI, "last_i"		 },
		{	   VALUEI, "value_i"	   },
		{	   NEXTI, "next_i"		 },
		{	   LASTF, "last_f"		 },
		{	   VALUEF, "value_f"	   },
		{	   NEXTF, "next_f"		 },
		{	   LASTS, "last_s"		 },
		{	   VALUES, "value_s"	   },
		{	   NEXTS, "next_s"		 },
		{	   FLOAT, "real"		   },
		{	   TERMINAL, "terminal"	},
		{	   DATE, "date"			},
		{	   TIME, "time"			},
		{	   PRINT, "print"		  },
		{	   LINEBEGIN, "linebegin"  },
		{	   LINEEND, "lineend"	  },
		{	   IF, "if"				},
		{	   ELSE, "else"			},
// DQL
		{	   ON, "on"				},
		{	   AS, "as"				},
		{	   GRAPHICS, "graphics"	},
		{	   SHEET, "sheet"		  },
		{	   OBJLIST, "objlist"	  },
		{	   WINDOW, "window"		},
		{	   PRINTER, "printer"	  },
		{	   CLASSIFICATION, "classification"		},
		{	   REPORT, "report"		},

		{	   0, ""				   },
};

KEYWORD *keywords;

int  tot_errs = 0;	   /* total errors encountered */

long act_seek;

%}

S			   [-+]?
D			   [0-9]
E			   [DEde]{S}?{D}+
S1			  \"[^\"\n\r\032]*\"
S2			  \'[^'\n\r\032]*\'
ID			  [a-zA-Z_]([a-zA-Z0-9_])*
DBEXP		   \`[^'\n\r\032]*\'

%%

{S}{D}+				 {
						/* Integer */
						long *inVal = new long (atol (yytext));
						YYSTYPE tmpY (inVal, YYSTYPE :: YYLong, yylineno);

								yylval = tmpY;
								return (INTEGER);
						}

{S}{D}+"."{D}*({E})?	|
{S}{D}*"."{D}+({E})?	|
{S}{D}+{E}			  {
						/* Real Number */
						double *inVal = new double (atof (yytext));
						YYSTYPE tmpY (inVal, YYSTYPE :: YYDouble, yylineno);

								yylval = tmpY;
								return (FLOAT);
						}

{S1}					|
{S2}					{
						/* String */
						register unsigned char scope_char = *yytext;
						register char *cptr;
						char *inVal = new char [lstrlen(yytext+1)+1];
								
								lstrcpy (inVal, yytext+1);
								if ((cptr = strchr (inVal, scope_char)) != NULL)
										*cptr = '\0';

						YYSTYPE tmpY (inVal, YYSTYPE :: YYString, yylineno);

								yylval = tmpY;
								return (STRING);
						}

{DBEXP}				 {
						/* DBase-Expression */
						char *inVal = new char [lstrlen(yytext+1)+1];
						register char *cptr;
								
								lstrcpy (inVal, yytext+1);
								if ((cptr = strchr (inVal, '\'')) != NULL)
										*cptr = '\0';

						YYSTYPE tmpY (inVal, YYSTYPE :: YYDBase, yylineno);

								yylval = tmpY;
								return (DBASEEXPR);
						}

{ID}					{
						/* Identifier, Keyword etc. */
						register int i;
						
						/* ist ID ein reserviertes Wort ? */
								if (keywords) {
								// Keywordfeld definiert
										for (i = 0; keywords[i].lx ; i++) {
												if (!strncmp (keywords[i].id, yytext, NAMELEN))
														break;
										}
										if (keywords[i].lx) {   /* ID ist Schluesselwort */
										char *inVal = new char [lstrlen(yytext)+1];
												lstrcpy (inVal, yytext);
										YYSTYPE tmpY (inVal, YYSTYPE :: YYString, yylineno);

												yylval = tmpY;
												return (keywords[i].lx);
										}
								}
						/* ist ID eine Systemvariable ? */
								for (i = 0; system_var[i].var_name; ++i) {
										if (!strncmp (system_var[i].var_name, yytext, NAMELEN))
												break;
								}
								if (system_var[i].var_name) {   /* ID ist Systemvar */
								long *inVal = new long (system_var[i].var_wert);
								YYSTYPE tmpY (inVal, YYSTYPE :: YYSysVar, yylineno);

										yylval = tmpY;
										return (SYSTEM_VAR);
								}
						/* ist ID Systemkonstante ? */
								for (i = 0; system_const[i].const_name; ++i) {
										if (!strncmp (system_const[i].const_name, yytext, NAMELEN))
												break;
								}
								if (system_const[i].const_name) {	   /* ID ist Sys.const */
								long *inVal = new long ((long)(*system_const[i].const_wert)());
								YYSTYPE tmpY (inVal, YYSTYPE :: YYLong, yylineno);

										yylval = tmpY;
										return (SYSTEM_CONST);
								}
								else {
						/* Ansonsten ist ID nutzerdefinierter Name */
								char *inVal = new char [lstrlen(yytext)+1];
										lstrcpy (inVal, yytext);
								YYSTYPE tmpY (inVal, YYSTYPE :: YYString, yylineno);

										yylval = tmpY;
										return (IDENT);
								}
						}

^#					  {
						/* Neue Zeilennummer (Zeile ignorieren) */
						register int n = 0;
						register int ch;

								while ((ch = input ()) == ' ')
										;
								if (isdigit(ch)) {
										n = 0;
										while (isdigit(ch)) {
												n= 10*n + ch - '0';
												ch = input ();
										}
										yylineno = n - 1;
								}
								while ((ch = input ()) != '\n')
										;
						}

"|""|"				  return (OROR);
"&""&"				  return (ANDAND);
"!""="				  return (NE);
"<""="				  return (LE);			
">""="				  return (GE);			
"=""="				  return (EQ);			
"<"					 return (LT);			
">"					 return (GT);			
"!"					 return (UNOT);		  
"="					 return (EQU);		   

\/\*					comment ("*/");		 /* C Kommentar */

\/\/					comment ("\n");		 /* C++ Kommentar */

[ \t\n\r\032]*		  ;					   /* ignore white's */

.					   {   /* DBase-Expression mit Umlauten ? */
						if (yytext [0] == 96 /*'\`'*/) {
							char *inVal = new char [ExprSize];
							if (! inVal) {
								DEX_Error (RC_doRecherche, EC_NOMEMORY);
								YYSTYPE tmpY (NULL, YYSTYPE :: YYUnknown, yylineno);
								yylval = tmpY;
								return (*yytext);
							}

							pchar FirstChar = inVal;
							register char Ch;
							for (short i = 0; i < ExprSize; i++) {
								Ch = (char) input ();
								if (Ch  != '\'' && Ch != '\n' && (short) Ch != 0x01A)
									*inVal++ = Ch;
								else
									break;
							}
							if (Ch != '\'')
								DEX_Error (RC_doRecherche, EC_BaddBaseExpr);
							*inVal = '\0';

							YYSTYPE tmpY (FirstChar, YYSTYPE :: YYDBase, yylineno);
							yylval = tmpY;
							return (DBASEEXPR);
						}

						// Stackelement setzen (ZeilenNummer)
						YYSTYPE tmpY (NULL, YYSTYPE :: YYUnknown, yylineno);

								yylval = tmpY;
								return (*yytext);
						}
%%

/* Feststellen der aktuellen Position */

long prev_seek;  /* previous seek */

long yytell (register int which) {

		switch (which) {
		case 1:		 return (act_seek);
		case 0:		 return (prev_seek);
		case -1:		return ((ActChar - ScriptBuff) - (yysptr-yysbuf));
		}
		
		return 0;
}

static void seek (void)
{
		prev_seek = act_seek;
		act_seek = (ActChar - ScriptBuff) - (yysptr-yysbuf);
}

/* Neu Positionieren */
void yyseek (long new_seek) {
	ActChar = ScriptBuff + new_seek;
}

/* Parser Syntaxfehler */
void yyerror (const char *pError) {
	r_error ((char *)pError, yylineno);
}

/* Formatdefinitionsfehler */
void r_error (char *pErrorText, int LineNr) {
	const short InBufferSize = 128;
	char *pCmd = new char [_MAX_PATH * 2];
	char *pCmdHelp = new char [_MAX_PATH];
	char *pInBuff = new char [InBufferSize];
	char *pErrText = new char [128];

	if (!pCmd || !pCmdHelp || !pInBuff || !pErrText)
	{
		DEX_Error (RC_doRecherche, EC_NOMEMORY);
		return;
	}

//	alle Zeiger init.
	*pCmd = '\0';
	*pCmdHelp = '\0';
	*pErrText = '\0';
	*pInBuff = '\0';

	++tot_errs;
	char ModeCh = ' ';
	pchar pScript = NULL;
	switch (actRechMode) {
		case RMFile:
			pScript = pScriptName;
		break;
		case RMBuffer: {
		//  shreibe Script ins ClipBoard
			CClipboard DCB;			   		// Clipboard-Objekt
			DCB.Clear ();				   	// Inhalt des Clipboards löschen
			DCB.Insert (ScriptBuff);		// Inhalt kopieren
		}
		case RMClipboard:
			ModeCh = 'c';
		break;
		case RMUnknown:
		default: {
			DEX_Error (RC_doRecherche, EC_SYSERROR);
			DELETE_VEC (pCmd);
			DELETE_VEC (pCmdHelp);
			DELETE_VEC (pInBuff);
			DELETE_VEC (pErrText);
			return;
		}
	}

//  wenn Daten vom Editor
	if (DataFromED)
		ModeCh = 'k';

//  Fehlermeldung ggf. ausgeben
	if (pErrorText && *pErrorText && LineNr) {
		ResString ErrorText (ResID (IDS_SYNTAXERROR, pRF), 30);
		wsprintf (pErrText, ErrorText.Addr (), pErrorText, LineNr);
		// OutputError (lpCmd);	--> wird vom Editor ausgegeben
	}

//  TRIAS-ED starten
	if (pKE && (!pScript || !*pScript))	 // richtigen Pfad für TRIAS-ED einstellen
		pKE -> SetScriptPfad ();

	if (pScript && *pScript)
		wsprintf (pCmdHelp, "%s %s -p%ld -%c", GetEditName (pInBuff, InBufferSize -1),
											   pScript, yytell (-1), ModeCh);
	else
		wsprintf (pCmdHelp, "%s -p%ld -%c", 	GetEditName (pInBuff, InBufferSize - 1),
												yytell (-1), ModeCh);

//	Kommando-Zeile vervollst.
	lstrcpy (pCmd, pCmdHelp);
	if (pErrText)
		lstrcat (pCmd, pErrText);

//	Speicher freigeben
	DELETE_VEC (pCmdHelp);
	DELETE_VEC (pInBuff);
	DELETE_VEC (pErrText);

	RunTriasEdit (pW, pCmd, SW_SHOWNORMAL);

	DELETE_VEC (pCmd);
}


/* Schwerwiegender Formatdefinitionsfehler: Abbruch */
void r_abort (char *s) {
	r_error (s, 0);
}

int ExtDBError (int Routine, int Error, Bool iStartED) {
	DEX_Error (Routine, Error);

	if (iStartED)
		r_error (NULL, 0);	  // starte TRIAS-ED

	return  Error;
}

// Kommentar überlesen 
void comment (char *mat) {

		register int c = 1;
		register char *cp = mat;
		int lno = yylineno;

		while (*cp && c != 0) {
				if ((c = input ()) != *cp++)
						cp = mat;
		}
		if (c == 0) {
				yylineno = lno;
				r_abort ("EOF im Kommentar gelesen");
		}
}

// die folgenden Funktionen liefern die aktuelle Zeile und -Spalte
short ActLineNumber (void) { return yylineno; }
short ActColumnNumber (void) { return ActChar - LineBeg; }

short Year (void) {         /* Jahr - 1900 */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_year);
}

short Month (void) {        /* Monat 1..12 */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_mon);
}

short Day (void) {          /* Tag im Monat 1..31 */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_mday);
}

short W_day (void) {        /* Wochentag 0..6 (0: Sonntag) */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_wday);
}

short Y_day (void) {        /* Tag im Jahr 1..365 */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_yday);
}

short Hour (void) {         /* Stunde 0..23 */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_hour);
}

short Minute (void)  {      /* Minute 0..59 */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_min);
}

short Second (void) {       /* Sekunde 0..59 */
long clock;

        time (&clock);
        return ((localtime (&clock))->tm_sec);
}
