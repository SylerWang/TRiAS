' $Header: $
' Copyright© 1998-2000 TRiAS GmbH Potsdam, All rights reserved
' Created: 11.07.2000 21:43:36 
'
' @doc
' @module ObjekteVereinigenOpt.ebs | Vereinigen aller Objekt der übergebenen 
' Objektmenge unter Berücksichtigung ihrer gegenseitigen Lage

Option Explicit

' -----------------------------------------------------------------------------
' FunktionsDeklarationen
Declare Private Function GeometryUnion (Objs As GeoObjects, Cls As GeoClass) As GeoObjects

Declare Private Sub InitStatus (lCount As Long)
Declare Private Function IncrementStatus(Optional Cnt As Variant) As Boolean
Declare Private Sub FreeStatus()

Declare Private Sub LoadresourceStrings()

' -----------------------------------------------------------------------------
' Globale Variablen
Private Status As StatusIndicator
Private TempCls As GeoClass
Private lGlobalCnt As Long

Private cbNewObjectClass As String
Private cbMarkFeatureName As String
Private cbMarkFeatureNameDesc As String
Private cbMark As String
Private cbStatusCap As String
Private cbStatusCnt As String
Private cbStatusObjs As String
Private cbStatusText As String
' Fehlerbehandlung
Private cbErrCaption As String
Private cbError As String
Private cbErrNumber As String

' -----------------------------------------------------------------------------
' Globale Konfigurationsvariablen
Private fDeleteObjs As Boolean			' verarbeitete Ausgangsobjekte löschen
Private fMarkObjs As Boolean			' verarbeitete Ausgangsobjekte markieren
Private fCopyObjs As Boolean			' Einzelobjekte kopieren

' -----------------------------------------------------------------------------
' Sämtliche hier benötigten Resourcen laden
Private Sub LoadResourceStrings()

	cbStatusCnt = LoadResString (520)
	cbStatusObjs = LoadResString (521)

	cbNewObjectClass = LoadResString (544)
	cbMarkFeatureName = LoadResString (547)
	cbMarkFeatureNameDesc = LoadResString (549)
	cbMark = LoadResString (548)

	cbStatusCap = LoadResString (545)
	cbStatusText = LoadResString (546)

	cbErrCaption = LoadResString (550)
	cbError = LoadResString (518)
	cbErrNumber = LoadResString (515)

End Sub

' -----------------------------------------------------------------------------
' "BeginAction" wird gerufen, bevor die erste Objektmenge verarbeitet werden soll
Function BeginAction() As Boolean

' Resourcen laden
	Call LoadResourceStrings()

' Hier notwendige Initialisierungen durchführen
	Set TempCls = GetActiveDocument().GetClass (cbNewObjectClass)
	If (TempCls Is Nothing) Then
		Set TempCls = GetActiveDocument().AddClass(cbNewObjectClass)
	End If
	If (TempCls Is Nothing) Then
		BeginAction = False
		Exit Function
	End If

' Konfikurationsvariablen vorinitialisieren
	fDeleteObjs = True
	fMarkObjs = False
	fCopyObjs = True

	Set Status = Nothing
	BeginAction = True

End Function

' 2. Variante, wenn StatusIndicator von außen kommt
Function BeginActionEx (Stat As StatusIndicator) As Boolean

' Resourcen laden
	Call LoadResourceStrings()

	Set TempCls = GetActiveDocument().GetClass (cbNewObjectClass)
	If (TempCls Is Nothing) Then
		Set TempCls = GetActiveDocument().AddClass(cbNewObjectClass)
	End If
	If (TempCls Is Nothing) Then
		BeginActionEx = False
		Exit Function
	End If

' Konfikurationsvariablen vorinitialisieren
	fDeleteObjs = True
	fMarkObjs = False
	fCopyObjs = True

	Set Status = Stat
	BeginActionEx = True

End Function

' -----------------------------------------------------------------------------
' Hilfsfunktion zum markieren eines Objektes
Sub MarkObject (Obj As GeoObject)
Dim Feat As GeoFeature

	Set Feat = Obj.GetFeature(cbMarkFeatureName)
	If (Feat Is Nothing) Then
		Set Feat = Obj.AddFeature(cbMarkFeatureName, FEATURETYPE_WriteAble)
		If (Feat Is Nothing) Then
			Exit Sub
		End If
		Feat.FullName = cbMarkFeatureNameDesc
	End If
	Feat.Feature = cbMark

End Sub

' -----------------------------------------------------------------------------
' "DoAction" wird für jede der zu verarbeitenden Objektmengen gerufen
Function DoAction (Objs As GeoObjects) As GeoObjects

	Set DoAction = Nothing
	If (Objs Is Nothing) Then	' irgend ein blöder Fehler (snh)
		Exit Function
	End If

' Fehlerbehandlune
	On Error GoTo labelError

' Fall, wenn nur ein Objekt gegeben ist behandeln
Dim CopiedObject As GeoObject
Dim o As GeoObject

	If (Objs.Count = 1) Then	' nur ein Objekt
		If (fCopyObjs = True) Then
		' dieses Objekt in Zieldatenquelle doppeln
			Set o = Objs(1)
			If (o.ConnectionName <> TempCls.ConnectionName) Then
				Set CopiedObject = o.CloneObject(TempCls)
				If (CopiedObject Is Not Nothing) Then
				' Ausgangsobjektmenge richten
					Objs.Remove o
					Objs.Add CopiedObject
					Set CopiedObject = Nothing
				End If
			End If

			Set o = Nothing
		End If

		Set DoAction = Objs
		Exit Function
	End If

' Ausgangsobjekte als Menge kopieren
Dim ObjsOrg As New GeoObjects

	For Each o In Objs 
		ObjsOrg.Add o
	Next o
			
' Objektmenge bearbeiten (vereinigen)
Dim ObjsOut As GeoObjects

	Set ObjsOut = GeometryUnion (Objs, TempCls)	' Resultatsmenge
	If (ObjsOut Is Nothing) Then
		Exit Function
	End If

' ggf. nicht vereinigte Objekte in Zieldatenquelle doppeln
	If (fCopyObjs = True) Then
	Dim ObjsNotTouched As GeoObjects
	Dim ObjsTouched As GeoObjects

		Set ObjsTouched = ObjsOrg.Difference (ObjsOut)			' Ausgangsobjekte, die vereinigt wurden
		Set ObjsNotTouched = ObjsOrg.Difference (ObjsTouched)	' Ausgangsobjekte, die nicht vereinigt wurden

		For Each o In ObjsNotTouched 
			If (o.ConnectionName <> TempCls.ConnectionName) Then
				Set CopiedObject = o.CloneObject(TempCls)
				If (CopiedObject Is Not Nothing) Then
				' Ausgangsobjektmenge richten
					ObjsOut.Remove o
					ObjsOut.Add CopiedObject
				End If
				Set CopiedObject = Nothing
			End If
		Next o
	End If

' gewünschte Nachbearbeitung durchführen
	If (fDeleteObjs = True) Then
	' alle angefaßten Objekte wieder löschen
		For Each o In ObjsTouched 
			GetActiveDocument.RemoveObject o
		Next o

	ElseIf (fMarkObjs = True) Then
	' alle angefaßten Objekte markieren
		For Each o In ObjsTouched 
			MarkObject o
		Next o
	End If
	Set o = Nothing

' Neu gebildete Objekte weiterreichen
	Set DoAction = ObjsOut
	Exit Function

' Fehlerbehandlung
labelError:
	MsgBox cbError + Err.Description + cbErrNumber + Str$(Err.Number) + ")", _
		   ebOk+ebExclamation, cbErrCaption
	Exit Function
		
End Function

' ---------------------------------------------------
' "EndAction" wird nach der Verarbeitung der
' letzten Objektmenge gerufen
Sub EndAction()
' Hier notwendige Aufräumarbeiten durchführen
	Set TempCls = Nothing
	Set Status = Nothing
End Sub

' -----------------------------------------------------------------------------
' Jedes Objekt mit jedem vereinigen
Private Function GeometryUnion (Objs As GeoObjects, Cls As GeoClass) As GeoObjects

	Set GeometryUnion = Nothing
	On Error GoTo labelError

' Variablen der Outer-Schleife
Dim fFound As Boolean
Dim i As Long

' Variablen der Inner-Schleife
Dim Inner As Long
Dim OuterObj As GeoObject
Dim ObjsT As GeoObjects

Dim InnerObj As GeoObject
Dim NewObjs As GeoObjects
Dim FakeObjs As GeoObjects
Dim RechObjs As GeoObjects

Dim lNewObjsCnt As Long

Dim o As GeoObject
Dim ResultObjs As New GeoObjects

' umschließendes Rechteck des Bezugsobjektes
Dim dXMin As Double
Dim dXMax As Double
Dim dYMin As Double
Dim dYMax As Double

Dim lIndexToUse As Long

' Statusanzeige initialisieren
Dim IsCanceled As Boolean

	lGlobalCnt = 0
	InitStatus Objs.Count

' Äußere Schleife
	Randomize
	Do
	' Flag rücksetzen
		fFound = False

	' nächstes Bezugsobjekt setzen
		If (OuterObj Is Not Nothing) Then
			OuterObj.UnHilight
		End If

	' das nächste Objekt zufällig auswählen
	' (Random mag keine identischen Parameter)
		lIndexToUse = Objs.Count
		If (lIndexToUse > 1) Then
			lIndexToUse = Random(1, lIndexToUse)
		Else
			lIndexToUse = 1
		End If
		Set OuterObj = Objs (lIndexToUse)
		If (OuterObj Is Nothing) Then
			Exit Do
		End If

		OuterObj.Hilight &HFFFF00		' Blau kennzeichnen

	' Zur Optimierung werden lediglich die Objekte näher untersucht, die
	' geometrisch etwas mit dem Bezugsobjekt zu tun haben
		OuterObj.GetGeometryRect dXMin, dYMin, dXMax, dYMax
		Set RechObjs = Objs.GetObjectsInRect(dXMin, dYMin, dXMax, dYMax)

	' Neue Objektmenge für nächsten Durchlauf (vorinitialisiert auf
	' alle Objekte der Ausgangsmenge, die nicht gleichzeitig durch die
	' vorhergehende Geometrierecherche geliefert wurden)			
 		Set ObjsT = Objs.Difference (RechObjs)
		If (ObjsT Is Nothing) Then
			Set ObjsT = new GeoObjects		' Notanker für besondere Fälle
		End If

	' Fortschrittsanzeige entsprechend weiterschalten
		If (IncrementStatus (Objs.Count - RechObjs.Count) = False) Then
			FreeStatus
			Exit Function
		End If

	' Das Bezugsobjekt selbst darf auch nicht mit untersucht werden
		RechObjs.Remove OuterObj

	' Innere Schleife
		For Inner = RechObjs.Count To 1 Step -1

		' Status weiterschalten
			If (IncrementStatus() = False) Then
				FreeStatus
				Exit Function
			End If
				
		' nächstes Vergleichsobjekt
			Set InnerObj = RechObjs(Inner)
			InnerObj.Hilight &HFFFFFF		' Weiß kennzeichnen

		' Versuchen, die beiden zu vereinigen
			Set FakeObjs = New GeoObjects
			FakeObjs.Add OuterObj
			FakeObjs.Add InnerObj
			Set NewObjs = FakeObjs.GeometryUnion (Cls)
			Set FakeObjs = Nothing

			If (NewObjs Is Not Nothing) Then
				lNewObjsCnt = NewObjs.Count
			Else
				lNewObjsCnt = 0
			End If

		' Resultat der Vereinigung auswerten
			If (NewObjs Is Not Nothing And lNewObjsCnt > 0) Then
			' wirklich was vereinigt, neue Objekte übenehmen
				For Each o In NewObjs
					ObjsT.Add o		' neu gebildete Objekte hinzufügen
				Next o

			' restliche Objekte übernehmen
				For i = Inner-1 To 1 Step -1
					ObjsT.Add RechObjs(i)
					IsCanceled = IncrementStatus()	' Status weiterschalten
				Next i

			' Bezugsobjekt wird nicht mehr gebraucht
				OuterObj.UnHilight
				If (OuterObj.ObjClass.Name = cbNewObjectClass) Then
				' bereits vereinigtes Objekt aus GeoDB löschen
					GetActiveDocument.RemoveObject OuterObj
				End If
				Set OuterObj = Nothing

			' neue Objektmenge ist fertig
				fFound = True
				
				InnerObj.UnHilight
				If (InnerObj.ObjClass.Name = cbNewObjectClass) Then
				' auch hier bereits vereinigtes Objekt aus GeoDB löschen
					GetActiveDocument.RemoveObject InnerObj
				End If
				Set InnerObj = Nothing

				Exit For ' Inner
			Else 
			' es konnte nichts vereinigt werden
				ObjsT.Add InnerObj
				InnerObj.UnHilight
			End If
		Next Inner

	' Ergebnis dieser Runde setzen
		Set RechObjs = Nothing			' wird nicht mehr benötigt
		Set Objs = ObjsT				' die Objektmenge für die nächste Runde

	' Abbruchbedingungen testen (fertig vereinigt)
		If (fFound = False) Then
		' Objekt konnte nicht weiter vereinigt werden
			ResultObjs.Add OuterObj
			Objs.Remove OuterObj

		ElseIf (Objs.Count <= 1) Then
		' evtl. ist das letzte Objekt auch noch ein vereinigtes
			If (InnerObj Is Not Nothing) Then
				If (InnerObj.ObjClass.Name = cbNewObjectClass) Then
				' bereits vereinigtes Objekt aus GeoDB löschen
					GetActiveDocument.RemoveObject InnerObj
				End If
				Set InnerObj = Nothing
			End If

			If (Objs.Count = 1) Then
				ResultObjs.Add Objs(1)
			End If

			Exit Do		' raus hier (Ende der Veranstaltung)
		End If

	Loop 

	FreeStatus
	Set GeometryUnion = ResultObjs
	Exit Function

' Fehlerbehandlung
labelError:
	MsgBox cbError + Err.Description + cbErrNumber + Str$(Err.Number) + ")", _
		   ebOk+ebExclamation, cbErrCaption
	FreeStatus
	Exit Function

End Function 

'------------------------------------------------------------------------------
' StatusAnzeige verwalten
Private Sub InitStatus (lCount As Long)

' ggf. bereits existierenden StatusIndicator verwenden	
	If (Status Is Nothing) Then
		Set Status = New StatusIndicator
		if (Status Is Nothing) Then
			Exit Sub
		End If
	End If

	Status.Restart 0, (lCount*(lCount-1))/2, STATUS_ShowAllFields
	Status.Caption = cbStatusCap
	Status.Field(1) = cbStatusCnt
	Status.Field(2) = Str$(lCount) + cbStatusObjs
	Status.Field(3) = cbStatusText

End Sub

Private Function IncrementStatus(Optional Cnt As Variant) As Boolean

	IncrementStatus = False

' weiterschalten der Fortschrittsanzeige
Dim Steps As Long

	If (IsMissing(Cnt)) Then
		Steps = 1
	Else 
		Steps = CLng(Cnt)
	End If

	If (Status Is Not Nothing) Then
		lGlobalCnt = lGlobalCnt + Steps
		Status.SetPosition lGlobalCnt

		If (Status.WasCanceled()) Then
			Exit Function				' abgebrochen
		End If
	End If

' nicht abgebrochen
	IncrementStatus = True
End Function

' Freigeben der Frotschrittsanzeige
Private Sub FreeStatus()

	If (Status Is Not Nothing) Then
		Set Status = Nothing
	End If
End Sub

' --------------------------------------------------------------------------------------
' Parameter voreinstellen
Sub SetDeleteFlag (fDelete As Boolean)
	fDeleteObjs = fDelete		' benutzte Ausgangsobjekte löschen
End Sub

Sub SetMarkFlag (fMark As Boolean)
	fMarkObjs = fMark			' benutzte Ausgangsobjekte markieren
End Sub

Sub SetCopyFlag (fCopy As Boolean)
	fCopyObjs = fCopy			' nicht benutzte Ausgangsobjekte kopieren
End Sub

