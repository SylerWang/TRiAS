// Created by Microsoft (R) C/C++ Compiler Version 12.00.8964.0 (d2558c5e).
//
// d:\triasdev.mvc\gmobjects\_debug\PCSS.tlh
//
// C++ source equivalent of Win32 type library tlb/PCSS.tlb
// compiler-generated file created 10/10/02 at 22:51:29 - DO NOT EDIT!

#pragma once
#pragma pack(push, 8)

#include <comdef.h>

//
// Forward references and typedefs
//

struct __declspec(uuid("887bc700-d9a4-11ce-9656-08003601c1af"))
/* interface */ IGMProjAlgorithmStrings;
struct __declspec(uuid("887bc702-d9a4-11ce-9656-08003601c1af"))
/* dispinterface */ ProjAlgorithmStrings;
struct __declspec(uuid("9a107e90-e0b9-11ce-9657-08003601c1af"))
/* interface */ IGMGeodeticDatumStrings;
struct __declspec(uuid("9a107e91-e0b9-11ce-9657-08003601c1af"))
/* dispinterface */ GeodeticDatumStrings;
struct __declspec(uuid("9a107e92-e0b9-11ce-9657-08003601c1af"))
/* interface */ IGMEllipsoidStrings;
struct __declspec(uuid("9a107e94-e0b9-11ce-9657-08003601c1af"))
/* dispinterface */ EllipsoidStrings;
struct __declspec(uuid("803e6bf0-b312-11ce-964d-08003601c1af"))
/* interface */ IGMProjSpace;
struct __declspec(uuid("803e6bf2-b312-11ce-964d-08003601c1af"))
/* dispinterface */ ProjSpace;
struct __declspec(uuid("76416de0-c82d-11ce-9653-08003601c1af"))
/* interface */ IGMGeogSpace;
struct __declspec(uuid("76416de1-c82d-11ce-9653-08003601c1af"))
/* dispinterface */ GeogSpace;
struct __declspec(uuid("ff65cae0-4e8a-11ce-9cb5-08003601c1af"))
/* interface */ IGMUnitFormatSpec;
struct __declspec(uuid("2457b700-4e96-11ce-9cb5-08003601c1af"))
/* dispinterface */ UnitFormatSpec;
struct __declspec(uuid("d74800a0-3762-11d0-af9c-08003601e529"))
/* interface */ IGMPaperSpace;
struct __declspec(uuid("d74800a1-3762-11d0-af9c-08003601e529"))
/* dispinterface */ PaperSpace;
struct __declspec(uuid("c85d2720-49a1-11ce-9cb5-08003601c1af"))
/* interface */ IGMRefSpaceMgr;
struct __declspec(uuid("06e855c0-49a2-11ce-9cb5-08003601c1af"))
/* dispinterface */ RefSpaceMgr;
struct __declspec(uuid("a94cd060-33df-11ce-9cb5-08003601c1af"))
/* interface */ IGMCoordSystem;
struct __declspec(uuid("15626fd0-33e0-11ce-9cb5-08003601c1af"))
/* dispinterface */ DGMCoordSystem;
struct __declspec(uuid("e3e00be0-cb04-11d0-afc5-08003601e529"))
/* dual interface */ DGMDatumTransformation;
struct __declspec(uuid("75184600-f3c4-11d0-a26d-08003601d502"))
/* dual interface */ DGMBursaWolf;
struct __declspec(uuid("bd405000-f3c9-11d0-a26d-08003601d502"))
/* dual interface */ DGMComplexPolynomial;
struct __declspec(uuid("6d3d6f80-f7b9-11d0-a26d-08003601d502"))
/* dual interface */ DGMStringCollection;
struct __declspec(uuid("c60b4cb0-f3ca-11d0-a26d-08003601d502"))
/* dual interface */ DGMMultipleRegression;
struct __declspec(uuid("46935d20-f3cb-11d0-a26d-08003601d502"))
/* dual interface */ DGMSecondDegreePolynomial;
struct __declspec(uuid("2a76de30-f3c5-11d0-a26d-08003601d502"))
/* dual interface */ DGMStandardMolodensky;
struct __declspec(uuid("7080a269-80f3-11cf-a183-08003601d502"))
/* interface */ IGMLink;
struct __declspec(uuid("7080a26a-80f3-11cf-a183-08003601d502"))
/* dispinterface */ Link;
struct __declspec(uuid("7080a264-80f3-11cf-a183-08003601d502"))
/* interface */ IGMLinks;
struct __declspec(uuid("7080a265-80f3-11cf-a183-08003601d502"))
/* dispinterface */ Links;
struct __declspec(uuid("7080a267-80f3-11cf-a183-08003601d502"))
/* interface */ IGMTransLinks;
struct __declspec(uuid("7080a268-80f3-11cf-a183-08003601d502"))
/* dispinterface */ TransLinks;
struct __declspec(uuid("7080a262-80f3-11cf-a183-08003601d502"))
/* interface */ IGMAltCoordSystemPath;
struct __declspec(uuid("7080a263-80f3-11cf-a183-08003601d502"))
/* dispinterface */ AltCoordSystemPath;
struct __declspec(uuid("7080a260-80f3-11cf-a183-08003601d502"))
/* interface */ IGMAltCoordSystemPaths;
struct __declspec(uuid("7080a261-80f3-11cf-a183-08003601d502"))
/* dispinterface */ AltCoordSystemPaths;
struct __declspec(uuid("e4b5e810-3de4-11ce-9cb5-08003601c1af"))
/* interface */ IGMCoordSystemsMgr;
struct __declspec(uuid("c8f007a0-3de6-11ce-9cb5-08003601c1af"))
/* dispinterface */ DGMCoordSystemsMgr;
struct __declspec(uuid("116f4080-e3d7-11cf-af86-08003601e529"))
/* interface */ IGMUnitIDs;
struct __declspec(uuid("116f4081-e3d7-11cf-af86-08003601e529"))
/* dispinterface */ UnitIDs;
struct __declspec(uuid("d009af70-dcc2-11ce-af56-08003601e529"))
/* interface */ IGMUnitsOfMeasureTables;
struct __declspec(uuid("d009af71-dcc2-11ce-af56-08003601e529"))
/* dispinterface */ DGMUnitsOfMeasure;
struct __declspec(uuid("e054829e-f325-11d0-bc0c-080036ea3003"))
/* dual interface */ DGMLeastSquares;
struct __declspec(uuid("0fdda0f8-f967-11d0-bc0c-080036ea3003"))
/* dual interface */ DGMSingleParameterConstraints;
struct __declspec(uuid("cca27fff-08fc-11d1-bc0f-080036ea3003"))
/* dual interface */ DGMSingleParameterConstraint;
struct __declspec(uuid("cca27ffd-08fc-11d1-bc0f-080036ea3003"))
/* dual interface */ DGMObservations;
struct __declspec(uuid("cca28001-08fc-11d1-bc0f-080036ea3003"))
/* dual interface */ DGMObservation;
struct __declspec(uuid("36f830df-0913-11d1-bc10-080036ea3003"))
/* dual interface */ DGMLinearModelResidual;
struct __declspec(uuid("36f830e1-0913-11d1-bc10-080036ea3003"))
/* dual interface */ DGMNonlinearModelResidual;
struct CSSpoint;
typedef struct CSSpoint * LPCSSpoint;
typedef enum CSUnitConstants * LPCSUnitConstants;
typedef enum CSGeographicOrderConstants * LPCSGeographicOrderConstants;
typedef enum CSGeographicHemisphereOptionConstants * LPCSGeographicHemisphereOptionConstants;
typedef enum CSLongitudeNormalizationConstants * LPCSLongitudeNormalizationConstants;
typedef enum CSProjectionQuadrantConstants * LPCSProjectionQuadrantConstants;
typedef enum CSAzimuthStartConstants * LPCSAzimuthStartConstants;
typedef enum CSAzimuthDirectionConstants * LPCSAzimuthDirectionConstants;
typedef enum CSPointStringConstants * LPCSPointStringConstants;
typedef enum CSDescriptionConstants * LPCSDescriptionConstants;
typedef enum CSHeightDisplayConstants * LPCSHeightDisplayConstants;
typedef enum CSHeightDirectionConstants * LPCSHeightDirectionConstants;
typedef enum CSValueStringConstants * LPCSValueStringConstants;
typedef enum CSNegativeSuppressionLongitudeConstants * LPCSNegativeSuppressionLongitudeConstants;
typedef enum CSNegativeSuppressionHeightConstants * LPCSNegativeSuppressionHeightConstants;
typedef enum CSPointConstants * LPCSPointConstants;
typedef enum CSTransDirectionConstants * LPCSTransDirectionConstants;
struct CSStransDesc;
typedef struct CSStransDesc * LPCSStransDesc;
typedef enum CSProjectionAlgorithmConstants * LPCSProjectionAlgorithmConstants;
typedef enum CSGeographicHemisphereSelectionConstants * LPCSGeographicHemisphereSelectionConstants;
typedef enum CSGeodeticDatumConstants * LPCSGeodeticDatumConstants;
typedef enum CSEllipsoidConstants * LPCSEllipsoidConstants;
typedef enum UnitTypeConstants * LPUnitTypeConstants;
typedef enum UnitConstants * LPUnitConstants;
typedef enum CSBaseStorageConstants * LPCSBaseStorageConstants;
typedef enum CSHeightStorageConstants * LPCSHeightStorageConstants;
struct CSSedge;
typedef struct CSSedge * LPCSSedge;
typedef enum MatrixConstants * LPMatrixConstants;
typedef enum CSDatumTransformationModelConstants * LPCSDatumTransformationModelConstants;
typedef enum CSDatumTransformationDirectionConstants * LPCSDatumTransformationDirectionConstants;
typedef enum CSComplexPolynomialModelConstants * LPCSComplexPolynomialModelConstants;
typedef enum CSMultipleRegressionModelConstants * LPCSMultipleRegressionModelConstants;
typedef struct IGMProjAlgorithmStrings * LPGMProjAlgorithmStrings;
typedef struct IGMProjSpace * LPGMProjSpace;
typedef struct IGMUnitFormatSpec * LPGMUnitFormatSpec;
struct /* coclass */ UnitAndFormatSpec;
typedef struct IGMPaperSpace * LPGMPaperSpace;
typedef struct IGMRefSpaceMgr * LPGMRefSpaceMgr;
typedef struct IGMCoordSystem * LPGMCoordSystem;
struct /* coclass */ CoordSystem;
struct /* coclass */ DatumTransformation;
typedef struct IGMLink * LPGMLink;
typedef struct IGMLinks * LPGMLinks;
typedef struct IGMTransLinks * LPGMTransLinks;
typedef struct IGMAltCoordSystemPath * LPGMAltCoordSystemPath;
typedef struct IGMAltCoordSystemPaths * LPGMAltCoordSystemPaths;
typedef struct IGMCoordSystemsMgr * LPGMCoordSystemsMgr;
struct /* coclass */ CoordSystemsMgr;
typedef struct IGMUnitIDs * LPGMUnitIDs;
typedef struct IGMUnitsOfMeasureTables * LPGMUnitsOfMeasureTables;
struct /* coclass */ UnitsOfMeasure;
struct /* coclass */ BursaWolf;
struct /* coclass */ ComplexPolynomial;
struct /* coclass */ MultipleRegression;
struct /* coclass */ SecondDegreePolynomial;
struct /* coclass */ StandardMolodensky;
typedef enum LeastSquaresModelConstants * LPLeastSquaresModelConstants;
typedef enum LeastSquaresWeightsUsageConstants * LPLeastSquaresWeightsUsageConstants;
typedef enum LeastSquaresHomogeneousMatrixConstants * LPLeastSquaresHomogeneousMatrixConstants;
typedef enum LeastSquaresObservationConstants * LPLeastSquaresObservationConstants;
struct /* coclass */ LeastSquares;
struct /* coclass */ SingleParameterConstraints;
struct /* coclass */ SingleParameterConstraint;
struct /* coclass */ Observations;
struct /* coclass */ Observation;
struct /* coclass */ LinearModelResidual;
struct /* coclass */ NonlinearModelResidual;

//
// Smart pointer typedef declarations
//

_COM_SMARTPTR_TYPEDEF(IGMProjAlgorithmStrings, __uuidof(IGMProjAlgorithmStrings));
_COM_SMARTPTR_TYPEDEF(ProjAlgorithmStrings, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMGeodeticDatumStrings, __uuidof(IGMGeodeticDatumStrings));
_COM_SMARTPTR_TYPEDEF(GeodeticDatumStrings, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMEllipsoidStrings, __uuidof(IGMEllipsoidStrings));
_COM_SMARTPTR_TYPEDEF(EllipsoidStrings, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMProjSpace, __uuidof(IGMProjSpace));
_COM_SMARTPTR_TYPEDEF(ProjSpace, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMGeogSpace, __uuidof(IGMGeogSpace));
_COM_SMARTPTR_TYPEDEF(GeogSpace, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMUnitFormatSpec, __uuidof(IGMUnitFormatSpec));
_COM_SMARTPTR_TYPEDEF(UnitFormatSpec, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMPaperSpace, __uuidof(IGMPaperSpace));
_COM_SMARTPTR_TYPEDEF(PaperSpace, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMRefSpaceMgr, __uuidof(IGMRefSpaceMgr));
_COM_SMARTPTR_TYPEDEF(RefSpaceMgr, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMCoordSystem, __uuidof(IGMCoordSystem));
_COM_SMARTPTR_TYPEDEF(DGMCoordSystem, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DGMDatumTransformation, __uuidof(DGMDatumTransformation));
_COM_SMARTPTR_TYPEDEF(DGMBursaWolf, __uuidof(DGMBursaWolf));
_COM_SMARTPTR_TYPEDEF(DGMComplexPolynomial, __uuidof(DGMComplexPolynomial));
_COM_SMARTPTR_TYPEDEF(DGMStringCollection, __uuidof(DGMStringCollection));
_COM_SMARTPTR_TYPEDEF(DGMMultipleRegression, __uuidof(DGMMultipleRegression));
_COM_SMARTPTR_TYPEDEF(DGMSecondDegreePolynomial, __uuidof(DGMSecondDegreePolynomial));
_COM_SMARTPTR_TYPEDEF(DGMStandardMolodensky, __uuidof(DGMStandardMolodensky));
_COM_SMARTPTR_TYPEDEF(IGMLink, __uuidof(IGMLink));
_COM_SMARTPTR_TYPEDEF(Link, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMLinks, __uuidof(IGMLinks));
_COM_SMARTPTR_TYPEDEF(Links, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMTransLinks, __uuidof(IGMTransLinks));
_COM_SMARTPTR_TYPEDEF(TransLinks, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMAltCoordSystemPath, __uuidof(IGMAltCoordSystemPath));
_COM_SMARTPTR_TYPEDEF(AltCoordSystemPath, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMAltCoordSystemPaths, __uuidof(IGMAltCoordSystemPaths));
_COM_SMARTPTR_TYPEDEF(AltCoordSystemPaths, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMCoordSystemsMgr, __uuidof(IGMCoordSystemsMgr));
_COM_SMARTPTR_TYPEDEF(DGMCoordSystemsMgr, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMUnitIDs, __uuidof(IGMUnitIDs));
_COM_SMARTPTR_TYPEDEF(UnitIDs, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(IGMUnitsOfMeasureTables, __uuidof(IGMUnitsOfMeasureTables));
_COM_SMARTPTR_TYPEDEF(DGMUnitsOfMeasure, __uuidof(IDispatch));
_COM_SMARTPTR_TYPEDEF(DGMLeastSquares, __uuidof(DGMLeastSquares));
_COM_SMARTPTR_TYPEDEF(DGMSingleParameterConstraints, __uuidof(DGMSingleParameterConstraints));
_COM_SMARTPTR_TYPEDEF(DGMSingleParameterConstraint, __uuidof(DGMSingleParameterConstraint));
_COM_SMARTPTR_TYPEDEF(DGMObservations, __uuidof(DGMObservations));
_COM_SMARTPTR_TYPEDEF(DGMObservation, __uuidof(DGMObservation));
_COM_SMARTPTR_TYPEDEF(DGMLinearModelResidual, __uuidof(DGMLinearModelResidual));
_COM_SMARTPTR_TYPEDEF(DGMNonlinearModelResidual, __uuidof(DGMNonlinearModelResidual));

//
// Type library items
//

struct __declspec(uuid("887bc700-d9a4-11ce-9656-08003601c1af"))
IGMProjAlgorithmStrings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    BSTR Item (
        long index );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * lpCount ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long index,
        BSTR * lpItem ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * lplpEnum ) = 0;
};

struct __declspec(uuid("887bc702-d9a4-11ce-9656-08003601c1af"))
ProjAlgorithmStrings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    BSTR Item (
        long index );
    IUnknown * _NewEnum ( );
};

struct __declspec(uuid("9a107e90-e0b9-11ce-9657-08003601c1af"))
IGMGeodeticDatumStrings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    BSTR Item (
        long index );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long index,
        BSTR * pItem ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * pEnum ) = 0;
};

struct __declspec(uuid("9a107e91-e0b9-11ce-9657-08003601c1af"))
GeodeticDatumStrings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    BSTR Item (
        long index );
    IUnknown * _NewEnum ( );
};

struct __declspec(uuid("9a107e92-e0b9-11ce-9657-08003601c1af"))
IGMEllipsoidStrings : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    BSTR Item (
        long index );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long index,
        BSTR * pItem ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * pEnum ) = 0;
};

struct __declspec(uuid("9a107e94-e0b9-11ce-9657-08003601c1af"))
EllipsoidStrings : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    BSTR Item (
        long index );
    IUnknown * _NewEnum ( );
};

struct __declspec(uuid("803e6bf0-b312-11ce-964d-08003601c1af"))
IGMProjSpace : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProjAlgorithmStr,put=PutProjAlgorithmStr))
    BSTR ProjAlgorithmStr;
    __declspec(property(get=GetProjAlgorithmVal,put=PutProjAlgorithmVal))
    enum CSProjectionAlgorithmConstants ProjAlgorithmVal;
    __declspec(property(get=GetLonOfOrigStr,put=PutLonOfOrigStr))
    BSTR LonOfOrigStr;
    __declspec(property(get=GetLonOfOrig,put=PutLonOfOrig))
    double LonOfOrig;
    __declspec(property(get=GetLatOfOrigStr,put=PutLatOfOrigStr))
    BSTR LatOfOrigStr;
    __declspec(property(get=GetLatOfOrig,put=PutLatOfOrig))
    double LatOfOrig;
    __declspec(property(get=GetFalseXStr,put=PutFalseXStr))
    BSTR FalseXStr;
    __declspec(property(get=GetFalseX,put=PutFalseX))
    double FalseX;
    __declspec(property(get=GetFalseYStr,put=PutFalseYStr))
    BSTR FalseYStr;
    __declspec(property(get=GetFalseY,put=PutFalseY))
    double FalseY;
    __declspec(property(get=GetScaleReductFactStr,put=PutScaleReductFactStr))
    BSTR ScaleReductFactStr;
    __declspec(property(get=GetScaleReductFactVal,put=PutScaleReductFactVal))
    double ScaleReductFactVal;
    __declspec(property(get=GetZoneStr,put=PutZoneStr))
    BSTR ZoneStr;
    __declspec(property(get=GetZoneVal,put=PutZoneVal))
    long ZoneVal;
    __declspec(property(get=GetHemisphereStr,put=PutHemisphereStr))
    BSTR HemisphereStr;
    __declspec(property(get=GetHemisphereVal,put=PutHemisphereVal))
    enum CSGeographicHemisphereSelectionConstants HemisphereVal;
    __declspec(property(get=GetStandPar1Str,put=PutStandPar1Str))
    BSTR StandPar1Str;
    __declspec(property(get=GetStandPar1,put=PutStandPar1))
    double StandPar1;
    __declspec(property(get=GetStandPar2Str,put=PutStandPar2Str))
    BSTR StandPar2Str;
    __declspec(property(get=GetStandPar2,put=PutStandPar2))
    double StandPar2;
    __declspec(property(get=GetLatOfTrueScaleStr,put=PutLatOfTrueScaleStr))
    BSTR LatOfTrueScaleStr;
    __declspec(property(get=GetLatOfTrueScale,put=PutLatOfTrueScale))
    double LatOfTrueScale;
    __declspec(property(get=GetAzimuthAngStr,put=PutAzimuthAngStr))
    BSTR AzimuthAngStr;
    __declspec(property(get=GetAzimuthAng,put=PutAzimuthAng))
    double AzimuthAng;
    __declspec(property(get=GetExtendProjRotStr,put=PutExtendProjRotStr))
    BSTR ExtendProjRotStr;
    __declspec(property(get=GetExtendProjRot,put=PutExtendProjRot))
    double ExtendProjRot;
    __declspec(property(get=GetProjAlgorithmStrings))
    struct ProjAlgorithmStrings * ProjAlgorithmStrings;

    //
    // Wrapper methods for error-handling
    //

    BSTR GetProjAlgorithmStr ( );
    void PutProjAlgorithmStr (
        BSTR pProjAlgorithmStr );
    enum CSProjectionAlgorithmConstants GetProjAlgorithmVal ( );
    void PutProjAlgorithmVal (
        enum CSProjectionAlgorithmConstants pProjAlgorithmVal );
    BSTR GetLonOfOrigStr ( );
    void PutLonOfOrigStr (
        BSTR pLonOfOrigStr );
    double GetLonOfOrig ( );
    void PutLonOfOrig (
        double pLonOfOrig );
    BSTR GetLatOfOrigStr ( );
    void PutLatOfOrigStr (
        BSTR pLatOfOrigStr );
    double GetLatOfOrig ( );
    void PutLatOfOrig (
        double pLatOfOrig );
    BSTR GetFalseXStr ( );
    void PutFalseXStr (
        BSTR pFalseXStr );
    double GetFalseX ( );
    void PutFalseX (
        double pFalseX );
    BSTR GetFalseYStr ( );
    void PutFalseYStr (
        BSTR pFalseYStr );
    double GetFalseY ( );
    void PutFalseY (
        double pFalseY );
    BSTR GetScaleReductFactStr ( );
    void PutScaleReductFactStr (
        BSTR pScaleReductFactStr );
    double GetScaleReductFactVal ( );
    void PutScaleReductFactVal (
        double pScaleReductFactVal );
    BSTR GetZoneStr ( );
    void PutZoneStr (
        BSTR pZoneNumberStr );
    long GetZoneVal ( );
    void PutZoneVal (
        long pZoneVal );
    BSTR GetHemisphereStr ( );
    void PutHemisphereStr (
        BSTR pHemisphereStr );
    enum CSGeographicHemisphereSelectionConstants GetHemisphereVal ( );
    void PutHemisphereVal (
        enum CSGeographicHemisphereSelectionConstants pHemisphereVal );
    BSTR GetStandPar1Str ( );
    void PutStandPar1Str (
        BSTR pStandPar1Str );
    double GetStandPar1 ( );
    void PutStandPar1 (
        double pStandPar1 );
    BSTR GetStandPar2Str ( );
    void PutStandPar2Str (
        BSTR pStandPar2Str );
    double GetStandPar2 ( );
    void PutStandPar2 (
        double pStandPar2 );
    BSTR GetLatOfTrueScaleStr ( );
    void PutLatOfTrueScaleStr (
        BSTR pLatOfTrueScaleStr );
    double GetLatOfTrueScale ( );
    void PutLatOfTrueScale (
        double pLatOfTrueScale );
    BSTR GetAzimuthAngStr ( );
    void PutAzimuthAngStr (
        BSTR pAzimuthAngStr );
    double GetAzimuthAng ( );
    void PutAzimuthAng (
        double pAzimuthAng );
    BSTR GetExtendProjRotStr ( );
    void PutExtendProjRotStr (
        BSTR pExtendProjRotStr );
    double GetExtendProjRot ( );
    void PutExtendProjRot (
        double pExtendProjRot );
    struct ProjAlgorithmStrings * GetProjAlgorithmStrings ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ProjAlgorithmStr (
        BSTR * pProjAlgorithmStr ) = 0;
    virtual HRESULT __stdcall put_ProjAlgorithmStr (
        BSTR pProjAlgorithmStr ) = 0;
    virtual HRESULT __stdcall get_ProjAlgorithmVal (
        enum CSProjectionAlgorithmConstants * pProjAlgorithmVal ) = 0;
    virtual HRESULT __stdcall put_ProjAlgorithmVal (
        enum CSProjectionAlgorithmConstants pProjAlgorithmVal ) = 0;
    virtual HRESULT __stdcall get_LonOfOrigStr (
        BSTR * pLonOfOrigStr ) = 0;
    virtual HRESULT __stdcall put_LonOfOrigStr (
        BSTR pLonOfOrigStr ) = 0;
    virtual HRESULT __stdcall get_LonOfOrig (
        double * pLonOfOrig ) = 0;
    virtual HRESULT __stdcall put_LonOfOrig (
        double pLonOfOrig ) = 0;
    virtual HRESULT __stdcall get_LatOfOrigStr (
        BSTR * pLatOfOrigStr ) = 0;
    virtual HRESULT __stdcall put_LatOfOrigStr (
        BSTR pLatOfOrigStr ) = 0;
    virtual HRESULT __stdcall get_LatOfOrig (
        double * pLatOfOrig ) = 0;
    virtual HRESULT __stdcall put_LatOfOrig (
        double pLatOfOrig ) = 0;
    virtual HRESULT __stdcall get_FalseXStr (
        BSTR * pFalseXStr ) = 0;
    virtual HRESULT __stdcall put_FalseXStr (
        BSTR pFalseXStr ) = 0;
    virtual HRESULT __stdcall get_FalseX (
        double * pFalseX ) = 0;
    virtual HRESULT __stdcall put_FalseX (
        double pFalseX ) = 0;
    virtual HRESULT __stdcall get_FalseYStr (
        BSTR * pFalseYStr ) = 0;
    virtual HRESULT __stdcall put_FalseYStr (
        BSTR pFalseYStr ) = 0;
    virtual HRESULT __stdcall get_FalseY (
        double * pFalseY ) = 0;
    virtual HRESULT __stdcall put_FalseY (
        double pFalseY ) = 0;
    virtual HRESULT __stdcall get_ScaleReductFactStr (
        BSTR * pScaleReductFactStr ) = 0;
    virtual HRESULT __stdcall put_ScaleReductFactStr (
        BSTR pScaleReductFactStr ) = 0;
    virtual HRESULT __stdcall get_ScaleReductFactVal (
        double * pScaleReductFactVal ) = 0;
    virtual HRESULT __stdcall put_ScaleReductFactVal (
        double pScaleReductFactVal ) = 0;
    virtual HRESULT __stdcall get_ZoneStr (
        BSTR * pZoneNumberStr ) = 0;
    virtual HRESULT __stdcall put_ZoneStr (
        BSTR pZoneNumberStr ) = 0;
    virtual HRESULT __stdcall get_ZoneVal (
        long * pZoneVal ) = 0;
    virtual HRESULT __stdcall put_ZoneVal (
        long pZoneVal ) = 0;
    virtual HRESULT __stdcall get_HemisphereStr (
        BSTR * pHemisphereStr ) = 0;
    virtual HRESULT __stdcall put_HemisphereStr (
        BSTR pHemisphereStr ) = 0;
    virtual HRESULT __stdcall get_HemisphereVal (
        enum CSGeographicHemisphereSelectionConstants * pHemisphereVal ) = 0;
    virtual HRESULT __stdcall put_HemisphereVal (
        enum CSGeographicHemisphereSelectionConstants pHemisphereVal ) = 0;
    virtual HRESULT __stdcall get_StandPar1Str (
        BSTR * pStandPar1Str ) = 0;
    virtual HRESULT __stdcall put_StandPar1Str (
        BSTR pStandPar1Str ) = 0;
    virtual HRESULT __stdcall get_StandPar1 (
        double * pStandPar1 ) = 0;
    virtual HRESULT __stdcall put_StandPar1 (
        double pStandPar1 ) = 0;
    virtual HRESULT __stdcall get_StandPar2Str (
        BSTR * pStandPar2Str ) = 0;
    virtual HRESULT __stdcall put_StandPar2Str (
        BSTR pStandPar2Str ) = 0;
    virtual HRESULT __stdcall get_StandPar2 (
        double * pStandPar2 ) = 0;
    virtual HRESULT __stdcall put_StandPar2 (
        double pStandPar2 ) = 0;
    virtual HRESULT __stdcall get_LatOfTrueScaleStr (
        BSTR * pLatOfTrueScaleStr ) = 0;
    virtual HRESULT __stdcall put_LatOfTrueScaleStr (
        BSTR pLatOfTrueScaleStr ) = 0;
    virtual HRESULT __stdcall get_LatOfTrueScale (
        double * pLatOfTrueScale ) = 0;
    virtual HRESULT __stdcall put_LatOfTrueScale (
        double pLatOfTrueScale ) = 0;
    virtual HRESULT __stdcall get_AzimuthAngStr (
        BSTR * pAzimuthAngStr ) = 0;
    virtual HRESULT __stdcall put_AzimuthAngStr (
        BSTR pAzimuthAngStr ) = 0;
    virtual HRESULT __stdcall get_AzimuthAng (
        double * pAzimuthAng ) = 0;
    virtual HRESULT __stdcall put_AzimuthAng (
        double pAzimuthAng ) = 0;
    virtual HRESULT __stdcall get_ExtendProjRotStr (
        BSTR * pExtendProjRotStr ) = 0;
    virtual HRESULT __stdcall put_ExtendProjRotStr (
        BSTR pExtendProjRotStr ) = 0;
    virtual HRESULT __stdcall get_ExtendProjRot (
        double * pExtendProjRot ) = 0;
    virtual HRESULT __stdcall put_ExtendProjRot (
        double pExtendProjRot ) = 0;
    virtual HRESULT __stdcall get_ProjAlgorithmStrings (
        struct ProjAlgorithmStrings * * pProjAlgorithmStrings ) = 0;
};

enum CSProjectionAlgorithmConstants
{
    cspaUndefined = 0,
    cspaMercator = 1,
    cspaLambert = 2,
    cspaNorthPolar = 3,
    cspaSouthPolar = 4,
    cspaLinearElastic = 5,
    cspaSimpleCylindrical = 5,
    cspaTransverseMercator = 6,
    cspaUniveralTransverseMercator = 8,
    cspaUniversalTransverseMercator = 8,
    cspaIndonesianPoly = 9,
    cspaSPCS27 = 10,
    cspaPolyconic = 11,
    cspaAlbers = 12,
    cspaObliqueMercator = 13,
    cspaNewZealand = 14,
    cspaVanDerGrinten = 15,
    cspaAzimuthalEquidistant = 19,
    cspaOrthographic = 20,
    cspaSPCS83 = 21,
    cspaStereographic = 22,
    cspaGnomonic = 23,
    cspaRobinson = 24,
    cspaCassini = 25,
    cspaSinusoidal = 26,
    cspaLambertAzimuthalEqArea = 27,
    cspaMillerCyl = 28,
    cspaBonne = 29,
    cspaBritNGrid = 30,
    cspaMollweide = 31,
    cspaLocalSpaceRect = 32,
    cspaUniversalPolarStereo = 33,
    cspaRectifiedSkewOrthomorphic = 35,
    cspaIMWModPolycon = 36,
    cspaObliqueLambert = 37,
    cspaChamberlinTrimetric = 38,
    cspaCylEquirect = 39,
    cspaGeneralPespective = 40,
    cspaGeneralPerspective = 40,
    cspaConic = 41,
    cspaStereo3Step = 42,
    cspaGaussKruger = 43,
    cspaBIPOCC = 44,
    cspaLaborde = 45,
    cspaEckertIV = 46,
    cspaSpaceObliqueMercator = 47,
    cspaSpaceObliqueMercatorPS = 48,
    cspaKrovak = 49
};

enum CSGeographicHemisphereSelectionConstants
{
    csghsNorthern = 0,
    csghsSouthern = 1
};

struct __declspec(uuid("803e6bf2-b312-11ce-964d-08003601c1af"))
ProjSpace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProjAlgorithmStr,put=PutProjAlgorithmStr))
    BSTR ProjAlgorithmStr;
    __declspec(property(get=GetProjAlgorithmVal,put=PutProjAlgorithmVal))
    enum CSProjectionAlgorithmConstants ProjAlgorithmVal;
    __declspec(property(get=GetLonOfOrigStr,put=PutLonOfOrigStr))
    BSTR LonOfOrigStr;
    __declspec(property(get=GetLonOfOrig,put=PutLonOfOrig))
    double LonOfOrig;
    __declspec(property(get=GetLatOfOrigStr,put=PutLatOfOrigStr))
    BSTR LatOfOrigStr;
    __declspec(property(get=GetLatOfOrig,put=PutLatOfOrig))
    double LatOfOrig;
    __declspec(property(get=GetFalseXStr,put=PutFalseXStr))
    BSTR FalseXStr;
    __declspec(property(get=GetFalseX,put=PutFalseX))
    double FalseX;
    __declspec(property(get=GetFalseYStr,put=PutFalseYStr))
    BSTR FalseYStr;
    __declspec(property(get=GetFalseY,put=PutFalseY))
    double FalseY;
    __declspec(property(get=GetScaleReductFactStr,put=PutScaleReductFactStr))
    BSTR ScaleReductFactStr;
    __declspec(property(get=GetScaleReductFactVal,put=PutScaleReductFactVal))
    double ScaleReductFactVal;
    __declspec(property(get=GetZoneStr,put=PutZoneStr))
    BSTR ZoneStr;
    __declspec(property(get=GetZoneVal,put=PutZoneVal))
    long ZoneVal;
    __declspec(property(get=GetHemisphereStr,put=PutHemisphereStr))
    BSTR HemisphereStr;
    __declspec(property(get=GetHemisphereVal,put=PutHemisphereVal))
    enum CSGeographicHemisphereSelectionConstants HemisphereVal;
    __declspec(property(get=GetStandPar1Str,put=PutStandPar1Str))
    BSTR StandPar1Str;
    __declspec(property(get=GetStandPar1,put=PutStandPar1))
    double StandPar1;
    __declspec(property(get=GetStandPar2Str,put=PutStandPar2Str))
    BSTR StandPar2Str;
    __declspec(property(get=GetStandPar2,put=PutStandPar2))
    double StandPar2;
    __declspec(property(get=GetLatOfTrueScaleStr,put=PutLatOfTrueScaleStr))
    BSTR LatOfTrueScaleStr;
    __declspec(property(get=GetLatOfTrueScale,put=PutLatOfTrueScale))
    double LatOfTrueScale;
    __declspec(property(get=GetAzimuthAngStr,put=PutAzimuthAngStr))
    BSTR AzimuthAngStr;
    __declspec(property(get=GetAzimuthAng,put=PutAzimuthAng))
    double AzimuthAng;
    __declspec(property(get=GetExtendProjRotStr,put=PutExtendProjRotStr))
    BSTR ExtendProjRotStr;
    __declspec(property(get=GetExtendProjRot,put=PutExtendProjRot))
    double ExtendProjRot;
    __declspec(property(get=GetProjAlgorithmStrings))
    struct ProjAlgorithmStrings * ProjAlgorithmStrings;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    BSTR GetProjAlgorithmStr ( );
    void PutProjAlgorithmStr (
        BSTR _arg1 );
    enum CSProjectionAlgorithmConstants GetProjAlgorithmVal ( );
    void PutProjAlgorithmVal (
        enum CSProjectionAlgorithmConstants _arg1 );
    BSTR GetLonOfOrigStr ( );
    void PutLonOfOrigStr (
        BSTR _arg1 );
    double GetLonOfOrig ( );
    void PutLonOfOrig (
        double _arg1 );
    BSTR GetLatOfOrigStr ( );
    void PutLatOfOrigStr (
        BSTR _arg1 );
    double GetLatOfOrig ( );
    void PutLatOfOrig (
        double _arg1 );
    BSTR GetFalseXStr ( );
    void PutFalseXStr (
        BSTR _arg1 );
    double GetFalseX ( );
    void PutFalseX (
        double _arg1 );
    BSTR GetFalseYStr ( );
    void PutFalseYStr (
        BSTR _arg1 );
    double GetFalseY ( );
    void PutFalseY (
        double _arg1 );
    BSTR GetScaleReductFactStr ( );
    void PutScaleReductFactStr (
        BSTR _arg1 );
    double GetScaleReductFactVal ( );
    void PutScaleReductFactVal (
        double _arg1 );
    BSTR GetZoneStr ( );
    void PutZoneStr (
        BSTR _arg1 );
    long GetZoneVal ( );
    void PutZoneVal (
        long _arg1 );
    BSTR GetHemisphereStr ( );
    void PutHemisphereStr (
        BSTR _arg1 );
    enum CSGeographicHemisphereSelectionConstants GetHemisphereVal ( );
    void PutHemisphereVal (
        enum CSGeographicHemisphereSelectionConstants _arg1 );
    BSTR GetStandPar1Str ( );
    void PutStandPar1Str (
        BSTR _arg1 );
    double GetStandPar1 ( );
    void PutStandPar1 (
        double _arg1 );
    BSTR GetStandPar2Str ( );
    void PutStandPar2Str (
        BSTR _arg1 );
    double GetStandPar2 ( );
    void PutStandPar2 (
        double _arg1 );
    BSTR GetLatOfTrueScaleStr ( );
    void PutLatOfTrueScaleStr (
        BSTR _arg1 );
    double GetLatOfTrueScale ( );
    void PutLatOfTrueScale (
        double _arg1 );
    BSTR GetAzimuthAngStr ( );
    void PutAzimuthAngStr (
        BSTR _arg1 );
    double GetAzimuthAng ( );
    void PutAzimuthAng (
        double _arg1 );
    BSTR GetExtendProjRotStr ( );
    void PutExtendProjRotStr (
        BSTR _arg1 );
    double GetExtendProjRot ( );
    void PutExtendProjRot (
        double _arg1 );
    struct ProjAlgorithmStrings * GetProjAlgorithmStrings ( );
};

struct __declspec(uuid("76416de0-c82d-11ce-9653-08003601c1af"))
IGMGeogSpace : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetGeodeticDatumStr,put=PutGeodeticDatumStr))
    BSTR GeodeticDatumStr;
    __declspec(property(get=GetGeodeticDatumVal,put=PutGeodeticDatumVal))
    enum CSGeodeticDatumConstants GeodeticDatumVal;
    __declspec(property(get=GetEllipsoidStr,put=PutEllipsoidStr))
    BSTR EllipsoidStr;
    __declspec(property(get=GetEllipsoidVal,put=PutEllipsoidVal))
    enum CSEllipsoidConstants EllipsoidVal;
    __declspec(property(get=GetEquatorialRadStr,put=PutEquatorialRadStr))
    BSTR EquatorialRadStr;
    __declspec(property(get=GetEquatorialRad,put=PutEquatorialRad))
    double EquatorialRad;
    __declspec(property(get=GetPolarRadStr,put=PutPolarRadStr))
    BSTR PolarRadStr;
    __declspec(property(get=GetPolarRad,put=PutPolarRad))
    double PolarRad;
    __declspec(property(get=GetEccentricityStr,put=PutEccentricityStr))
    BSTR EccentricityStr;
    __declspec(property(get=GetEccentricityVal,put=PutEccentricityVal))
    double EccentricityVal;
    __declspec(property(get=GetFlatteningStr,put=PutFlatteningStr))
    BSTR FlatteningStr;
    __declspec(property(get=GetFlatteningVal,put=PutFlatteningVal))
    double FlatteningVal;
    __declspec(property(get=GetFlatteningInverseStr,put=PutFlatteningInverseStr))
    BSTR FlatteningInverseStr;
    __declspec(property(get=GetFlatteningInverseVal,put=PutFlatteningInverseVal))
    double FlatteningInverseVal;
    __declspec(property(get=GetGeodeticDatumStrings))
    struct GeodeticDatumStrings * GeodeticDatumStrings;
    __declspec(property(get=GetEllipsoidStrings))
    struct EllipsoidStrings * EllipsoidStrings;

    //
    // Wrapper methods for error-handling
    //

    BSTR GetGeodeticDatumStr ( );
    void PutGeodeticDatumStr (
        BSTR pGeodeticDatumStr );
    enum CSGeodeticDatumConstants GetGeodeticDatumVal ( );
    void PutGeodeticDatumVal (
        enum CSGeodeticDatumConstants pGeodeticDatumVal );
    BSTR GetEllipsoidStr ( );
    void PutEllipsoidStr (
        BSTR pEllipsoidStr );
    enum CSEllipsoidConstants GetEllipsoidVal ( );
    void PutEllipsoidVal (
        enum CSEllipsoidConstants pEllipsoidVal );
    BSTR GetEquatorialRadStr ( );
    void PutEquatorialRadStr (
        BSTR pEquatorialRadStr );
    double GetEquatorialRad ( );
    void PutEquatorialRad (
        double pEquatorialRad );
    BSTR GetPolarRadStr ( );
    void PutPolarRadStr (
        BSTR pPolarRadStr );
    double GetPolarRad ( );
    void PutPolarRad (
        double pPolarRad );
    BSTR GetEccentricityStr ( );
    void PutEccentricityStr (
        BSTR pEccentricityStr );
    double GetEccentricityVal ( );
    void PutEccentricityVal (
        double pEccentricityVal );
    BSTR GetFlatteningStr ( );
    void PutFlatteningStr (
        BSTR pFlatteningStr );
    double GetFlatteningVal ( );
    void PutFlatteningVal (
        double pFlatteningVal );
    BSTR GetFlatteningInverseStr ( );
    void PutFlatteningInverseStr (
        BSTR pFlatteningInverseStr );
    double GetFlatteningInverseVal ( );
    void PutFlatteningInverseVal (
        double pFlatteningInverseVal );
    struct GeodeticDatumStrings * GetGeodeticDatumStrings ( );
    struct EllipsoidStrings * GetEllipsoidStrings ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_GeodeticDatumStr (
        BSTR * pGeodeticDatumStr ) = 0;
    virtual HRESULT __stdcall put_GeodeticDatumStr (
        BSTR pGeodeticDatumStr ) = 0;
    virtual HRESULT __stdcall get_GeodeticDatumVal (
        enum CSGeodeticDatumConstants * pGeodeticDatumVal ) = 0;
    virtual HRESULT __stdcall put_GeodeticDatumVal (
        enum CSGeodeticDatumConstants pGeodeticDatumVal ) = 0;
    virtual HRESULT __stdcall get_EllipsoidStr (
        BSTR * pEllipsoidStr ) = 0;
    virtual HRESULT __stdcall put_EllipsoidStr (
        BSTR pEllipsoidStr ) = 0;
    virtual HRESULT __stdcall get_EllipsoidVal (
        enum CSEllipsoidConstants * pEllipsoidVal ) = 0;
    virtual HRESULT __stdcall put_EllipsoidVal (
        enum CSEllipsoidConstants pEllipsoidVal ) = 0;
    virtual HRESULT __stdcall get_EquatorialRadStr (
        BSTR * pEquatorialRadStr ) = 0;
    virtual HRESULT __stdcall put_EquatorialRadStr (
        BSTR pEquatorialRadStr ) = 0;
    virtual HRESULT __stdcall get_EquatorialRad (
        double * pEquatorialRad ) = 0;
    virtual HRESULT __stdcall put_EquatorialRad (
        double pEquatorialRad ) = 0;
    virtual HRESULT __stdcall get_PolarRadStr (
        BSTR * pPolarRadStr ) = 0;
    virtual HRESULT __stdcall put_PolarRadStr (
        BSTR pPolarRadStr ) = 0;
    virtual HRESULT __stdcall get_PolarRad (
        double * pPolarRad ) = 0;
    virtual HRESULT __stdcall put_PolarRad (
        double pPolarRad ) = 0;
    virtual HRESULT __stdcall get_EccentricityStr (
        BSTR * pEccentricityStr ) = 0;
    virtual HRESULT __stdcall put_EccentricityStr (
        BSTR pEccentricityStr ) = 0;
    virtual HRESULT __stdcall get_EccentricityVal (
        double * pEccentricityVal ) = 0;
    virtual HRESULT __stdcall put_EccentricityVal (
        double pEccentricityVal ) = 0;
    virtual HRESULT __stdcall get_FlatteningStr (
        BSTR * pFlatteningStr ) = 0;
    virtual HRESULT __stdcall put_FlatteningStr (
        BSTR pFlatteningStr ) = 0;
    virtual HRESULT __stdcall get_FlatteningVal (
        double * pFlatteningVal ) = 0;
    virtual HRESULT __stdcall put_FlatteningVal (
        double pFlatteningVal ) = 0;
    virtual HRESULT __stdcall get_FlatteningInverseStr (
        BSTR * pFlatteningInverseStr ) = 0;
    virtual HRESULT __stdcall put_FlatteningInverseStr (
        BSTR pFlatteningInverseStr ) = 0;
    virtual HRESULT __stdcall get_FlatteningInverseVal (
        double * pFlatteningInverseVal ) = 0;
    virtual HRESULT __stdcall put_FlatteningInverseVal (
        double pFlatteningInverseVal ) = 0;
    virtual HRESULT __stdcall get_GeodeticDatumStrings (
        struct GeodeticDatumStrings * * pGeodeticDatumStrings ) = 0;
    virtual HRESULT __stdcall get_EllipsoidStrings (
        struct EllipsoidStrings * * pEllipsoidStrings ) = 0;
};

enum CSGeodeticDatumConstants
{
    csgdUndefined = -1,
    csgdUserDefined = 0,
    csgdAFG = 1,
    csgdAustralian1966 = 2,
    csgdAustralian1984 = 3,
    csgdEuropean1950 = 4,
    csgdEuropean1979 = 5,
    csgdGeodDatum1949 = 6,
    csgdIndian = 7,
    csgdIreland1965 = 8,
    csgdNAD27 = 9,
    csgdNAD83 = 10,
    csgdOrdnanceSurveyGreatBritain = 11,
    csgdPulkovo1942 = 12,
    csgdQornoq = 13,
    csgdTokyo = 14,
    csgdWGS66 = 15,
    csgdWGS72 = 16,
    csgdWGS84 = 17,
    csgdSAD1956 = 18,
    csgdSAD1969 = 19,
    csgdIndonesian1974 = 20,
    csgdWGS60 = 21,
    csgdTananObservatory1925 = 22,
    csgdKertau1948 = 23,
    csgdPotsdam = 24,
    csgdUSStandard = 25,
    csgdMGICS = 26,
    csgdGeocDatumOfAustralia94 = 27,
    csgdAgadez = 28,
    csgdAmersfoort = 29,
    csgdAncienneTriangFrancaise = 30,
    csgdAratu = 31,
    csgdAvgTerrestrialSystem1977 = 32,
    csgdBarbados = 33,
    csgdBatavia = 34,
    csgdBeduaram = 35,
    csgdBeijing1954 = 36,
    csgdBern1898 = 37,
    csgdBern1938 = 38,
    csgdCamacupa = 39,
    csgdConakry1905 = 40,
    csgdCotedIvoire = 41,
    csgdDatum73 = 42,
    csgdDealulPiscului1933 = 43,
    csgdDealulPiscului1970 = 44,
    csgdDeirezZor = 45,
    csgdDeutscheHauptdreiecksnetz = 46,
    csgdDouala = 47,
    csgdEuropean1987 = 48,
    csgdETRS89 = 49,
    csgdFahud = 50,
    csgdGaroua = 51,
    csgdGreek = 52,
    csgdGreekGRS1987 = 53,
    csgdGuyaneFrancaise = 54,
    csgdHitoXVIII1963 = 55,
    csgdHungarianDatum1972 = 56,
    csgdJamaica1875 = 57,
    csgdJamaica1969 = 58,
    csgdKalianpur = 59,
    csgdKKJ = 60,
    csgdKuwaitOilCompany = 61,
    csgdKuwaitUtility = 62,
    csgdLaCanoa = 63,
    csgdLake = 64,
    csgdLisbon = 65,
    csgdLomaQuintana = 66,
    csgdLome = 67,
    csgdMakassar = 68,
    csgdMalongo1987 = 69,
    csgdManoca = 70,
    csgdMhast = 71,
    csgdMilitarGeogInstitut = 72,
    csgdMonteMario = 73,
    csgdNationalGeodeticNetwork = 74,
    csgdNGO1948 = 75,
    csgdNorddeGuerre = 76,
    csgdNouvelleTriangFrancaise = 77,
    csgdNSWC9Z2 = 78,
    csgdOSSN1980 = 79,
    csgdOSGB1970SN = 80,
    csgdPadang1884 = 81,
    csgdPalestine1923 = 82,
    csgdPulkovo1995 = 83,
    csgdQatar1948 = 84,
    csgdReseauNationalBelge1950 = 85,
    csgdReseauNationalBelge1972 = 86,
    csgdSegora = 87,
    csgdSerindung = 88,
    csgdStockholm1938 = 89,
    csgdSudan = 90,
    csgdTM65 = 91,
    csgdTM75 = 92,
    csgdTrinidad1903 = 93,
    csgdTrucialCoast1948 = 94,
    csgdVoirol1875EPSG = 95,
    csgdWGS72TransitBE = 96,
    csgdYoff = 97,
    csgdAdindan = 100,
    csgdAinelAbd1970 = 102,
    csgdAmericanSamoaDatum1962 = 103,
    csgdAnna1Astro1965 = 104,
    csgdAntiguaIslandAstro1943 = 105,
    csgdArc1950 = 106,
    csgdArc1950NIMA = 106,
    csgdArc1960 = 107,
    csgdAscensionIsland1958 = 108,
    csgdAstroBeaconE1945 = 109,
    csgdAstroDOS71s4 = 110,
    csgdAstroTernIsland1961 = 111,
    csgdAstronomicalStation1952 = 112,
    csgdAyabelleLighthouse = 115,
    csgdBellevueIGN = 116,
    csgdBermuda1957 = 117,
    csgdBissau = 118,
    csgdBogotaObservatory = 119,
    csgdBukitRimpah = 120,
    csgdCampAreaAstro = 121,
    csgdCampoInchauspe = 122,
    csgdCantonAstro1966 = 123,
    csgdCape = 124,
    csgdCapeNIMA = 124,
    csgdCapeCanaveral = 125,
    csgdCarthage = 126,
    csgdCarthageNIMA = 126,
    csgdChathamIslandAstro1971 = 127,
    csgdChuaAstro = 128,
    csgdCorregoAlegre = 129,
    csgdDabola = 130,
    csgdDeceptionIslandAntarctica = 131,
    csgdDjakartaBatavia = 132,
    csgdDOS1968 = 133,
    csgdEasterIsland1967 = 134,
    csgdFortThomas1955 = 137,
    csgdGan1970 = 138,
    csgdGraciosaBaseSW1948 = 140,
    csgdGuam1963 = 141,
    csgdGunungSegara = 142,
    csgdGUX1Astro = 143,
    csgdHeratNorth = 144,
    csgdHjorsey1955 = 145,
    csgdHongKong1963 = 146,
    csgdHuTzuShan = 147,
    csgdIndian1954 = 149,
    csgdIndian1960 = 150,
    csgdIndian1975 = 151,
    csgdISTS061Astro1968 = 154,
    csgdISTS073Astro1969 = 155,
    csgdJohnstonIsland1961 = 156,
    csgdKandawala = 157,
    csgdKerguelenIsland1949 = 158,
    csgdKusaieAstro1951 = 160,
    csgdLC5Astro1961 = 161,
    csgdLeigon = 162,
    csgdLiberia1964 = 163,
    csgdLuzon = 164,
    csgdMPoraloko = 165,
    csgdMPoralokoNIMA = 165,
    csgdMahe1971 = 166,
    csgdMassawa = 167,
    csgdMerchich = 168,
    csgdMerchichNIMA = 168,
    csgdMidwayAstro1961 = 169,
    csgdMinna = 170,
    csgdMontserratIslandAstro1958 = 171,
    csgdNahrwan = 172,
    csgdNaparimaBWI = 173,
    csgdNorthSaharaGeodeticSystem1959 = 176,
    csgdNorthSahara1959NIMA = 176,
    csgdObservatorioMeteorologico1939 = 177,
    csgdOldEgyptian1907 = 178,
    csgdOldHawaiian = 179,
    csgdOman = 180,
    csgdPicodelasNieves = 182,
    csgdPitcairnAstro1967 = 183,
    csgdPoint58 = 184,
    csgdPointeNoire1948 = 185,
    csgdPointeNoire1948NIMA = 185,
    csgdPortoSanto1936 = 186,
    csgdProvisionalSouthChilean1963 = 188,
    csgdPuertoRico = 189,
    csgdQatarNational = 191,
    csgdReunion = 193,
    csgdRome1940 = 194,
    csgdS42Pulkovo1942 = 195,
    csgdSJTSK = 196,
    csgdSantoDOS1965 = 197,
    csgdSaoBraz = 198,
    csgdSapperHill1943 = 199,
    csgdSchwarzeck = 200,
    csgdSelvagemGrande1938 = 201,
    csgdSouthAsia = 203,
    csgdTimbalai1948 = 205,
    csgdTristanAstro1968 = 207,
    csgdVitiLevu1916 = 208,
    csgdVoirol1960 = 209,
    csgdVoirol1960NIMA = 209,
    csgdWakeIslandAstro1952 = 210,
    csgdWakeEniwetok1960 = 211,
    csgdYacare = 214,
    csgdZanderij = 215,
    csgdIndianIndiaAndNepal = 301,
    csgdIndianPakistan = 302,
    csgdCoordSys1937Estonia = 303,
    csgdSierraLeone1960 = 304,
    csgdHermannskogel = 305,
    csgdRiketskoordinatsystem1990 = 306,
    csgdSamboja = 307,
    csgdLithuania1994ETRS89 = 308,
    csgdNAD83HARN = 309,
    csgdArc1950EPSG = 310,
    csgdCapeEPSG = 311,
    csgdCarthageEPSG = 312,
    csgdMPoralokoEPSG = 313,
    csgdMerchichEPSG = 314,
    csgdNorthSahara1959EPSG = 315,
    csgdPointeNoire1948EPSG = 316,
    csgdVoirol1960EPSG = 317,
    csgdVoirol1874NIMA = 318,
    csgdReseauGeodFrancais1993 = 319,
    csgdHartebeesthoek94 = 320
};

enum CSEllipsoidConstants
{
    cseUndefined = 0,
    cseGRS80 = 1,
    cseWGS72 = 2,
    cseAussyNatSAmer69 = 3,
    cseKrassovsky = 4,
    cseInternational = 5,
    cseWGS66 = 6,
    cseClark1880 = 7,
    cseClark1880NIMA = 7,
    cseClark1866 = 8,
    cseHelmert1906 = 9,
    cseBessel1841 = 10,
    cseDanish = 11,
    cseStruve = 12,
    cseHough = 13,
    cseAiry1830 = 14,
    cseEverest1830 = 15,
    cseModAiry = 16,
    cseModEverest = 17,
    cseFischer1960Mercury = 18,
    cseModFischer1960SA = 19,
    cseFischer1968 = 20,
    cseUserDefined = 21,
    cseWGS84 = 22,
    cseIndoNational1974 = 23,
    cseWGS60 = 24,
    cseUnitSphere = 25,
    cseEverestBruneiAndEMalaysia = 26,
    cseEverestIndia1956 = 27,
    cseEverestWMalaysia1969 = 28,
    cseBessel1841Namibia = 29,
    cseEverestPakistan = 30,
    cseClarke1880IGN = 31,
    cseClarke1880Arc = 32,
    cseClarke1880Benoit = 33,
    cseClarke1880SGA1922 = 34,
    cseAvgTerrestrialSystem1977 = 35,
    cseModifiedBessel = 36,
    cseClarke1858EPSG = 37,
    cseGEM10C = 38,
    cseGRS1967 = 39,
    cseNWL10D = 40,
    cseNWL9D = 41,
    cseOSU86F = 42,
    cseOSU91A = 43,
    csePlessis1817 = 44,
    cseStruve1860 = 45,
    cseWarOffice = 46,
    cseClarke1880EPSG = 47,
    cseEverest1830Def1975 = 48
};

struct __declspec(uuid("76416de1-c82d-11ce-9653-08003601c1af"))
GeogSpace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetGeodeticDatumStr,put=PutGeodeticDatumStr))
    BSTR GeodeticDatumStr;
    __declspec(property(get=GetGeodeticDatumVal,put=PutGeodeticDatumVal))
    enum CSGeodeticDatumConstants GeodeticDatumVal;
    __declspec(property(get=GetEllipsoidStr,put=PutEllipsoidStr))
    BSTR EllipsoidStr;
    __declspec(property(get=GetEllipsoidVal,put=PutEllipsoidVal))
    enum CSEllipsoidConstants EllipsoidVal;
    __declspec(property(get=GetEquatorialRadStr,put=PutEquatorialRadStr))
    BSTR EquatorialRadStr;
    __declspec(property(get=GetEquatorialRad,put=PutEquatorialRad))
    double EquatorialRad;
    __declspec(property(get=GetPolarRadStr,put=PutPolarRadStr))
    BSTR PolarRadStr;
    __declspec(property(get=GetPolarRad,put=PutPolarRad))
    double PolarRad;
    __declspec(property(get=GetEccentricityStr,put=PutEccentricityStr))
    BSTR EccentricityStr;
    __declspec(property(get=GetEccentricityVal,put=PutEccentricityVal))
    double EccentricityVal;
    __declspec(property(get=GetFlatteningStr,put=PutFlatteningStr))
    BSTR FlatteningStr;
    __declspec(property(get=GetFlatteningVal,put=PutFlatteningVal))
    double FlatteningVal;
    __declspec(property(get=GetFlatteningInverseStr,put=PutFlatteningInverseStr))
    BSTR FlatteningInverseStr;
    __declspec(property(get=GetFlatteningInverseVal,put=PutFlatteningInverseVal))
    double FlatteningInverseVal;
    __declspec(property(get=GetGeodeticDatumStrings))
    struct GeodeticDatumStrings * GeodeticDatumStrings;
    __declspec(property(get=GetEllipsoidStrings))
    struct EllipsoidStrings * EllipsoidStrings;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    BSTR GetGeodeticDatumStr ( );
    void PutGeodeticDatumStr (
        BSTR _arg1 );
    enum CSGeodeticDatumConstants GetGeodeticDatumVal ( );
    void PutGeodeticDatumVal (
        enum CSGeodeticDatumConstants _arg1 );
    BSTR GetEllipsoidStr ( );
    void PutEllipsoidStr (
        BSTR _arg1 );
    enum CSEllipsoidConstants GetEllipsoidVal ( );
    void PutEllipsoidVal (
        enum CSEllipsoidConstants _arg1 );
    BSTR GetEquatorialRadStr ( );
    void PutEquatorialRadStr (
        BSTR _arg1 );
    double GetEquatorialRad ( );
    void PutEquatorialRad (
        double _arg1 );
    BSTR GetPolarRadStr ( );
    void PutPolarRadStr (
        BSTR _arg1 );
    double GetPolarRad ( );
    void PutPolarRad (
        double _arg1 );
    BSTR GetEccentricityStr ( );
    void PutEccentricityStr (
        BSTR _arg1 );
    double GetEccentricityVal ( );
    void PutEccentricityVal (
        double _arg1 );
    BSTR GetFlatteningStr ( );
    void PutFlatteningStr (
        BSTR _arg1 );
    double GetFlatteningVal ( );
    void PutFlatteningVal (
        double _arg1 );
    BSTR GetFlatteningInverseStr ( );
    void PutFlatteningInverseStr (
        BSTR _arg1 );
    double GetFlatteningInverseVal ( );
    void PutFlatteningInverseVal (
        double _arg1 );
    struct GeodeticDatumStrings * GetGeodeticDatumStrings ( );
    struct EllipsoidStrings * GetEllipsoidStrings ( );
};

struct __declspec(uuid("ff65cae0-4e8a-11ce-9cb5-08003601c1af"))
IGMUnitFormatSpec : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetProjUnit,put=PutProjUnit))
    BSTR ProjUnit;
    __declspec(property(get=GetGeogUnit,put=PutGeogUnit))
    BSTR GeogUnit;
    __declspec(property(get=GetGeocUnit,put=PutGeocUnit))
    BSTR GeocUnit;
    __declspec(property(get=GetPaperUnit,put=PutPaperUnit))
    BSTR PaperUnit;
    __declspec(property(get=GetHeightUnit,put=PutHeightUnit))
    BSTR HeightUnit;
    __declspec(property(get=GetPaperHeightUnit,put=PutPaperHeightUnit))
    BSTR PaperHeightUnit;
    __declspec(property(get=GetZHeightUnit,put=PutZHeightUnit))
    BSTR ZHeightUnit;
    __declspec(property(get=GetDistUnit,put=PutDistUnit))
    BSTR DistUnit;
    __declspec(property(get=GetPaperDistUnit,put=PutPaperDistUnit))
    BSTR PaperDistUnit;
    __declspec(property(get=GetAngUnit,put=PutAngUnit))
    BSTR AngUnit;
    __declspec(property(get=GetAzimuthUnit,put=PutAzimuthUnit))
    BSTR AzimuthUnit;
    __declspec(property(get=GetAreaUnit,put=PutAreaUnit))
    BSTR AreaUnit;
    __declspec(property(get=GetPaperAreaUnit,put=PutPaperAreaUnit))
    BSTR PaperAreaUnit;
    __declspec(property(get=GetVolumeUnit,put=PutVolumeUnit))
    BSTR VolumeUnit;
    __declspec(property(get=GetTimeUnit,put=PutTimeUnit))
    BSTR TimeUnit;
    __declspec(property(get=GetProjPrec,put=PutProjPrec))
    long ProjPrec;
    __declspec(property(get=GetGeogPrec,put=PutGeogPrec))
    long GeogPrec;
    __declspec(property(get=GetGeocPrec,put=PutGeocPrec))
    long GeocPrec;
    __declspec(property(get=GetPaperPrec,put=PutPaperPrec))
    long PaperPrec;
    __declspec(property(get=GetHeightPrec,put=PutHeightPrec))
    long HeightPrec;
    __declspec(property(get=GetPaperHeightPrec,put=PutPaperHeightPrec))
    long PaperHeightPrec;
    __declspec(property(get=GetZHeightPrec,put=PutZHeightPrec))
    long ZHeightPrec;
    __declspec(property(get=GetDistPrec,put=PutDistPrec))
    long DistPrec;
    __declspec(property(get=GetPaperDistPrec,put=PutPaperDistPrec))
    long PaperDistPrec;
    __declspec(property(get=GetAngPrec,put=PutAngPrec))
    long AngPrec;
    __declspec(property(get=GetAzimuthPrec,put=PutAzimuthPrec))
    long AzimuthPrec;
    __declspec(property(get=GetAreaPrec,put=PutAreaPrec))
    long AreaPrec;
    __declspec(property(get=GetPaperAreaPrec,put=PutPaperAreaPrec))
    long PaperAreaPrec;
    __declspec(property(get=GetVolumePrec,put=PutVolumePrec))
    long VolumePrec;
    __declspec(property(get=GetTimePrec,put=PutTimePrec))
    long TimePrec;
    __declspec(property(get=GetGeogCoordOrd,put=PutGeogCoordOrd))
    enum CSGeographicOrderConstants GeogCoordOrd;
    __declspec(property(get=GetGeogHemiOpt,put=PutGeogHemiOpt))
    enum CSGeographicHemisphereOptionConstants GeogHemiOpt;
    __declspec(property(get=GetLonNormOpt,put=PutLonNormOpt))
    enum CSLongitudeNormalizationConstants LonNormOpt;
    __declspec(property(get=GetProjQuadrantOpt,put=PutProjQuadrantOpt))
    enum CSProjectionQuadrantConstants ProjQuadrantOpt;
    __declspec(property(get=GetHeightDisplayOpt,put=PutHeightDisplayOpt))
    enum CSHeightDisplayConstants HeightDisplayOpt;
    __declspec(property(get=GetHeightDirectionOpt,put=PutHeightDirectionOpt))
    enum CSHeightDirectionConstants HeightDirectionOpt;
    __declspec(property(get=GetMinusSuppresLonOpt,put=PutMinusSuppresLonOpt))
    enum CSNegativeSuppressionLongitudeConstants MinusSuppresLonOpt;
    __declspec(property(get=GetMinusSuppresHeightOpt,put=PutMinusSuppresHeightOpt))
    enum CSNegativeSuppressionHeightConstants MinusSuppresHeightOpt;
    __declspec(property(get=GetAzimuthStart,put=PutAzimuthStart))
    enum CSAzimuthStartConstants AzimuthStart;
    __declspec(property(get=GetAzimuthDirection,put=PutAzimuthDirection))
    enum CSAzimuthDirectionConstants AzimuthDirection;
    __declspec(property(get=GetBearingUnit,put=PutBearingUnit))
    BSTR BearingUnit;
    __declspec(property(get=GetBearingPrec,put=PutBearingPrec))
    long BearingPrec;

    //
    // Wrapper methods for error-handling
    //

    void PutProjUnit (
        BSTR ProjUnit );
    BSTR GetProjUnit ( );
    void PutGeogUnit (
        BSTR GeogUnit );
    BSTR GetGeogUnit ( );
    void PutGeocUnit (
        BSTR GeocUnit );
    BSTR GetGeocUnit ( );
    void PutPaperUnit (
        BSTR PaperUnit );
    BSTR GetPaperUnit ( );
    void PutHeightUnit (
        BSTR HeightUnit );
    BSTR GetHeightUnit ( );
    void PutPaperHeightUnit (
        BSTR PaperHeightUnit );
    BSTR GetPaperHeightUnit ( );
    void PutZHeightUnit (
        BSTR ZHeightUnit );
    BSTR GetZHeightUnit ( );
    void PutDistUnit (
        BSTR DistUnit );
    BSTR GetDistUnit ( );
    void PutPaperDistUnit (
        BSTR PaperDistUnit );
    BSTR GetPaperDistUnit ( );
    void PutAngUnit (
        BSTR AngUnit );
    BSTR GetAngUnit ( );
    void PutAzimuthUnit (
        BSTR AzimuthUnit );
    BSTR GetAzimuthUnit ( );
    void PutAreaUnit (
        BSTR AreaUnit );
    BSTR GetAreaUnit ( );
    void PutPaperAreaUnit (
        BSTR PaperAreaUnit );
    BSTR GetPaperAreaUnit ( );
    void PutVolumeUnit (
        BSTR VolumeUnit );
    BSTR GetVolumeUnit ( );
    void PutTimeUnit (
        BSTR TimeUnit );
    BSTR GetTimeUnit ( );
    void PutProjPrec (
        long ProjPrec );
    long GetProjPrec ( );
    void PutGeogPrec (
        long GeogPrec );
    long GetGeogPrec ( );
    void PutGeocPrec (
        long GeocPrec );
    long GetGeocPrec ( );
    void PutPaperPrec (
        long PaperPrec );
    long GetPaperPrec ( );
    void PutHeightPrec (
        long HeightPrec );
    long GetHeightPrec ( );
    void PutPaperHeightPrec (
        long PaperHeightPrec );
    long GetPaperHeightPrec ( );
    void PutZHeightPrec (
        long ZHeightPrec );
    long GetZHeightPrec ( );
    void PutDistPrec (
        long DistPrec );
    long GetDistPrec ( );
    void PutPaperDistPrec (
        long PaperDistPrec );
    long GetPaperDistPrec ( );
    void PutAngPrec (
        long AngPrec );
    long GetAngPrec ( );
    void PutAzimuthPrec (
        long AzimuthPrec );
    long GetAzimuthPrec ( );
    void PutAreaPrec (
        long AreaPrec );
    long GetAreaPrec ( );
    void PutPaperAreaPrec (
        long PaperAreaPrec );
    long GetPaperAreaPrec ( );
    void PutVolumePrec (
        long VolumePrec );
    long GetVolumePrec ( );
    void PutTimePrec (
        long TimePrec );
    long GetTimePrec ( );
    void PutGeogCoordOrd (
        enum CSGeographicOrderConstants GeogCoordOrd );
    enum CSGeographicOrderConstants GetGeogCoordOrd ( );
    void PutGeogHemiOpt (
        enum CSGeographicHemisphereOptionConstants GeogHemiOpt );
    enum CSGeographicHemisphereOptionConstants GetGeogHemiOpt ( );
    void PutLonNormOpt (
        enum CSLongitudeNormalizationConstants LonNormOpt );
    enum CSLongitudeNormalizationConstants GetLonNormOpt ( );
    void PutProjQuadrantOpt (
        enum CSProjectionQuadrantConstants ProjQuadrantOpt );
    enum CSProjectionQuadrantConstants GetProjQuadrantOpt ( );
    void PutHeightDisplayOpt (
        enum CSHeightDisplayConstants HeightDisplayOpt );
    enum CSHeightDisplayConstants GetHeightDisplayOpt ( );
    void PutHeightDirectionOpt (
        enum CSHeightDirectionConstants HeightDirectionOpt );
    enum CSHeightDirectionConstants GetHeightDirectionOpt ( );
    void PutMinusSuppresLonOpt (
        enum CSNegativeSuppressionLongitudeConstants MinusSuppresLonOpt );
    enum CSNegativeSuppressionLongitudeConstants GetMinusSuppresLonOpt ( );
    void PutMinusSuppresHeightOpt (
        enum CSNegativeSuppressionHeightConstants MinusSuppresHeightOpt );
    enum CSNegativeSuppressionHeightConstants GetMinusSuppresHeightOpt ( );
    HRESULT ParseValueString (
        enum CSValueStringConstants ValueStringType,
        BSTR ValueString,
        double * Value );
    HRESULT ParsePointString (
        enum CSPointStringConstants PointStringType,
        BSTR PointString,
        double * X,
        double * Y,
        double * Z );
    HRESULT FormatValueString (
        enum CSValueStringConstants ValueStringType,
        double Value,
        BSTR * ValueString );
    HRESULT FormatPointString (
        enum CSPointStringConstants PointStringType,
        double X,
        double Y,
        double Z,
        BSTR * PointString );
    HRESULT GetPointDescription (
        enum CSPointStringConstants PointStringType,
        enum CSDescriptionConstants DescriptionType,
        BSTR * DescriptionString );
    void PutAzimuthStart (
        enum CSAzimuthStartConstants AzimuthStart );
    enum CSAzimuthStartConstants GetAzimuthStart ( );
    void PutAzimuthDirection (
        enum CSAzimuthDirectionConstants AzimuthDirection );
    enum CSAzimuthDirectionConstants GetAzimuthDirection ( );
    void PutBearingUnit (
        BSTR BearingUnit );
    BSTR GetBearingUnit ( );
    void PutBearingPrec (
        long BearingPrec );
    long GetBearingPrec ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_ProjUnit (
        BSTR ProjUnit ) = 0;
    virtual HRESULT __stdcall get_ProjUnit (
        BSTR * ProjUnit ) = 0;
    virtual HRESULT __stdcall put_GeogUnit (
        BSTR GeogUnit ) = 0;
    virtual HRESULT __stdcall get_GeogUnit (
        BSTR * GeogUnit ) = 0;
    virtual HRESULT __stdcall put_GeocUnit (
        BSTR GeocUnit ) = 0;
    virtual HRESULT __stdcall get_GeocUnit (
        BSTR * GeocUnit ) = 0;
    virtual HRESULT __stdcall put_PaperUnit (
        BSTR PaperUnit ) = 0;
    virtual HRESULT __stdcall get_PaperUnit (
        BSTR * PaperUnit ) = 0;
    virtual HRESULT __stdcall put_HeightUnit (
        BSTR HeightUnit ) = 0;
    virtual HRESULT __stdcall get_HeightUnit (
        BSTR * HeightUnit ) = 0;
    virtual HRESULT __stdcall put_PaperHeightUnit (
        BSTR PaperHeightUnit ) = 0;
    virtual HRESULT __stdcall get_PaperHeightUnit (
        BSTR * PaperHeightUnit ) = 0;
    virtual HRESULT __stdcall put_ZHeightUnit (
        BSTR ZHeightUnit ) = 0;
    virtual HRESULT __stdcall get_ZHeightUnit (
        BSTR * ZHeightUnit ) = 0;
    virtual HRESULT __stdcall put_DistUnit (
        BSTR DistUnit ) = 0;
    virtual HRESULT __stdcall get_DistUnit (
        BSTR * DistUnit ) = 0;
    virtual HRESULT __stdcall put_PaperDistUnit (
        BSTR PaperDistUnit ) = 0;
    virtual HRESULT __stdcall get_PaperDistUnit (
        BSTR * PaperDistUnit ) = 0;
    virtual HRESULT __stdcall put_AngUnit (
        BSTR AngUnit ) = 0;
    virtual HRESULT __stdcall get_AngUnit (
        BSTR * AngUnit ) = 0;
    virtual HRESULT __stdcall put_AzimuthUnit (
        BSTR AzimuthUnit ) = 0;
    virtual HRESULT __stdcall get_AzimuthUnit (
        BSTR * AzimuthUnit ) = 0;
    virtual HRESULT __stdcall put_AreaUnit (
        BSTR AreaUnit ) = 0;
    virtual HRESULT __stdcall get_AreaUnit (
        BSTR * AreaUnit ) = 0;
    virtual HRESULT __stdcall put_PaperAreaUnit (
        BSTR PaperAreaUnit ) = 0;
    virtual HRESULT __stdcall get_PaperAreaUnit (
        BSTR * PaperAreaUnit ) = 0;
    virtual HRESULT __stdcall put_VolumeUnit (
        BSTR VolumeUnit ) = 0;
    virtual HRESULT __stdcall get_VolumeUnit (
        BSTR * VolumeUnit ) = 0;
    virtual HRESULT __stdcall put_TimeUnit (
        BSTR TimeUnit ) = 0;
    virtual HRESULT __stdcall get_TimeUnit (
        BSTR * TimeUnit ) = 0;
    virtual HRESULT __stdcall put_ProjPrec (
        long ProjPrec ) = 0;
    virtual HRESULT __stdcall get_ProjPrec (
        long * ProjPrec ) = 0;
    virtual HRESULT __stdcall put_GeogPrec (
        long GeogPrec ) = 0;
    virtual HRESULT __stdcall get_GeogPrec (
        long * GeogPrec ) = 0;
    virtual HRESULT __stdcall put_GeocPrec (
        long GeocPrec ) = 0;
    virtual HRESULT __stdcall get_GeocPrec (
        long * GeocPrec ) = 0;
    virtual HRESULT __stdcall put_PaperPrec (
        long PaperPrec ) = 0;
    virtual HRESULT __stdcall get_PaperPrec (
        long * PaperPrec ) = 0;
    virtual HRESULT __stdcall put_HeightPrec (
        long HeightPrec ) = 0;
    virtual HRESULT __stdcall get_HeightPrec (
        long * HeightPrec ) = 0;
    virtual HRESULT __stdcall put_PaperHeightPrec (
        long PaperHeightPrec ) = 0;
    virtual HRESULT __stdcall get_PaperHeightPrec (
        long * PaperHeightPrec ) = 0;
    virtual HRESULT __stdcall put_ZHeightPrec (
        long ZHeightPrec ) = 0;
    virtual HRESULT __stdcall get_ZHeightPrec (
        long * ZHeightPrec ) = 0;
    virtual HRESULT __stdcall put_DistPrec (
        long DistPrec ) = 0;
    virtual HRESULT __stdcall get_DistPrec (
        long * DistPrec ) = 0;
    virtual HRESULT __stdcall put_PaperDistPrec (
        long PaperDistPrec ) = 0;
    virtual HRESULT __stdcall get_PaperDistPrec (
        long * PaperDistPrec ) = 0;
    virtual HRESULT __stdcall put_AngPrec (
        long AngPrec ) = 0;
    virtual HRESULT __stdcall get_AngPrec (
        long * AngPrec ) = 0;
    virtual HRESULT __stdcall put_AzimuthPrec (
        long AzimuthPrec ) = 0;
    virtual HRESULT __stdcall get_AzimuthPrec (
        long * AzimuthPrec ) = 0;
    virtual HRESULT __stdcall put_AreaPrec (
        long AreaPrec ) = 0;
    virtual HRESULT __stdcall get_AreaPrec (
        long * AreaPrec ) = 0;
    virtual HRESULT __stdcall put_PaperAreaPrec (
        long PaperAreaPrec ) = 0;
    virtual HRESULT __stdcall get_PaperAreaPrec (
        long * PaperAreaPrec ) = 0;
    virtual HRESULT __stdcall put_VolumePrec (
        long VolumePrec ) = 0;
    virtual HRESULT __stdcall get_VolumePrec (
        long * VolumePrec ) = 0;
    virtual HRESULT __stdcall put_TimePrec (
        long TimePrec ) = 0;
    virtual HRESULT __stdcall get_TimePrec (
        long * TimePrec ) = 0;
    virtual HRESULT __stdcall put_GeogCoordOrd (
        enum CSGeographicOrderConstants GeogCoordOrd ) = 0;
    virtual HRESULT __stdcall get_GeogCoordOrd (
        enum CSGeographicOrderConstants * GeogCoordOrd ) = 0;
    virtual HRESULT __stdcall put_GeogHemiOpt (
        enum CSGeographicHemisphereOptionConstants GeogHemiOpt ) = 0;
    virtual HRESULT __stdcall get_GeogHemiOpt (
        enum CSGeographicHemisphereOptionConstants * GeogHemiOpt ) = 0;
    virtual HRESULT __stdcall put_LonNormOpt (
        enum CSLongitudeNormalizationConstants LonNormOpt ) = 0;
    virtual HRESULT __stdcall get_LonNormOpt (
        enum CSLongitudeNormalizationConstants * LonNormOpt ) = 0;
    virtual HRESULT __stdcall put_ProjQuadrantOpt (
        enum CSProjectionQuadrantConstants ProjQuadrantOpt ) = 0;
    virtual HRESULT __stdcall get_ProjQuadrantOpt (
        enum CSProjectionQuadrantConstants * ProjQuadrantOpt ) = 0;
    virtual HRESULT __stdcall put_HeightDisplayOpt (
        enum CSHeightDisplayConstants HeightDisplayOpt ) = 0;
    virtual HRESULT __stdcall get_HeightDisplayOpt (
        enum CSHeightDisplayConstants * HeightDisplayOpt ) = 0;
    virtual HRESULT __stdcall put_HeightDirectionOpt (
        enum CSHeightDirectionConstants HeightDirectionOpt ) = 0;
    virtual HRESULT __stdcall get_HeightDirectionOpt (
        enum CSHeightDirectionConstants * HeightDirectionOpt ) = 0;
    virtual HRESULT __stdcall put_MinusSuppresLonOpt (
        enum CSNegativeSuppressionLongitudeConstants MinusSuppresLonOpt ) = 0;
    virtual HRESULT __stdcall get_MinusSuppresLonOpt (
        enum CSNegativeSuppressionLongitudeConstants * MinusSuppresLonOpt ) = 0;
    virtual HRESULT __stdcall put_MinusSuppresHeightOpt (
        enum CSNegativeSuppressionHeightConstants MinusSuppresHeightOpt ) = 0;
    virtual HRESULT __stdcall get_MinusSuppresHeightOpt (
        enum CSNegativeSuppressionHeightConstants * MinusSuppresHeightOpt ) = 0;
    virtual HRESULT __stdcall raw_ParseValueString (
        enum CSValueStringConstants ValueStringType,
        BSTR ValueString,
        double * Value ) = 0;
    virtual HRESULT __stdcall raw_ParsePointString (
        enum CSPointStringConstants PointStringType,
        BSTR PointString,
        double * X,
        double * Y,
        double * Z ) = 0;
    virtual HRESULT __stdcall raw_FormatValueString (
        enum CSValueStringConstants ValueStringType,
        double Value,
        BSTR * ValueString ) = 0;
    virtual HRESULT __stdcall raw_FormatPointString (
        enum CSPointStringConstants PointStringType,
        double X,
        double Y,
        double Z,
        BSTR * PointString ) = 0;
    virtual HRESULT __stdcall raw_GetPointDescription (
        enum CSPointStringConstants PointStringType,
        enum CSDescriptionConstants DescriptionType,
        BSTR * DescriptionString ) = 0;
    virtual HRESULT __stdcall put_AzimuthStart (
        enum CSAzimuthStartConstants AzimuthStart ) = 0;
    virtual HRESULT __stdcall get_AzimuthStart (
        enum CSAzimuthStartConstants * AzimuthStart ) = 0;
    virtual HRESULT __stdcall put_AzimuthDirection (
        enum CSAzimuthDirectionConstants AzimuthDirection ) = 0;
    virtual HRESULT __stdcall get_AzimuthDirection (
        enum CSAzimuthDirectionConstants * AzimuthDirection ) = 0;
    virtual HRESULT __stdcall put_BearingUnit (
        BSTR BearingUnit ) = 0;
    virtual HRESULT __stdcall get_BearingUnit (
        BSTR * BearingUnit ) = 0;
    virtual HRESULT __stdcall put_BearingPrec (
        long BearingPrec ) = 0;
    virtual HRESULT __stdcall get_BearingPrec (
        long * BearingPrec ) = 0;
};

enum CSGeographicOrderConstants
{
    csgoLongitudeLatitude = 0,
    csgoLatitudeLongitude = 1
};

enum CSGeographicHemisphereOptionConstants
{
    csghoPositiveEastNorth = 0,
    csghoPositiveWestSouth = 1,
    csghoPositiveEastSouth = 2,
    csghoPositiveWestNorth = 3,
    csghoPrefixHemisphereDesignator = 4,
    csghoAppendHemisphereDesignator = 5
};

enum CSLongitudeNormalizationConstants
{
    cslnZeroTo360LeftInclude = 0,
    cslnZeroTo360BothInclude = 1,
    cslnMinus180ToPlus180LeftInclude = 2,
    cslnMinus180ToPlus180BothInclude = 3,
    cslnMinus360To0RightInclude = 4,
    cslnMinus360To0BothInclude = 5,
    cslnNoLongitudeNormalization = 6
};

enum CSProjectionQuadrantConstants
{
    cspqXYPositiveEastNorth = 0,
    cspqXYPositiveEastSouth = 1,
    cspqXYPositiveSouthWest = 2,
    cspqXYPositiveSouthEast = 3,
    cspqXYPositiveWestNorth = 4,
    cspqXYPositiveWestSouth = 5,
    cspqXYPositiveNorthEast = 6,
    cspqXYPositiveNorthWest = 7
};

enum CSHeightDisplayConstants
{
    cshDisplayHeightsYes = 0,
    cshDisplayHeightsNo = 1
};

enum CSHeightDirectionConstants
{
    cshDirectionPositiveUp = 0,
    cshDirectionPositiveDown = 1
};

enum CSNegativeSuppressionLongitudeConstants
{
    csnsPreserveLongitudeMinus = 0,
    csnsDropLongitudeMinus = 1
};

enum CSNegativeSuppressionHeightConstants
{
    csnsPreserveHeightMinus = 0,
    csnsDropHeightMinus = 1
};

enum CSValueStringConstants
{
    csvsProjectionXCoordinate = 0,
    csvsProjectionYCoordinate = 1,
    csvsLongitude = 2,
    csvsLatitude = 3,
    csvsGeocentricXCoordinate = 4,
    csvsGeocentricYCoordinate = 5,
    csvsGeocentricZCoordinate = 6,
    csvsPaperXCoordinate = 7,
    csvsPaperYCoordinate = 8,
    csvsHeight = 9,
    csvsPaperHeight = 10,
    csvsZHeight = 11,
    csvsDistance = 12,
    csvsPaperDistance = 13,
    csvsAngle = 14,
    csvsAzimuth = 15,
    csvsArea = 16,
    csvsPaperArea = 17,
    csvsVolume = 18,
    csvsPaperVolume = 19,
    csvsTime = 20,
    csvsBearing = 21
};

enum CSPointStringConstants
{
    cspsGeographic = 0,
    cspsProjectionPoint = 1,
    cspsGeocentric = 2,
    cspsPaper = 3,
    cspsLocalSpaceRectangular = 4
};

enum CSDescriptionConstants
{
    csdOnInput = 0,
    csdOnOutput = 1
};

enum CSAzimuthStartConstants
{
    csasNorth = 0,
    csasSouth = 1,
    csasEast = 2,
    csasWest = 3
};

enum CSAzimuthDirectionConstants
{
    csadClockwise = 0,
    csadCounterClockwise = 1
};

struct __declspec(uuid("2457b700-4e96-11ce-9cb5-08003601c1af"))
UnitFormatSpec : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetProjUnit,put=PutProjUnit))
    BSTR ProjUnit;
    __declspec(property(get=GetGeogUnit,put=PutGeogUnit))
    BSTR GeogUnit;
    __declspec(property(get=GetGeocUnit,put=PutGeocUnit))
    BSTR GeocUnit;
    __declspec(property(get=GetPaperUnit,put=PutPaperUnit))
    BSTR PaperUnit;
    __declspec(property(get=GetHeightUnit,put=PutHeightUnit))
    BSTR HeightUnit;
    __declspec(property(get=GetPaperHeightUnit,put=PutPaperHeightUnit))
    BSTR PaperHeightUnit;
    __declspec(property(get=GetZHeightUnit,put=PutZHeightUnit))
    BSTR ZHeightUnit;
    __declspec(property(get=GetDistUnit,put=PutDistUnit))
    BSTR DistUnit;
    __declspec(property(get=GetPaperDistUnit,put=PutPaperDistUnit))
    BSTR PaperDistUnit;
    __declspec(property(get=GetAngUnit,put=PutAngUnit))
    BSTR AngUnit;
    __declspec(property(get=GetAzimuthUnit,put=PutAzimuthUnit))
    BSTR AzimuthUnit;
    __declspec(property(get=GetAreaUnit,put=PutAreaUnit))
    BSTR AreaUnit;
    __declspec(property(get=GetPaperAreaUnit,put=PutPaperAreaUnit))
    BSTR PaperAreaUnit;
    __declspec(property(get=GetVolumeUnit,put=PutVolumeUnit))
    BSTR VolumeUnit;
    __declspec(property(get=GetTimeUnit,put=PutTimeUnit))
    BSTR TimeUnit;
    __declspec(property(get=GetProjPrec,put=PutProjPrec))
    long ProjPrec;
    __declspec(property(get=GetGeogPrec,put=PutGeogPrec))
    long GeogPrec;
    __declspec(property(get=GetGeocPrec,put=PutGeocPrec))
    long GeocPrec;
    __declspec(property(get=GetPaperPrec,put=PutPaperPrec))
    long PaperPrec;
    __declspec(property(get=GetHeightPrec,put=PutHeightPrec))
    long HeightPrec;
    __declspec(property(get=GetPaperHeightPrec,put=PutPaperHeightPrec))
    long PaperHeightPrec;
    __declspec(property(get=GetZHeightPrec,put=PutZHeightPrec))
    long ZHeightPrec;
    __declspec(property(get=GetDistPrec,put=PutDistPrec))
    long DistPrec;
    __declspec(property(get=GetPaperDistPrec,put=PutPaperDistPrec))
    long PaperDistPrec;
    __declspec(property(get=GetAngPrec,put=PutAngPrec))
    long AngPrec;
    __declspec(property(get=GetAzimuthPrec,put=PutAzimuthPrec))
    long AzimuthPrec;
    __declspec(property(get=GetAreaPrec,put=PutAreaPrec))
    long AreaPrec;
    __declspec(property(get=GetPaperAreaPrec,put=PutPaperAreaPrec))
    long PaperAreaPrec;
    __declspec(property(get=GetVolumePrec,put=PutVolumePrec))
    long VolumePrec;
    __declspec(property(get=GetTimePrec,put=PutTimePrec))
    long TimePrec;
    __declspec(property(get=GetGeogCoordOrd,put=PutGeogCoordOrd))
    enum CSGeographicOrderConstants GeogCoordOrd;
    __declspec(property(get=GetGeogHemiOpt,put=PutGeogHemiOpt))
    enum CSGeographicHemisphereOptionConstants GeogHemiOpt;
    __declspec(property(get=GetLonNormOpt,put=PutLonNormOpt))
    enum CSLongitudeNormalizationConstants LonNormOpt;
    __declspec(property(get=GetProjQuadrantOpt,put=PutProjQuadrantOpt))
    enum CSProjectionQuadrantConstants ProjQuadrantOpt;
    __declspec(property(get=GetHeightDisplayOpt,put=PutHeightDisplayOpt))
    enum CSHeightDisplayConstants HeightDisplayOpt;
    __declspec(property(get=GetHeightDirectionOpt,put=PutHeightDirectionOpt))
    enum CSHeightDirectionConstants HeightDirectionOpt;
    __declspec(property(get=GetMinusSuppresLonOpt,put=PutMinusSuppresLonOpt))
    enum CSNegativeSuppressionLongitudeConstants MinusSuppresLonOpt;
    __declspec(property(get=GetMinusSuppresHeightOpt,put=PutMinusSuppresHeightOpt))
    enum CSNegativeSuppressionHeightConstants MinusSuppresHeightOpt;
    __declspec(property(get=GetAzimuthStart,put=PutAzimuthStart))
    enum CSAzimuthStartConstants AzimuthStart;
    __declspec(property(get=GetAzimuthDirection,put=PutAzimuthDirection))
    enum CSAzimuthDirectionConstants AzimuthDirection;
    __declspec(property(get=GetBearingUnit,put=PutBearingUnit))
    BSTR BearingUnit;
    __declspec(property(get=GetBearingPrec,put=PutBearingPrec))
    long BearingPrec;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutProjUnit (
        BSTR _arg1 );
    BSTR GetProjUnit ( );
    void PutGeogUnit (
        BSTR _arg1 );
    BSTR GetGeogUnit ( );
    void PutGeocUnit (
        BSTR _arg1 );
    BSTR GetGeocUnit ( );
    void PutPaperUnit (
        BSTR _arg1 );
    BSTR GetPaperUnit ( );
    void PutHeightUnit (
        BSTR _arg1 );
    BSTR GetHeightUnit ( );
    void PutPaperHeightUnit (
        BSTR _arg1 );
    BSTR GetPaperHeightUnit ( );
    void PutZHeightUnit (
        BSTR _arg1 );
    BSTR GetZHeightUnit ( );
    void PutDistUnit (
        BSTR _arg1 );
    BSTR GetDistUnit ( );
    void PutPaperDistUnit (
        BSTR _arg1 );
    BSTR GetPaperDistUnit ( );
    void PutAngUnit (
        BSTR _arg1 );
    BSTR GetAngUnit ( );
    void PutAzimuthUnit (
        BSTR _arg1 );
    BSTR GetAzimuthUnit ( );
    void PutAreaUnit (
        BSTR _arg1 );
    BSTR GetAreaUnit ( );
    void PutPaperAreaUnit (
        BSTR _arg1 );
    BSTR GetPaperAreaUnit ( );
    void PutVolumeUnit (
        BSTR _arg1 );
    BSTR GetVolumeUnit ( );
    void PutTimeUnit (
        BSTR _arg1 );
    BSTR GetTimeUnit ( );
    void PutProjPrec (
        long _arg1 );
    long GetProjPrec ( );
    void PutGeogPrec (
        long _arg1 );
    long GetGeogPrec ( );
    void PutGeocPrec (
        long _arg1 );
    long GetGeocPrec ( );
    void PutPaperPrec (
        long _arg1 );
    long GetPaperPrec ( );
    void PutHeightPrec (
        long _arg1 );
    long GetHeightPrec ( );
    void PutPaperHeightPrec (
        long _arg1 );
    long GetPaperHeightPrec ( );
    void PutZHeightPrec (
        long _arg1 );
    long GetZHeightPrec ( );
    void PutDistPrec (
        long _arg1 );
    long GetDistPrec ( );
    void PutPaperDistPrec (
        long _arg1 );
    long GetPaperDistPrec ( );
    void PutAngPrec (
        long _arg1 );
    long GetAngPrec ( );
    void PutAzimuthPrec (
        long _arg1 );
    long GetAzimuthPrec ( );
    void PutAreaPrec (
        long _arg1 );
    long GetAreaPrec ( );
    void PutPaperAreaPrec (
        long _arg1 );
    long GetPaperAreaPrec ( );
    void PutVolumePrec (
        long _arg1 );
    long GetVolumePrec ( );
    void PutTimePrec (
        long _arg1 );
    long GetTimePrec ( );
    void PutGeogCoordOrd (
        enum CSGeographicOrderConstants _arg1 );
    enum CSGeographicOrderConstants GetGeogCoordOrd ( );
    void PutGeogHemiOpt (
        enum CSGeographicHemisphereOptionConstants _arg1 );
    enum CSGeographicHemisphereOptionConstants GetGeogHemiOpt ( );
    void PutLonNormOpt (
        enum CSLongitudeNormalizationConstants _arg1 );
    enum CSLongitudeNormalizationConstants GetLonNormOpt ( );
    void PutProjQuadrantOpt (
        enum CSProjectionQuadrantConstants _arg1 );
    enum CSProjectionQuadrantConstants GetProjQuadrantOpt ( );
    void PutHeightDisplayOpt (
        enum CSHeightDisplayConstants _arg1 );
    enum CSHeightDisplayConstants GetHeightDisplayOpt ( );
    void PutHeightDirectionOpt (
        enum CSHeightDirectionConstants _arg1 );
    enum CSHeightDirectionConstants GetHeightDirectionOpt ( );
    void PutMinusSuppresLonOpt (
        enum CSNegativeSuppressionLongitudeConstants _arg1 );
    enum CSNegativeSuppressionLongitudeConstants GetMinusSuppresLonOpt ( );
    void PutMinusSuppresHeightOpt (
        enum CSNegativeSuppressionHeightConstants _arg1 );
    enum CSNegativeSuppressionHeightConstants GetMinusSuppresHeightOpt ( );
    HRESULT ParseValueString (
        enum CSValueStringConstants ValueStringType,
        BSTR ValueString,
        double * Value );
    HRESULT ParsePointString (
        enum CSPointStringConstants PointStringType,
        BSTR PointString,
        double * X,
        double * Y,
        double * Z );
    HRESULT FormatValueString (
        enum CSValueStringConstants ValueStringType,
        double Value,
        BSTR * ValueString );
    HRESULT FormatPointString (
        enum CSPointStringConstants PointStringType,
        double X,
        double Y,
        double Z,
        BSTR * PointString );
    HRESULT GetPointDescription (
        enum CSPointStringConstants PointStringType,
        enum CSDescriptionConstants DescriptionType,
        BSTR * DescriptionString );
    void PutAzimuthStart (
        enum CSAzimuthStartConstants _arg1 );
    enum CSAzimuthStartConstants GetAzimuthStart ( );
    void PutAzimuthDirection (
        enum CSAzimuthDirectionConstants _arg1 );
    enum CSAzimuthDirectionConstants GetAzimuthDirection ( );
    void PutBearingUnit (
        BSTR _arg1 );
    BSTR GetBearingUnit ( );
    void PutBearingPrec (
        long _arg1 );
    long GetBearingPrec ( );
};

struct __declspec(uuid("d74800a0-3762-11d0-af9c-08003601e529"))
IGMPaperSpace : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetNominalMapScaleDenominator,put=PutNominalMapScaleDenominator))
    double NominalMapScaleDenominator;
    __declspec(property(get=GetProjectionToPaperMatrix,put=PutProjectionToPaperMatrix))
    SAFEARRAY * ProjectionToPaperMatrix;

    //
    // Wrapper methods for error-handling
    //

    void PutNominalMapScaleDenominator (
        double NominalMapScaleDenominator );
    double GetNominalMapScaleDenominator ( );
    void PutProjectionToPaperMatrix (
        SAFEARRAY * ProjectionToPaperMatrix );
    SAFEARRAY * GetProjectionToPaperMatrix ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall put_NominalMapScaleDenominator (
        double NominalMapScaleDenominator ) = 0;
    virtual HRESULT __stdcall get_NominalMapScaleDenominator (
        double * NominalMapScaleDenominator ) = 0;
    virtual HRESULT __stdcall put_ProjectionToPaperMatrix (
        SAFEARRAY * ProjectionToPaperMatrix ) = 0;
    virtual HRESULT __stdcall get_ProjectionToPaperMatrix (
        SAFEARRAY * * ProjectionToPaperMatrix ) = 0;
};

struct __declspec(uuid("d74800a1-3762-11d0-af9c-08003601e529"))
PaperSpace : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetNominalMapScaleDenominator,put=PutNominalMapScaleDenominator))
    double NominalMapScaleDenominator;
    __declspec(property(get=GetProjectionToPaperMatrix,put=PutProjectionToPaperMatrix))
    SAFEARRAY * ProjectionToPaperMatrix;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    void PutNominalMapScaleDenominator (
        double _arg1 );
    double GetNominalMapScaleDenominator ( );
    void PutProjectionToPaperMatrix (
        SAFEARRAY * _arg1 );
    SAFEARRAY * GetProjectionToPaperMatrix ( );
};

struct __declspec(uuid("c85d2720-49a1-11ce-9cb5-08003601c1af"))
IGMRefSpaceMgr : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitFormatSpec))
    struct UnitFormatSpec * UnitFormatSpec;
    __declspec(property(get=GetProjSpace))
    struct ProjSpace * ProjSpace;
    __declspec(property(get=GetGeogSpace))
    struct GeogSpace * GeogSpace;
    __declspec(property(get=GetPaperSpace))
    struct PaperSpace * PaperSpace;

    //
    // Wrapper methods for error-handling
    //

    struct UnitFormatSpec * GetUnitFormatSpec ( );
    struct ProjSpace * GetProjSpace ( );
    struct GeogSpace * GetGeogSpace ( );
    struct PaperSpace * GetPaperSpace ( );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );
    HRESULT LoadUsingPrimaryFromMGEfile (
        BSTR MGEfileName );
    HRESULT GetMeridianConvergence (
        double Longitude,
        double Latitude,
        double Height,
        double * MeridianConvergence );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_UnitFormatSpec (
        struct UnitFormatSpec * * UnitFormatSpec ) = 0;
    virtual HRESULT __stdcall get_ProjSpace (
        struct ProjSpace * * ProjSpace ) = 0;
    virtual HRESULT __stdcall get_GeogSpace (
        struct GeogSpace * * GeogSpace ) = 0;
    virtual HRESULT __stdcall get_PaperSpace (
        struct PaperSpace * * PaperSpace ) = 0;
    virtual HRESULT __stdcall raw_TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points ) = 0;
    virtual HRESULT __stdcall raw_TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z ) = 0;
    virtual HRESULT __stdcall raw_LoadUsingPrimaryFromMGEfile (
        BSTR MGEfileName ) = 0;
    virtual HRESULT __stdcall raw_GetMeridianConvergence (
        double Longitude,
        double Latitude,
        double Height,
        double * MeridianConvergence ) = 0;
    virtual HRESULT __stdcall raw_IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid ) = 0;
};

enum CSPointConstants
{
    cspENU = 0,
    cspENO = 1,
    cspENG = 2,
    cspLLU = 3,
    cspLLO = 4,
    cspLLG = 5,
    cspPAPU = 6,
    cspPAPO = 7,
    cspPAPG = 8,
    cspXYZU = 9,
    cspXYZO = 10,
    cspXYZG = 11,
    cspUOR = 12
};

struct __declspec(uuid("06e855c0-49a2-11ce-9cb5-08003601c1af"))
RefSpaceMgr : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetUnitFormatSpec))
    struct UnitFormatSpec * UnitFormatSpec;
    __declspec(property(get=GetProjSpace))
    struct ProjSpace * ProjSpace;
    __declspec(property(get=GetGeogSpace))
    struct GeogSpace * GeogSpace;
    __declspec(property(get=GetPaperSpace))
    struct PaperSpace * PaperSpace;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    struct UnitFormatSpec * GetUnitFormatSpec ( );
    struct ProjSpace * GetProjSpace ( );
    struct GeogSpace * GetGeogSpace ( );
    struct PaperSpace * GetPaperSpace ( );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );
    HRESULT LoadUsingPrimaryFromMGEfile (
        BSTR MGEfileName );
    HRESULT GetMeridianConvergence (
        double Longitude,
        double Latitude,
        double Height,
        double * MeridianConvergence );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );
};

struct __declspec(uuid("a94cd060-33df-11ce-9cb5-08003601c1af"))
IGMCoordSystem : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetRefSpaceMgr))
    struct RefSpaceMgr * RefSpaceMgr;
    __declspec(property(get=GetBaseStorageType,put=PutBaseStorageType))
    enum CSBaseStorageConstants BaseStorageType;
    __declspec(property(get=GetHeightStorageType,put=PutHeightStorageType))
    enum CSHeightStorageConstants HeightStorageType;
    __declspec(property(get=GetLonNormStorageOpt,put=PutLonNormStorageOpt))
    enum CSLongitudeNormalizationConstants LonNormStorageOpt;
    __declspec(property(get=GetApproxVertDataCenterAsHeightVal,put=PutApproxVertDataCenterAsHeightVal))
    double ApproxVertDataCenterAsHeightVal;
    __declspec(property(get=GetStorageToProjectionScale))
    double StorageToProjectionScale;
    __declspec(property(get=GetStorageToPaperScale))
    double StorageToPaperScale;
    __declspec(property(get=GetStorageToCompMatrix,put=PutStorageToCompMatrix))
    SAFEARRAY * StorageToCompMatrix;
    __declspec(property(get=GetGUID,put=PutGUID))
    VARIANT GUID;
    __declspec(property(get=GetGUIDType,put=PutGUIDType))
    long GUIDType;

    //
    // Wrapper methods for error-handling
    //

    struct RefSpaceMgr * GetRefSpaceMgr ( );
    void PutBaseStorageType (
        enum CSBaseStorageConstants BaseStorageType );
    enum CSBaseStorageConstants GetBaseStorageType ( );
    void PutHeightStorageType (
        enum CSHeightStorageConstants HeightStorageType );
    enum CSHeightStorageConstants GetHeightStorageType ( );
    void PutLonNormStorageOpt (
        enum CSLongitudeNormalizationConstants LonNormStorageOpt );
    enum CSLongitudeNormalizationConstants GetLonNormStorageOpt ( );
    void PutApproxVertDataCenterAsHeightVal (
        double ApproxVertDataCenterAsHeightVal );
    double GetApproxVertDataCenterAsHeightVal ( );
    double GetStorageToProjectionScale ( );
    double GetStorageToPaperScale ( );
    void PutStorageToCompMatrix (
        SAFEARRAY * StorageToCompMatrix );
    SAFEARRAY * GetStorageToCompMatrix ( );
    void PutGUID (
        const VARIANT & GUID );
    VARIANT GetGUID ( );
    void PutGUIDType (
        long GUIDType );
    long GetGUIDType ( );
    HRESULT SetHorizResByGroundDistVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetHorizResByGroundDistVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetHorizResByAngAlongGroundVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetHorizResByAngAlongGroundVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetHorizResByPaperDistVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetHorizResByPaperDistVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetVertResByHeightVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetVertResByHeightVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetVertResByPaperHeightVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetVertResByPaperHeightVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetApproxHorizDataCenterAsGeogPntVal (
        double Longitude,
        double Latitude );
    HRESULT GetApproxHorizDataCenterAsGeogPntVal (
        double * Longitude,
        double * Latitude );
    HRESULT SetApproxHorizDataCenterAsProjPntVal (
        double ProjectionX,
        double ProjectionY );
    HRESULT GetApproxHorizDataCenterAsProjPntVal (
        double * ProjectionX,
        double * ProjectionY );
    HRESULT SetApproxHorizDataCenterAsGeocPntVal (
        double GeocentricX,
        double GeocentricY,
        double GeocentricZ );
    HRESULT GetApproxHorizDataCenterAsGeocPntVal (
        double * GeocentricX,
        double * GeocentricY,
        double * GeocentricZ );
    HRESULT SetApproxHorizDataCenterAsPaperPntVal (
        double PaperX,
        double PaperY );
    HRESULT GetApproxHorizDataCenterAsPaperPntVal (
        double * PaperX,
        double * PaperY );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );
    HRESULT LoadUsingPrimaryFromMGEfile (
        BSTR MGEfileName );
    HRESULT LoadFromGCoordSystemTableRowFormat (
        SAFEARRAY * RowFormat );
    HRESULT FormatGCoordSystemTableRow (
        SAFEARRAY * RowFormat );
    HRESULT IsEssentiallyIdentical (
        IDispatch * CoordSystem,
        VARIANT_BOOL * IsEssentiallyIdentical );
    HRESULT Clone (
        IDispatch * * CoordSystemClone );
    HRESULT CopyTo (
        IDispatch * CoordSystemDest );
    HRESULT GetStorageMeridianConvergence (
        double Longitude,
        double Latitude,
        double Height,
        double * StorageMeridianConvergence );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );
    HRESULT ChangeGUID ( );
    HRESULT SaveToFile (
        BSTR FileName );
    HRESULT LoadFromFile (
        BSTR FileName );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_RefSpaceMgr (
        struct RefSpaceMgr * * RefSpaceMgr ) = 0;
    virtual HRESULT __stdcall put_BaseStorageType (
        enum CSBaseStorageConstants BaseStorageType ) = 0;
    virtual HRESULT __stdcall get_BaseStorageType (
        enum CSBaseStorageConstants * BaseStorageType ) = 0;
    virtual HRESULT __stdcall put_HeightStorageType (
        enum CSHeightStorageConstants HeightStorageType ) = 0;
    virtual HRESULT __stdcall get_HeightStorageType (
        enum CSHeightStorageConstants * HeightStorageType ) = 0;
    virtual HRESULT __stdcall put_LonNormStorageOpt (
        enum CSLongitudeNormalizationConstants LonNormStorageOpt ) = 0;
    virtual HRESULT __stdcall get_LonNormStorageOpt (
        enum CSLongitudeNormalizationConstants * LonNormStorageOpt ) = 0;
    virtual HRESULT __stdcall put_ApproxVertDataCenterAsHeightVal (
        double ApproxVertDataCenterAsHeightVal ) = 0;
    virtual HRESULT __stdcall get_ApproxVertDataCenterAsHeightVal (
        double * ApproxVertDataCenterAsHeightVal ) = 0;
    virtual HRESULT __stdcall get_StorageToProjectionScale (
        double * StorageToProjectionScale ) = 0;
    virtual HRESULT __stdcall get_StorageToPaperScale (
        double * StorageToPaperScale ) = 0;
    virtual HRESULT __stdcall put_StorageToCompMatrix (
        SAFEARRAY * StorageToCompMatrix ) = 0;
    virtual HRESULT __stdcall get_StorageToCompMatrix (
        SAFEARRAY * * StorageToCompMatrix ) = 0;
    virtual HRESULT __stdcall put_GUID (
        VARIANT GUID ) = 0;
    virtual HRESULT __stdcall get_GUID (
        VARIANT * GUID ) = 0;
    virtual HRESULT __stdcall put_GUIDType (
        long GUIDType ) = 0;
    virtual HRESULT __stdcall get_GUIDType (
        long * GUIDType ) = 0;
    virtual HRESULT __stdcall raw_SetHorizResByGroundDistVal (
        double MagnitudeVal,
        BSTR UnitStr ) = 0;
    virtual HRESULT __stdcall raw_GetHorizResByGroundDistVal (
        double * MagnitudeVal,
        BSTR * UnitStr ) = 0;
    virtual HRESULT __stdcall raw_SetHorizResByAngAlongGroundVal (
        double MagnitudeVal,
        BSTR UnitStr ) = 0;
    virtual HRESULT __stdcall raw_GetHorizResByAngAlongGroundVal (
        double * MagnitudeVal,
        BSTR * UnitStr ) = 0;
    virtual HRESULT __stdcall raw_SetHorizResByPaperDistVal (
        double MagnitudeVal,
        BSTR UnitStr ) = 0;
    virtual HRESULT __stdcall raw_GetHorizResByPaperDistVal (
        double * MagnitudeVal,
        BSTR * UnitStr ) = 0;
    virtual HRESULT __stdcall raw_SetVertResByHeightVal (
        double MagnitudeVal,
        BSTR UnitStr ) = 0;
    virtual HRESULT __stdcall raw_GetVertResByHeightVal (
        double * MagnitudeVal,
        BSTR * UnitStr ) = 0;
    virtual HRESULT __stdcall raw_SetVertResByPaperHeightVal (
        double MagnitudeVal,
        BSTR UnitStr ) = 0;
    virtual HRESULT __stdcall raw_GetVertResByPaperHeightVal (
        double * MagnitudeVal,
        BSTR * UnitStr ) = 0;
    virtual HRESULT __stdcall raw_SetApproxHorizDataCenterAsGeogPntVal (
        double Longitude,
        double Latitude ) = 0;
    virtual HRESULT __stdcall raw_GetApproxHorizDataCenterAsGeogPntVal (
        double * Longitude,
        double * Latitude ) = 0;
    virtual HRESULT __stdcall raw_SetApproxHorizDataCenterAsProjPntVal (
        double ProjectionX,
        double ProjectionY ) = 0;
    virtual HRESULT __stdcall raw_GetApproxHorizDataCenterAsProjPntVal (
        double * ProjectionX,
        double * ProjectionY ) = 0;
    virtual HRESULT __stdcall raw_SetApproxHorizDataCenterAsGeocPntVal (
        double GeocentricX,
        double GeocentricY,
        double GeocentricZ ) = 0;
    virtual HRESULT __stdcall raw_GetApproxHorizDataCenterAsGeocPntVal (
        double * GeocentricX,
        double * GeocentricY,
        double * GeocentricZ ) = 0;
    virtual HRESULT __stdcall raw_SetApproxHorizDataCenterAsPaperPntVal (
        double PaperX,
        double PaperY ) = 0;
    virtual HRESULT __stdcall raw_GetApproxHorizDataCenterAsPaperPntVal (
        double * PaperX,
        double * PaperY ) = 0;
    virtual HRESULT __stdcall raw_TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points ) = 0;
    virtual HRESULT __stdcall raw_TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z ) = 0;
    virtual HRESULT __stdcall raw_LoadUsingPrimaryFromMGEfile (
        BSTR MGEfileName ) = 0;
    virtual HRESULT __stdcall raw_LoadFromGCoordSystemTableRowFormat (
        SAFEARRAY * RowFormat ) = 0;
    virtual HRESULT __stdcall raw_FormatGCoordSystemTableRow (
        SAFEARRAY * RowFormat ) = 0;
    virtual HRESULT __stdcall raw_IsEssentiallyIdentical (
        IDispatch * CoordSystem,
        VARIANT_BOOL * IsEssentiallyIdentical ) = 0;
    virtual HRESULT __stdcall raw_Clone (
        IDispatch * * CoordSystemClone ) = 0;
    virtual HRESULT __stdcall raw_CopyTo (
        IDispatch * CoordSystemDest ) = 0;
    virtual HRESULT __stdcall raw_GetStorageMeridianConvergence (
        double Longitude,
        double Latitude,
        double Height,
        double * StorageMeridianConvergence ) = 0;
    virtual HRESULT __stdcall raw_IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid ) = 0;
    virtual HRESULT __stdcall raw_ChangeGUID ( ) = 0;
    virtual HRESULT __stdcall raw_SaveToFile (
        BSTR FileName ) = 0;
    virtual HRESULT __stdcall raw_LoadFromFile (
        BSTR FileName ) = 0;
};

enum CSBaseStorageConstants
{
    csbsProjected = 0,
    csbsGeographic = 1,
    csbsGeocentric = 2
};

enum CSHeightStorageConstants
{
    cshStorageOrthometric = 0,
    cshStorageGeometric = 1,
    cshStorageUnspecified = 2
};

struct __declspec(uuid("15626fd0-33e0-11ce-9cb5-08003601c1af"))
DGMCoordSystem : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetRefSpaceMgr))
    struct RefSpaceMgr * RefSpaceMgr;
    __declspec(property(get=GetBaseStorageType,put=PutBaseStorageType))
    enum CSBaseStorageConstants BaseStorageType;
    __declspec(property(get=GetHeightStorageType,put=PutHeightStorageType))
    enum CSHeightStorageConstants HeightStorageType;
    __declspec(property(get=GetLonNormStorageOpt,put=PutLonNormStorageOpt))
    enum CSLongitudeNormalizationConstants LonNormStorageOpt;
    __declspec(property(get=GetApproxVertDataCenterAsHeightVal,put=PutApproxVertDataCenterAsHeightVal))
    double ApproxVertDataCenterAsHeightVal;
    __declspec(property(get=GetStorageToProjectionScale))
    double StorageToProjectionScale;
    __declspec(property(get=GetStorageToPaperScale))
    double StorageToPaperScale;
    __declspec(property(get=GetStorageToCompMatrix,put=PutStorageToCompMatrix))
    SAFEARRAY * StorageToCompMatrix;
    __declspec(property(get=GetGUID,put=PutGUID))
    VARIANT GUID;
    __declspec(property(get=GetGUIDType,put=PutGUIDType))
    long GUIDType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    struct RefSpaceMgr * GetRefSpaceMgr ( );
    void PutBaseStorageType (
        enum CSBaseStorageConstants _arg1 );
    enum CSBaseStorageConstants GetBaseStorageType ( );
    void PutHeightStorageType (
        enum CSHeightStorageConstants _arg1 );
    enum CSHeightStorageConstants GetHeightStorageType ( );
    void PutLonNormStorageOpt (
        enum CSLongitudeNormalizationConstants _arg1 );
    enum CSLongitudeNormalizationConstants GetLonNormStorageOpt ( );
    void PutApproxVertDataCenterAsHeightVal (
        double _arg1 );
    double GetApproxVertDataCenterAsHeightVal ( );
    double GetStorageToProjectionScale ( );
    double GetStorageToPaperScale ( );
    void PutStorageToCompMatrix (
        SAFEARRAY * _arg1 );
    SAFEARRAY * GetStorageToCompMatrix ( );
    void PutGUID (
        const VARIANT & _arg1 );
    VARIANT GetGUID ( );
    void PutGUIDType (
        long _arg1 );
    long GetGUIDType ( );
    HRESULT SetHorizResByGroundDistVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetHorizResByGroundDistVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetHorizResByAngAlongGroundVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetHorizResByAngAlongGroundVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetHorizResByPaperDistVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetHorizResByPaperDistVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetVertResByHeightVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetVertResByHeightVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetVertResByPaperHeightVal (
        double MagnitudeVal,
        BSTR UnitStr );
    HRESULT GetVertResByPaperHeightVal (
        double * MagnitudeVal,
        BSTR * UnitStr );
    HRESULT SetApproxHorizDataCenterAsGeogPntVal (
        double Longitude,
        double Latitude );
    HRESULT GetApproxHorizDataCenterAsGeogPntVal (
        double * Longitude,
        double * Latitude );
    HRESULT SetApproxHorizDataCenterAsProjPntVal (
        double ProjectionX,
        double ProjectionY );
    HRESULT GetApproxHorizDataCenterAsProjPntVal (
        double * ProjectionX,
        double * ProjectionY );
    HRESULT SetApproxHorizDataCenterAsGeocPntVal (
        double GeocentricX,
        double GeocentricY,
        double GeocentricZ );
    HRESULT GetApproxHorizDataCenterAsGeocPntVal (
        double * GeocentricX,
        double * GeocentricY,
        double * GeocentricZ );
    HRESULT SetApproxHorizDataCenterAsPaperPntVal (
        double PaperX,
        double PaperY );
    HRESULT GetApproxHorizDataCenterAsPaperPntVal (
        double * PaperX,
        double * PaperY );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );
    HRESULT LoadUsingPrimaryFromMGEfile (
        BSTR MGEfileName );
    HRESULT LoadFromGCoordSystemTableRowFormat (
        SAFEARRAY * RowFormat );
    HRESULT FormatGCoordSystemTableRow (
        SAFEARRAY * RowFormat );
    HRESULT IsEssentiallyIdentical (
        IDispatch * CoordSystem,
        VARIANT_BOOL * IsEssentiallyIdentical );
    HRESULT Clone (
        IDispatch * * CoordSystemClone );
    HRESULT CopyTo (
        IDispatch * CoordSystemDest );
    HRESULT GetStorageMeridianConvergence (
        double Longitude,
        double Latitude,
        double Height,
        double * StorageMeridianConvergence );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );
    HRESULT ChangeGUID ( );
    HRESULT SaveToFile (
        BSTR FileName );
    HRESULT LoadFromFile (
        BSTR FileName );
};

struct __declspec(uuid("e3e00be0-cb04-11d0-afc5-08003601e529"))
DGMDatumTransformation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelTypeVal,put=PutModelTypeVal))
    enum CSDatumTransformationModelConstants ModelTypeVal;
    __declspec(property(get=GetModelTypeStr,put=PutModelTypeStr))
    BSTR ModelTypeStr;
    __declspec(property(get=GetForwardInputSpaceGeodeticDatumVal,put=PutForwardInputSpaceGeodeticDatumVal))
    enum CSGeodeticDatumConstants ForwardInputSpaceGeodeticDatumVal;
    __declspec(property(get=GetForwardInputSpaceGeodeticDatumStr,put=PutForwardInputSpaceGeodeticDatumStr))
    BSTR ForwardInputSpaceGeodeticDatumStr;
    __declspec(property(get=GetForwardOutputSpaceGeodeticDatumVal,put=PutForwardOutputSpaceGeodeticDatumVal))
    enum CSGeodeticDatumConstants ForwardOutputSpaceGeodeticDatumVal;
    __declspec(property(get=GetForwardOutputSpaceGeodeticDatumStr,put=PutForwardOutputSpaceGeodeticDatumStr))
    BSTR ForwardOutputSpaceGeodeticDatumStr;
    __declspec(property(get=GetDirection,put=PutDirection))
    enum CSDatumTransformationDirectionConstants Direction;
    __declspec(property(get=GetName,put=PutName))
    BSTR Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    BSTR Description;
    __declspec(property(get=GetBursaWolf))
    struct DGMBursaWolf * BursaWolf;
    __declspec(property(get=GetComplexPolynomial))
    struct DGMComplexPolynomial * ComplexPolynomial;
    __declspec(property(get=GetMultipleRegression))
    struct DGMMultipleRegression * MultipleRegression;
    __declspec(property(get=GetSecondDegreePolynomial))
    struct DGMSecondDegreePolynomial * SecondDegreePolynomial;
    __declspec(property(get=GetStandardMolodensky))
    struct DGMStandardMolodensky * StandardMolodensky;
    __declspec(property(get=GetDatumTransModelTypeStrings))
    struct DGMStringCollection * DatumTransModelTypeStrings;
    __declspec(property(get=GetGeodeticDatumStrings))
    struct DGMStringCollection * GeodeticDatumStrings;

    //
    // Wrapper methods for error-handling
    //

    enum CSDatumTransformationModelConstants GetModelTypeVal ( );
    void PutModelTypeVal (
        enum CSDatumTransformationModelConstants ModelTypeVal );
    BSTR GetModelTypeStr ( );
    void PutModelTypeStr (
        BSTR ModelTypeStr );
    enum CSGeodeticDatumConstants GetForwardInputSpaceGeodeticDatumVal ( );
    void PutForwardInputSpaceGeodeticDatumVal (
        enum CSGeodeticDatumConstants ForwardInputSpaceGeodeticDatumVal );
    BSTR GetForwardInputSpaceGeodeticDatumStr ( );
    void PutForwardInputSpaceGeodeticDatumStr (
        BSTR ForwardInputSpaceGeodeticDatumStr );
    enum CSGeodeticDatumConstants GetForwardOutputSpaceGeodeticDatumVal ( );
    void PutForwardOutputSpaceGeodeticDatumVal (
        enum CSGeodeticDatumConstants ForwardOutputSpaceGeodeticDatumVal );
    BSTR GetForwardOutputSpaceGeodeticDatumStr ( );
    void PutForwardOutputSpaceGeodeticDatumStr (
        BSTR ForwardOutputSpaceGeodeticDatumStr );
    enum CSDatumTransformationDirectionConstants GetDirection ( );
    void PutDirection (
        enum CSDatumTransformationDirectionConstants Direction );
    BSTR GetName ( );
    void PutName (
        BSTR Name );
    BSTR GetDescription ( );
    void PutDescription (
        BSTR Description );
    struct DGMBursaWolf * GetBursaWolf ( );
    struct DGMComplexPolynomial * GetComplexPolynomial ( );
    struct DGMMultipleRegression * GetMultipleRegression ( );
    struct DGMSecondDegreePolynomial * GetSecondDegreePolynomial ( );
    struct DGMStandardMolodensky * GetStandardMolodensky ( );
    struct DGMStringCollection * GetDatumTransModelTypeStrings ( );
    struct DGMStringCollection * GetGeodeticDatumStrings ( );
    HRESULT CopyTo (
        struct DGMDatumTransformation * DatumTransformationDest );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ModelTypeVal (
        enum CSDatumTransformationModelConstants * ModelTypeVal ) = 0;
    virtual HRESULT __stdcall put_ModelTypeVal (
        enum CSDatumTransformationModelConstants ModelTypeVal ) = 0;
    virtual HRESULT __stdcall get_ModelTypeStr (
        BSTR * ModelTypeStr ) = 0;
    virtual HRESULT __stdcall put_ModelTypeStr (
        BSTR ModelTypeStr ) = 0;
    virtual HRESULT __stdcall get_ForwardInputSpaceGeodeticDatumVal (
        enum CSGeodeticDatumConstants * ForwardInputSpaceGeodeticDatumVal ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceGeodeticDatumVal (
        enum CSGeodeticDatumConstants ForwardInputSpaceGeodeticDatumVal ) = 0;
    virtual HRESULT __stdcall get_ForwardInputSpaceGeodeticDatumStr (
        BSTR * ForwardInputSpaceGeodeticDatumStr ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceGeodeticDatumStr (
        BSTR ForwardInputSpaceGeodeticDatumStr ) = 0;
    virtual HRESULT __stdcall get_ForwardOutputSpaceGeodeticDatumVal (
        enum CSGeodeticDatumConstants * ForwardOutputSpaceGeodeticDatumVal ) = 0;
    virtual HRESULT __stdcall put_ForwardOutputSpaceGeodeticDatumVal (
        enum CSGeodeticDatumConstants ForwardOutputSpaceGeodeticDatumVal ) = 0;
    virtual HRESULT __stdcall get_ForwardOutputSpaceGeodeticDatumStr (
        BSTR * ForwardOutputSpaceGeodeticDatumStr ) = 0;
    virtual HRESULT __stdcall put_ForwardOutputSpaceGeodeticDatumStr (
        BSTR ForwardOutputSpaceGeodeticDatumStr ) = 0;
    virtual HRESULT __stdcall get_Direction (
        enum CSDatumTransformationDirectionConstants * Direction ) = 0;
    virtual HRESULT __stdcall put_Direction (
        enum CSDatumTransformationDirectionConstants Direction ) = 0;
    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Description (
        BSTR * Description ) = 0;
    virtual HRESULT __stdcall put_Description (
        BSTR Description ) = 0;
    virtual HRESULT __stdcall get_BursaWolf (
        struct DGMBursaWolf * * BursaWolf ) = 0;
    virtual HRESULT __stdcall get_ComplexPolynomial (
        struct DGMComplexPolynomial * * ComplexPolynomial ) = 0;
    virtual HRESULT __stdcall get_MultipleRegression (
        struct DGMMultipleRegression * * MultipleRegression ) = 0;
    virtual HRESULT __stdcall get_SecondDegreePolynomial (
        struct DGMSecondDegreePolynomial * * SecondDegreePolynomial ) = 0;
    virtual HRESULT __stdcall get_StandardMolodensky (
        struct DGMStandardMolodensky * * StandardMolodensky ) = 0;
    virtual HRESULT __stdcall get_DatumTransModelTypeStrings (
        struct DGMStringCollection * * DatumTransModelTypeStrings ) = 0;
    virtual HRESULT __stdcall get_GeodeticDatumStrings (
        struct DGMStringCollection * * GeodeticDatumStrings ) = 0;
    virtual HRESULT __stdcall raw_CopyTo (
        struct DGMDatumTransformation * DatumTransformationDest ) = 0;
    virtual HRESULT __stdcall raw_IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid ) = 0;
    virtual HRESULT __stdcall raw_TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points ) = 0;
    virtual HRESULT __stdcall raw_TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z ) = 0;
};

enum CSDatumTransformationModelConstants
{
    csdtUndefined = 0,
    csdtMultipleRegression = 2,
    csdtNADCONforNAD27toNAD83 = 3,
    csdtNADCONforNAD83toHARN = 9,
    csdtCanadianNational = 8,
    csdtComplexPolynomial = 5,
    csdtBursaWolf = 1,
    csdtStandardMolodensky = 4,
    csdt2ndDegConformalPolynomial = 6,
    csdt2ndDegGeneralPolynomial = 7
};

enum CSDatumTransformationDirectionConstants
{
    csdtdDatum1toDatum2 = 0,
    csdtdDatum2toDatum1 = 1
};

struct __declspec(uuid("75184600-f3c4-11d0-a26d-08003601d502"))
DGMBursaWolf : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetDeltaX,put=PutDeltaX))
    double DeltaX;
    __declspec(property(get=GetDeltaY,put=PutDeltaY))
    double DeltaY;
    __declspec(property(get=GetDeltaZ,put=PutDeltaZ))
    double DeltaZ;
    __declspec(property(get=GetOmegaX,put=PutOmegaX))
    double OmegaX;
    __declspec(property(get=GetOmegaY,put=PutOmegaY))
    double OmegaY;
    __declspec(property(get=GetOmegaZ,put=PutOmegaZ))
    double OmegaZ;
    __declspec(property(get=GetDeltaScale,put=PutDeltaScale))
    double DeltaScale;

    //
    // Wrapper methods for error-handling
    //

    double GetDeltaX ( );
    void PutDeltaX (
        double DeltaX );
    double GetDeltaY ( );
    void PutDeltaY (
        double DeltaY );
    double GetDeltaZ ( );
    void PutDeltaZ (
        double DeltaZ );
    double GetOmegaX ( );
    void PutOmegaX (
        double OmegaX );
    double GetOmegaY ( );
    void PutOmegaY (
        double OmegaY );
    double GetOmegaZ ( );
    void PutOmegaZ (
        double OmegaZ );
    double GetDeltaScale ( );
    void PutDeltaScale (
        double DeltaScale );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_DeltaX (
        double * DeltaX ) = 0;
    virtual HRESULT __stdcall put_DeltaX (
        double DeltaX ) = 0;
    virtual HRESULT __stdcall get_DeltaY (
        double * DeltaY ) = 0;
    virtual HRESULT __stdcall put_DeltaY (
        double DeltaY ) = 0;
    virtual HRESULT __stdcall get_DeltaZ (
        double * DeltaZ ) = 0;
    virtual HRESULT __stdcall put_DeltaZ (
        double DeltaZ ) = 0;
    virtual HRESULT __stdcall get_OmegaX (
        double * OmegaX ) = 0;
    virtual HRESULT __stdcall put_OmegaX (
        double OmegaX ) = 0;
    virtual HRESULT __stdcall get_OmegaY (
        double * OmegaY ) = 0;
    virtual HRESULT __stdcall put_OmegaY (
        double OmegaY ) = 0;
    virtual HRESULT __stdcall get_OmegaZ (
        double * OmegaZ ) = 0;
    virtual HRESULT __stdcall put_OmegaZ (
        double OmegaZ ) = 0;
    virtual HRESULT __stdcall get_DeltaScale (
        double * DeltaScale ) = 0;
    virtual HRESULT __stdcall put_DeltaScale (
        double DeltaScale ) = 0;
};

struct __declspec(uuid("bd405000-f3c9-11d0-a26d-08003601d502"))
DGMComplexPolynomial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelTypeVal,put=PutModelTypeVal))
    enum CSComplexPolynomialModelConstants ModelTypeVal;
    __declspec(property(get=GetModelTypeStr,put=PutModelTypeStr))
    BSTR ModelTypeStr;
    __declspec(property(get=GetComplexPolyModelTypeStrings))
    struct DGMStringCollection * ComplexPolyModelTypeStrings;

    //
    // Wrapper methods for error-handling
    //

    enum CSComplexPolynomialModelConstants GetModelTypeVal ( );
    void PutModelTypeVal (
        enum CSComplexPolynomialModelConstants ModelTypeVal );
    BSTR GetModelTypeStr ( );
    void PutModelTypeStr (
        BSTR ModelTypeStr );
    struct DGMStringCollection * GetComplexPolyModelTypeStrings ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ModelTypeVal (
        enum CSComplexPolynomialModelConstants * ModelTypeVal ) = 0;
    virtual HRESULT __stdcall put_ModelTypeVal (
        enum CSComplexPolynomialModelConstants ModelTypeVal ) = 0;
    virtual HRESULT __stdcall get_ModelTypeStr (
        BSTR * ModelTypeStr ) = 0;
    virtual HRESULT __stdcall put_ModelTypeStr (
        BSTR ModelTypeStr ) = 0;
    virtual HRESULT __stdcall get_ComplexPolyModelTypeStrings (
        struct DGMStringCollection * * ComplexPolyModelTypeStrings ) = 0;
};

enum CSComplexPolynomialModelConstants
{
    cscpmDenmarkJyllandToUTMzone32 = 4,
    cscpmDenmarkSjaellandToUTMzone32 = 5,
    cscpmDenmarkBornholmToUTMzone33 = 6,
    cscpmNZealandAmuriCircToNZMG = 7,
    cscpmNZealandBayOfPlentyCircToNZMG = 8,
    cscpmNZealandBluffCircToNZMG = 9,
    cscpmNZealandBullerCircToNZMG = 10,
    cscpmNZealandCollingwoodCircToNZMG = 11,
    cscpmNZealandGawlerCircToNZMG = 12,
    cscpmNZealandGreyCircToNZMG = 13,
    cscpmNZealandHawkesBayCircToNZMG = 14,
    cscpmNZealandHokitikaCircToNZMG = 15,
    cscpmNZealandJacksonsBayCircToNZMG = 16,
    cscpmNZealandKarameaCircToNZMG = 17,
    cscpmNZealandLindisPeakCircToNZMG = 18,
    cscpmNZealandMarlboroughCircToNZMG = 19,
    cscpmNZealandMtEdenCircToNZMG = 20,
    cscpmNZealandMtNicholasCircToNZMG = 21,
    cscpmNZealandMtPleasantCircToNZMG = 22,
    cscpmNZealandMtYorkCircToNZMG = 23,
    cscpmNZealandNelsonCircToNZMG = 24,
    cscpmNZealandNorthIslandToNZMG = 25,
    cscpmNZealandNorthTaieriCircToNZMG = 26,
    cscpmNZealandObservationPtCircToNZMG = 27,
    cscpmNZealandOkaritoCircToNZMG = 28,
    cscpmNZealandPovertyBayCircToNZMG = 29,
    cscpmNZealandSouthIslandToNZMG = 30,
    cscpmNZealandTaranakiCircToNZMG = 31,
    cscpmNZealandTimaruCircToNZMG = 32,
    cscpmNZealandTuhirangiCircToNZMG = 33,
    cscpmNZealandWairarapaCircToNZMG = 34,
    cscpmNZealandWanganuiCircToNZMG = 35,
    cscpmNZealandWellingtonCircToNZMG = 36,
    cscpmSwedenRT38ToUTMzone32 = 1,
    cscpmSwedenRT38ToUTMzone33 = 2,
    cscpmSwedenRT38ToUTMzone34 = 3,
    cscpmUndefined = 0
};

struct __declspec(uuid("6d3d6f80-f7b9-11d0-a26d-08003601d502"))
DGMStringCollection : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    BSTR Item (
        long index );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long index,
        BSTR * Item ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * Enum ) = 0;
};

struct __declspec(uuid("c60b4cb0-f3ca-11d0-a26d-08003601d502"))
DGMMultipleRegression : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelTypeVal,put=PutModelTypeVal))
    enum CSMultipleRegressionModelConstants ModelTypeVal;
    __declspec(property(get=GetModelTypeStr,put=PutModelTypeStr))
    BSTR ModelTypeStr;
    __declspec(property(get=GetMultRegressionModelTypeStrings))
    struct DGMStringCollection * MultRegressionModelTypeStrings;

    //
    // Wrapper methods for error-handling
    //

    enum CSMultipleRegressionModelConstants GetModelTypeVal ( );
    void PutModelTypeVal (
        enum CSMultipleRegressionModelConstants ModelTypeVal );
    BSTR GetModelTypeStr ( );
    void PutModelTypeStr (
        BSTR ModelTypeStr );
    struct DGMStringCollection * GetMultRegressionModelTypeStrings ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ModelTypeVal (
        enum CSMultipleRegressionModelConstants * ModelTypeVal ) = 0;
    virtual HRESULT __stdcall put_ModelTypeVal (
        enum CSMultipleRegressionModelConstants ModelTypeVal ) = 0;
    virtual HRESULT __stdcall get_ModelTypeStr (
        BSTR * ModelTypeStr ) = 0;
    virtual HRESULT __stdcall put_ModelTypeStr (
        BSTR ModelTypeStr ) = 0;
    virtual HRESULT __stdcall get_MultRegressionModelTypeStrings (
        struct DGMStringCollection * * MultRegressionModelTypeStrings ) = 0;
};

enum CSMultipleRegressionModelConstants
{
    csmrmAdindanDatumEthiopiaSudan = 9,
    csmrmAdindanDatumMali = 54,
    csmrmAdindanDatumSenegal = 55,
    csmrmAfgooyeDatumSomalia = 56,
    csmrmAinElAbd1970Bahrain = 57,
    csmrmAnna1Astro1965CocosIslands = 58,
    csmrmArcDatum1950SouthCentralAfrica = 10,
    csmrmArcDatum1960KenyaTanzania = 11,
    csmrmAscensionIsland1958 = 59,
    csmrmAstroB4SorolAtollTernIsland = 61,
    csmrmAstroBeaconEIwoJimaIsland = 60,
    csmrmAstroDos71_4StHelenaIsland = 62,
    csmrmAstronomicStation1952MarcusIsland = 63,
    csmrmAustralianGeodeticDatum1966 = 6,
    csmrmAustralianGeodeticDatum1984 = 7,
    csmrmBellevueDatumEfateErromangaIs = 12,
    csmrmBermudaDatum1957 = 13,
    csmrmBogotaObservatoryDatumColombia = 14,
    csmrmCampoInchauspeDatumArgentina = 15,
    csmrmCantonAstroDatum1966PhoenixIs = 16,
    csmrmCapeCanaveralDatumFloridaBahamas = 18,
    csmrmCapeDatumSouthAfrica = 17,
    csmrmCarthageDatumTunisia = 19,
    csmrmChathamDatum1971ChathamIs = 20,
    csmrmChuaAstroDatumParaguay = 21,
    csmrmCorregoAlegreDatumBrazil = 22,
    csmrmDjakartaDatumSumatra = 23,
    csmrmDOS1968GizoIsland = 64,
    csmrmEasterIsland1967 = 65,
    csmrmEuropean1950Cyprus = 24,
    csmrmEuropean1950Egypt = 25,
    csmrmEuropean1950Iran = 26,
    csmrmEuropean1950UKIreland = 39,
    csmrmEuropean1950UnitedKingdomOnly = 40,
    csmrmEuropeanDatum1950Sardinia = 66,
    csmrmEuropeanDatum1950Sicily = 67,
    csmrmEuropeanDatum1950Western = 8,
    csmrmGUX1AstroGuadalcanal = 69,
    csmrmGandajikaBaseRepublicOfMaldives = 68,
    csmrmGeodeticDatum1949NewZealand = 27,
    csmrmGuamDatum1963 = 28,
    csmrmHjorseyDatum1955Iceland = 29,
    csmrmHongKong1963 = 70,
    csmrmISTS073Astro1969DiegoGarcia = 72,
    csmrmIndianDatumBangladeshIndiaNepal = 71,
    csmrmIndianDatumThailandVietnam = 30,
    csmrmIrelandDatum1965 = 31,
    csmrmJohnstonIsland1961 = 73,
    csmrmKandawalaDatumSriLanka = 32,
    csmrmKerguelenIsland = 74,
    csmrmKertauDatum1948WestMalaysiaSing = 33,
    csmrmLC5AstroCaymanBrac = 75,
    csmrmLiberiaDatum1964 = 34,
    csmrmLuzonMindanaoIsland = 76,
    csmrmLuzonDatumPhilippines = 35,
    csmrmMahe1971MaheIsland = 77,
    csmrmMarcoAstroSalvageIslands = 78,
    csmrmMassawaEritreaEthiopia = 79,
    csmrmMerchichDatumMorocco = 36,
    csmrmMidwayAstro1961MidwayIsland = 80,
    csmrmMinnaDatumNigeria = 37,
    csmrmNahrwanSaudiaArabia = 81,
    csmrmNahrwanDatumMasirahUnitedArabEm = 38,
    csmrmNaparimaBWITrinidadAndTobago = 82,
    csmrmNorthAmerican1927Greenland = 83,
    csmrmNorthAmericanDatum1927Alaska = 2,
    csmrmNorthAmericanDatum1927Canada = 3,
    csmrmNorthAmericanDatum1927Caribbean = 41,
    csmrmNorthAmericanDatum1927MexCAm = 42,
    csmrmNorthAmericanDatum1927lower48 = 1,
    csmrmObservatorio1966CorvoFloresIslands = 84,
    csmrmOldEgyptianDatum = 43,
    csmrmOldHawaiianDatum = 44,
    csmrmOmanDatum = 45,
    csmrmOrdnanceSurveyOfGreatBritain1936 = 46,
    csmrmPicoDeLasNievesCanaryIslands = 85,
    csmrmPitcairnAstro1967PitcairnIsland = 86,
    csmrmProvisionalSouthAmericanDatum = 4,
    csmrmProvisionalSouthChilean1963 = 87,
    csmrmPuertoRicoDatumWithVirginIs = 48,
    csmrmQatarNationalDatum = 49,
    csmrmQornoqSouthGreenland = 88,
    csmrmReunionMascareneIslands = 89,
    csmrmRome1940SardiniaIsland = 90,
    csmrmSantoDOSEspiritoSantoIsland = 91,
    csmrmSaoBrazSaoMiguelSantaMariaIs = 92,
    csmrmSapperHill1943EastFalklandIsland = 93,
    csmrmSchwarzeckNamibia = 94,
    csmrmSouthAmericanDatum1969 = 5,
    csmrmSouthAsiaSingapore = 95,
    csmrmSoutheastBasePortoSantoMadeiraIs = 96,
    csmrmSouthwestBaseDatumAzores = 50,
    csmrmTimbalaiDatum1948Brunei = 51,
    csmrmTokyoDatum = 47,
    csmrmTristanAstro1968TristanDaCunha = 97,
    csmrmVitiLevu1916VitiLevuFiji = 98,
    csmrmWakeEniwetokDatum1960KwajaleinIs = 52,
    csmrmZanderijDatumSuriname = 53,
    csmrmUndefined = 0
};

struct __declspec(uuid("46935d20-f3cb-11d0-a26d-08003601d502"))
DGMSecondDegreePolynomial : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetModelForwardInputUnitID,put=PutModelForwardInputUnitID))
    long ModelForwardInputUnitID;
    __declspec(property(get=GetModelForwardOutputUnitID,put=PutModelForwardOutputUnitID))
    long ModelForwardOutputUnitID;
    __declspec(property(get=GetForwardInputSpaceXofOrig,put=PutForwardInputSpaceXofOrig))
    double ForwardInputSpaceXofOrig;
    __declspec(property(get=GetForwardInputSpaceYofOrig,put=PutForwardInputSpaceYofOrig))
    double ForwardInputSpaceYofOrig;
    __declspec(property(get=GetXNormalizationFactor,put=PutXNormalizationFactor))
    double XNormalizationFactor;
    __declspec(property(get=GetYNormalizationFactor,put=PutYNormalizationFactor))
    double YNormalizationFactor;
    __declspec(property(get=GetCoefficients,put=PutCoefficients))
    SAFEARRAY * Coefficients;

    //
    // Wrapper methods for error-handling
    //

    long GetModelForwardInputUnitID ( );
    void PutModelForwardInputUnitID (
        long ModelForwardInputUnitID );
    long GetModelForwardOutputUnitID ( );
    void PutModelForwardOutputUnitID (
        long ModelForwardOutputUnitID );
    double GetForwardInputSpaceXofOrig ( );
    void PutForwardInputSpaceXofOrig (
        double ForwardInputSpaceXofOrig );
    double GetForwardInputSpaceYofOrig ( );
    void PutForwardInputSpaceYofOrig (
        double ForwardInputSpaceYofOrig );
    double GetXNormalizationFactor ( );
    void PutXNormalizationFactor (
        double XNormalizationFactor );
    double GetYNormalizationFactor ( );
    void PutYNormalizationFactor (
        double YNormalizationFactor );
    SAFEARRAY * GetCoefficients ( );
    void PutCoefficients (
        SAFEARRAY * Coefficients );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ModelForwardInputUnitID (
        long * ModelForwardInputUnitID ) = 0;
    virtual HRESULT __stdcall put_ModelForwardInputUnitID (
        long ModelForwardInputUnitID ) = 0;
    virtual HRESULT __stdcall get_ModelForwardOutputUnitID (
        long * ModelForwardOutputUnitID ) = 0;
    virtual HRESULT __stdcall put_ModelForwardOutputUnitID (
        long ModelForwardOutputUnitID ) = 0;
    virtual HRESULT __stdcall get_ForwardInputSpaceXofOrig (
        double * ForwardInputSpaceXofOrig ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceXofOrig (
        double ForwardInputSpaceXofOrig ) = 0;
    virtual HRESULT __stdcall get_ForwardInputSpaceYofOrig (
        double * ForwardInputSpaceYofOrig ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceYofOrig (
        double ForwardInputSpaceYofOrig ) = 0;
    virtual HRESULT __stdcall get_XNormalizationFactor (
        double * XNormalizationFactor ) = 0;
    virtual HRESULT __stdcall put_XNormalizationFactor (
        double XNormalizationFactor ) = 0;
    virtual HRESULT __stdcall get_YNormalizationFactor (
        double * YNormalizationFactor ) = 0;
    virtual HRESULT __stdcall put_YNormalizationFactor (
        double YNormalizationFactor ) = 0;
    virtual HRESULT __stdcall get_Coefficients (
        SAFEARRAY * * Coefficients ) = 0;
    virtual HRESULT __stdcall put_Coefficients (
        SAFEARRAY * Coefficients ) = 0;
};

struct __declspec(uuid("2a76de30-f3c5-11d0-a26d-08003601d502"))
DGMStandardMolodensky : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetForwardInputSpaceEllipsoidVal,put=PutForwardInputSpaceEllipsoidVal))
    enum CSEllipsoidConstants ForwardInputSpaceEllipsoidVal;
    __declspec(property(get=GetForwardInputSpaceEllipsoidStr,put=PutForwardInputSpaceEllipsoidStr))
    BSTR ForwardInputSpaceEllipsoidStr;
    __declspec(property(get=GetEllipsoidStrings))
    struct DGMStringCollection * EllipsoidStrings;
    __declspec(property(get=GetForwardInputSpaceEquatorialRad,put=PutForwardInputSpaceEquatorialRad))
    double ForwardInputSpaceEquatorialRad;
    __declspec(property(get=GetForwardInputSpaceEccentricity,put=PutForwardInputSpaceEccentricity))
    double ForwardInputSpaceEccentricity;
    __declspec(property(get=GetDeltaEquatorialRad,put=PutDeltaEquatorialRad))
    double DeltaEquatorialRad;
    __declspec(property(get=GetDeltaFlattening,put=PutDeltaFlattening))
    double DeltaFlattening;
    __declspec(property(get=GetDeltaX,put=PutDeltaX))
    double DeltaX;
    __declspec(property(get=GetDeltaY,put=PutDeltaY))
    double DeltaY;
    __declspec(property(get=GetDeltaZ,put=PutDeltaZ))
    double DeltaZ;

    //
    // Wrapper methods for error-handling
    //

    enum CSEllipsoidConstants GetForwardInputSpaceEllipsoidVal ( );
    void PutForwardInputSpaceEllipsoidVal (
        enum CSEllipsoidConstants ForwardInputSpaceEllipsoidVal );
    BSTR GetForwardInputSpaceEllipsoidStr ( );
    void PutForwardInputSpaceEllipsoidStr (
        BSTR ForwardInputSpaceEllipsoidStr );
    struct DGMStringCollection * GetEllipsoidStrings ( );
    double GetForwardInputSpaceEquatorialRad ( );
    void PutForwardInputSpaceEquatorialRad (
        double ForwardInputSpaceEquatorialRad );
    double GetForwardInputSpaceEccentricity ( );
    void PutForwardInputSpaceEccentricity (
        double ForwardInputSpaceEccentricity );
    double GetDeltaEquatorialRad ( );
    void PutDeltaEquatorialRad (
        double DeltaEquatorialRad );
    double GetDeltaFlattening ( );
    void PutDeltaFlattening (
        double DeltaFlattening );
    double GetDeltaX ( );
    void PutDeltaX (
        double DeltaX );
    double GetDeltaY ( );
    void PutDeltaY (
        double DeltaY );
    double GetDeltaZ ( );
    void PutDeltaZ (
        double DeltaZ );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_ForwardInputSpaceEllipsoidVal (
        enum CSEllipsoidConstants * ForwardInputSpaceEllipsoidVal ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceEllipsoidVal (
        enum CSEllipsoidConstants ForwardInputSpaceEllipsoidVal ) = 0;
    virtual HRESULT __stdcall get_ForwardInputSpaceEllipsoidStr (
        BSTR * ForwardInputSpaceEllipsoidStr ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceEllipsoidStr (
        BSTR ForwardInputSpaceEllipsoidStr ) = 0;
    virtual HRESULT __stdcall get_EllipsoidStrings (
        struct DGMStringCollection * * EllipsoidStrings ) = 0;
    virtual HRESULT __stdcall get_ForwardInputSpaceEquatorialRad (
        double * ForwardInputSpaceEquatorialRad ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceEquatorialRad (
        double ForwardInputSpaceEquatorialRad ) = 0;
    virtual HRESULT __stdcall get_ForwardInputSpaceEccentricity (
        double * ForwardInputSpaceEccentricity ) = 0;
    virtual HRESULT __stdcall put_ForwardInputSpaceEccentricity (
        double ForwardInputSpaceEccentricity ) = 0;
    virtual HRESULT __stdcall get_DeltaEquatorialRad (
        double * DeltaEquatorialRad ) = 0;
    virtual HRESULT __stdcall put_DeltaEquatorialRad (
        double DeltaEquatorialRad ) = 0;
    virtual HRESULT __stdcall get_DeltaFlattening (
        double * DeltaFlattening ) = 0;
    virtual HRESULT __stdcall put_DeltaFlattening (
        double DeltaFlattening ) = 0;
    virtual HRESULT __stdcall get_DeltaX (
        double * DeltaX ) = 0;
    virtual HRESULT __stdcall put_DeltaX (
        double DeltaX ) = 0;
    virtual HRESULT __stdcall get_DeltaY (
        double * DeltaY ) = 0;
    virtual HRESULT __stdcall put_DeltaY (
        double DeltaY ) = 0;
    virtual HRESULT __stdcall get_DeltaZ (
        double * DeltaZ ) = 0;
    virtual HRESULT __stdcall put_DeltaZ (
        double DeltaZ ) = 0;
};

struct __declspec(uuid("7080a269-80f3-11cf-a183-08003601d502"))
IGMLink : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetLinkObject))
    IDispatch * LinkObject;
    __declspec(property(get=GetType))
    enum CSTransformLinkConstants Type;

    //
    // Wrapper methods for error-handling
    //

    IDispatch * GetLinkObject ( );
    enum CSTransformLinkConstants GetType ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_LinkObject (
        IDispatch * * lplpLinkObject ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum CSTransformLinkConstants * lpType ) = 0;
};

enum CSTransformLinkConstants
{
    cstlCoordinateSystem = 0,
    cstlReferenceSpaceMgr = 1,
    cstlDatumTransformation = 2,
    cstlLeastSquares = 3
};

struct __declspec(uuid("7080a26a-80f3-11cf-a183-08003601d502"))
Link : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetLinkObject))
    IDispatch * LinkObject;
    __declspec(property(get=GetType))
    enum CSTransformLinkConstants Type;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    IDispatch * GetLinkObject ( );
    enum CSTransformLinkConstants GetType ( );
};

struct __declspec(uuid("7080a264-80f3-11cf-a183-08003601d502"))
IGMLinks : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        BSTR Name,
        enum CSTransformLinkConstants Type );
    struct Link * Item (
        BSTR Name );
    HRESULT Delete (
        BSTR Name );
    HRESULT DeleteAll ( );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * lpCount ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name,
        enum CSTransformLinkConstants Type ) = 0;
    virtual HRESULT __stdcall raw_Item (
        BSTR Name,
        struct Link * * lplpLink ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * lplpEnum ) = 0;
};

struct __declspec(uuid("7080a265-80f3-11cf-a183-08003601d502"))
Links : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    HRESULT Add (
        BSTR Name,
        enum CSTransformLinkConstants Type );
    struct Link * Item (
        BSTR Name );
    HRESULT Delete (
        BSTR Name );
    HRESULT DeleteAll ( );
    IUnknown * _NewEnum ( );
};

struct __declspec(uuid("7080a267-80f3-11cf-a183-08003601d502"))
IGMTransLinks : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Append (
        struct Link * lpLink,
        VARIANT_BOOL Strengthen,
        enum CSTransDirectionConstants DirectionToStrengthen );
    struct Link * Item (
        long index );
    HRESULT RemoveAll ( );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * lpCount ) = 0;
    virtual HRESULT __stdcall raw_Append (
        struct Link * lpLink,
        VARIANT_BOOL Strengthen,
        enum CSTransDirectionConstants DirectionToStrengthen ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long index,
        struct Link * * lplpLink ) = 0;
    virtual HRESULT __stdcall raw_RemoveAll ( ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * lplpEnum ) = 0;
};

enum CSTransDirectionConstants
{
    cstdForward = 0,
    cstdInverse = 1,
    cstdIgnored = 2
};

struct __declspec(uuid("7080a268-80f3-11cf-a183-08003601d502"))
TransLinks : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    HRESULT Append (
        struct Link * lpLink,
        VARIANT_BOOL Strengthen,
        enum CSTransDirectionConstants DirectionToStrengthen );
    struct Link * Item (
        long index );
    HRESULT RemoveAll ( );
    IUnknown * _NewEnum ( );
};

struct __declspec(uuid("7080a262-80f3-11cf-a183-08003601d502"))
IGMAltCoordSystemPath : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetTransLinks))
    struct TransLinks * TransLinks;
    __declspec(property(get=GetLinks))
    struct Links * Links;
    __declspec(property(get=GetPersist,put=PutPersist))
    VARIANT_BOOL Persist;

    //
    // Wrapper methods for error-handling
    //

    struct Links * GetLinks ( );
    struct TransLinks * GetTransLinks ( );
    void PutPersist (
        VARIANT_BOOL Persist );
    VARIANT_BOOL GetPersist ( );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );
    HRESULT RecomputeInternalPaths ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Links (
        struct Links * * Links ) = 0;
    virtual HRESULT __stdcall get_TransLinks (
        struct TransLinks * * TransLinks ) = 0;
    virtual HRESULT __stdcall put_Persist (
        VARIANT_BOOL Persist ) = 0;
    virtual HRESULT __stdcall get_Persist (
        VARIANT_BOOL * Persist ) = 0;
    virtual HRESULT __stdcall raw_IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid ) = 0;
    virtual HRESULT __stdcall raw_TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points ) = 0;
    virtual HRESULT __stdcall raw_TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z ) = 0;
    virtual HRESULT __stdcall raw_RecomputeInternalPaths ( ) = 0;
};

struct __declspec(uuid("7080a263-80f3-11cf-a183-08003601d502"))
AltCoordSystemPath : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransLinks))
    struct TransLinks * TransLinks;
    __declspec(property(get=GetLinks))
    struct Links * Links;
    __declspec(property(get=GetPersist,put=PutPersist))
    VARIANT_BOOL Persist;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    struct Links * GetLinks ( );
    struct TransLinks * GetTransLinks ( );
    void PutPersist (
        VARIANT_BOOL _arg1 );
    VARIANT_BOOL GetPersist ( );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );
    HRESULT RecomputeInternalPaths ( );
};

struct __declspec(uuid("7080a260-80f3-11cf-a183-08003601d502"))
IGMAltCoordSystemPaths : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    HRESULT Add (
        BSTR Name );
    struct AltCoordSystemPath * Item (
        BSTR Name );
    HRESULT Delete (
        BSTR Name );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * lpCount ) = 0;
    virtual HRESULT __stdcall raw_Add (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw_Item (
        BSTR Name,
        struct AltCoordSystemPath * * lplpAltCoordSystemPath ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * lplpEnum ) = 0;
};

struct __declspec(uuid("7080a261-80f3-11cf-a183-08003601d502"))
AltCoordSystemPaths : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    HRESULT Add (
        BSTR Name );
    struct AltCoordSystemPath * Item (
        BSTR Name );
    HRESULT Delete (
        BSTR Name );
    IUnknown * _NewEnum ( );
};

struct __declspec(uuid("e4b5e810-3de4-11ce-9cb5-08003601c1af"))
IGMCoordSystemsMgr : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordSystem))
    struct DGMCoordSystem * CoordSystem;
    __declspec(property(get=GetAltCoordSystemPaths))
    struct AltCoordSystemPaths * AltCoordSystemPaths;

    //
    // Wrapper methods for error-handling
    //

    struct DGMCoordSystem * GetCoordSystem ( );
    struct AltCoordSystemPaths * GetAltCoordSystemPaths ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_CoordSystem (
        struct DGMCoordSystem * * ppCoordSystem ) = 0;
    virtual HRESULT __stdcall get_AltCoordSystemPaths (
        struct AltCoordSystemPaths * * ppAltCoordSystemPaths ) = 0;
};

struct __declspec(uuid("c8f007a0-3de6-11ce-9cb5-08003601c1af"))
DGMCoordSystemsMgr : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCoordSystem))
    struct DGMCoordSystem * CoordSystem;
    __declspec(property(get=GetAltCoordSystemPaths))
    struct AltCoordSystemPaths * AltCoordSystemPaths;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    struct DGMCoordSystem * GetCoordSystem ( );
    struct AltCoordSystemPaths * GetAltCoordSystemPaths ( );
};

struct __declspec(uuid("116f4080-e3d7-11cf-af86-08003601e529"))
IGMUnitIDs : IUnknown
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(put=Put_UnitType))
    enum UnitTypeConstants _UnitType;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    void Put_UnitType (
        enum UnitTypeConstants _arg1 );
    long Item (
        long index );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall put__UnitType (
        enum UnitTypeConstants _arg1 ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long index,
        long * Item ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * Enum ) = 0;
};

enum UnitTypeConstants
{
    igUnitDistance = 1,
    igUnitAngle = 2,
    igUnitMass = 3,
    igUnitTime = 4,
    igUnitTemperature = 5,
    igUnitElectricCharge = 6,
    igUnitLuminousIntensity = 7,
    igUnitAmountOfSubstance = 8,
    igUnitSolidAngle = 9,
    igUnitAngularAcceleration = 10,
    igUnitAngularMomentum = 11,
    igUnitAngularVelocity = 12,
    igUnitArea = 13,
    igUnitBodyForce = 14,
    igUnitCoefficientOfThermalExpansion = 15,
    igUnitDensity = 16,
    igUnitElectricalCapacitance = 17,
    igUnitElectricalConductance = 18,
    igUnitElectricalFieldStrength = 19,
    igUnitElectricalInductance = 20,
    igUnitElectricalPotential = 21,
    igUnitElectricalResistance = 22,
    igUnitEnergy = 23,
    igUnitEntropy = 24,
    igUnitFilmCoefficient = 25,
    igUnitForce = 26,
    igUnitForcePerArea = 27,
    igUnitForcePerDistance = 28,
    igUnitFrequency = 29,
    igUnitHeatCapacity = 30,
    igUnitHeatFluxPerArea = 31,
    igUnitHeatFluxPerDistance = 32,
    igUnitHeatSource = 33,
    igUnitIlluminance = 34,
    igUnitLinearAcceleration = 35,
    igUnitLinearPerAngular = 36,
    igUnitLinearVelocity = 37,
    igUnitLuminousFlux = 38,
    igUnitMagneticFieldStrength = 39,
    igUnitMagneticFlux = 40,
    igUnitMagneticFluxDensity = 41,
    igUnitMassFlowRate = 42,
    igUnitMassMomentOfInertia = 43,
    igUnitMassPerArea = 44,
    igUnitMassPerLength = 45,
    igUnitMomentum = 46,
    igUnitPerDistance = 47,
    igUnitPower = 48,
    igUnitQuantityOfElectricity = 49,
    igUnitRadiantIntensity = 50,
    igUnitRotationalStiffness = 51,
    igUnitSecondMomentOfArea = 52,
    igUnitThermalConductivity = 53,
    igUnitDynamicViscosity = 54,
    igUnitKinematicViscosity = 55,
    igUnitVolume = 56,
    igUnitVolumeFlowRate = 57,
    igUnitScalar = 58
};

struct __declspec(uuid("116f4081-e3d7-11cf-af86-08003601e529"))
UnitIDs : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(put=Put_UnitType))
    enum UnitTypeConstants _UnitType;

    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long GetCount ( );
    void Put_UnitType (
        enum UnitTypeConstants _arg1 );
    long Item (
        long index );
    IUnknown * _NewEnum ( );
};

struct __declspec(uuid("d009af70-dcc2-11ce-af56-08003601e529"))
IGMUnitsOfMeasureTables : IUnknown
{
    //
    // Wrapper methods for error-handling
    //

    long AddUserDefinedUnit (
        enum UnitTypeConstants UnitType,
        BSTR UnitName,
        double NumCompBaseUnits,
        double UnitOffset,
        BSTR AppName,
        BSTR AppVersionStr );
    double ConvertUnitToUnit (
        enum UnitTypeConstants UnitType,
        double ValueIn,
        long UnitIDFrom,
        long UnitIDTo );
    HRESULT DeleteUserDefinedUnit (
        enum UnitTypeConstants UnitType,
        long UnitID,
        BSTR AppName,
        BSTR AppVersionStr );
    long GetCompBaseUnit (
        enum UnitTypeConstants UnitType );
    struct UnitIDs * GetUnitIDs (
        enum UnitTypeConstants UnitType );
    long GetUnitID (
        enum UnitTypeConstants UnitType,
        BSTR UnitName,
        const VARIANT & CaseFlag = vtMissing );
    BSTR GetUnitName (
        long UnitID );
    HRESULT LoadUserDefinedUnits (
        BSTR AppName,
        BSTR AppVersionStr );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall raw_AddUserDefinedUnit (
        enum UnitTypeConstants UnitType,
        BSTR UnitName,
        double NumCompBaseUnits,
        double UnitOffset,
        BSTR AppName,
        BSTR AppVersionStr,
        long * UnitID ) = 0;
    virtual HRESULT __stdcall raw_ConvertUnitToUnit (
        enum UnitTypeConstants UnitType,
        double ValueIn,
        long UnitIDFrom,
        long UnitIDTo,
        double * ValueOut ) = 0;
    virtual HRESULT __stdcall raw_DeleteUserDefinedUnit (
        enum UnitTypeConstants UnitType,
        long UnitID,
        BSTR AppName,
        BSTR AppVersionStr ) = 0;
    virtual HRESULT __stdcall raw_GetCompBaseUnit (
        enum UnitTypeConstants UnitType,
        long * UnitID ) = 0;
    virtual HRESULT __stdcall raw_GetUnitIDs (
        enum UnitTypeConstants UnitType,
        struct UnitIDs * * UnitIDs ) = 0;
    virtual HRESULT __stdcall raw_GetUnitID (
        enum UnitTypeConstants UnitType,
        BSTR UnitName,
        VARIANT CaseFlag,
        long * UnitID ) = 0;
    virtual HRESULT __stdcall raw_GetUnitName (
        long UnitID,
        BSTR * UnitName ) = 0;
    virtual HRESULT __stdcall raw_LoadUserDefinedUnits (
        BSTR AppName,
        BSTR AppVersionStr ) = 0;
};

struct __declspec(uuid("d009af71-dcc2-11ce-af56-08003601e529"))
DGMUnitsOfMeasure : IDispatch
{
    //
    // Wrapper methods for error-handling
    //

    // Methods:
    long AddUserDefinedUnit (
        enum UnitTypeConstants UnitType,
        BSTR UnitName,
        double NumCompBaseUnits,
        double UnitOffset,
        BSTR AppName,
        BSTR AppVersionStr );
    double ConvertUnitToUnit (
        enum UnitTypeConstants UnitType,
        double ValueIn,
        long UnitIDFrom,
        long UnitIDTo );
    HRESULT DeleteUserDefinedUnit (
        enum UnitTypeConstants UnitType,
        long UnitID,
        BSTR AppName,
        BSTR AppVersionStr );
    long GetCompBaseUnit (
        enum UnitTypeConstants UnitType );
    struct UnitIDs * GetUnitIDs (
        enum UnitTypeConstants UnitType );
    long GetUnitID (
        enum UnitTypeConstants UnitType,
        BSTR UnitName,
        const VARIANT & CaseFlag = vtMissing );
    BSTR GetUnitName (
        long UnitID );
    HRESULT LoadUserDefinedUnits (
        BSTR AppName,
        BSTR AppVersionStr );
};

struct __declspec(uuid("e054829e-f325-11d0-bc0c-080036ea3003"))
DGMLeastSquares : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    BSTR Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    BSTR Description;
    __declspec(property(get=GetModelTypeStr,put=PutModelTypeStr))
    BSTR ModelTypeStr;
    __declspec(property(get=GetModelTypeVal,put=PutModelTypeVal))
    enum LeastSquaresModelConstants ModelTypeVal;
    __declspec(property(get=GetDegree,put=PutDegree))
    long Degree;
    __declspec(property(get=GetNumberControlPointsNeeded))
    long NumberControlPointsNeeded;
    __declspec(property(get=GetDegreesOfFreedom))
    long DegreesOfFreedom;
    __declspec(property(get=GetIs3d))
    VARIANT_BOOL Is3d;
    __declspec(property(get=GetIsLinear))
    VARIANT_BOOL IsLinear;
    __declspec(property(get=GetWeightsUsage,put=PutWeightsUsage))
    enum LeastSquaresWeightsUsageConstants WeightsUsage;
    __declspec(property(get=GetNumberTransformationParameters))
    long NumberTransformationParameters;
    __declspec(property(get=GetTransformationParameters))
    SAFEARRAY * TransformationParameters;
    __declspec(property(get=GetParameterCovarianceMatrix))
    SAFEARRAY * ParameterCovarianceMatrix;
    __declspec(property(get=GetObservationMatrixSize))
    long ObservationMatrixSize;
    __declspec(property(get=GetAdjObservationCovarianceMatrix))
    SAFEARRAY * AdjObservationCovarianceMatrix;
    __declspec(property(get=GetResidualCovarianceMatrix))
    SAFEARRAY * ResidualCovarianceMatrix;
    __declspec(property(get=GetHomogeneousParamMatrixType,put=PutHomogeneousParamMatrixType))
    enum LeastSquaresHomogeneousMatrixConstants HomogeneousParamMatrixType;
    __declspec(property(get=GetHomogeneousParameterMatrix))
    SAFEARRAY * HomogeneousParameterMatrix;
    __declspec(property(get=GetVarianceFactor))
    double VarianceFactor;
    __declspec(property(get=GetRootMeanSquareOfResiduals))
    double RootMeanSquareOfResiduals;
    __declspec(property(get=GetApplyResidualSmoothing,put=PutApplyResidualSmoothing))
    VARIANT_BOOL ApplyResidualSmoothing;
    __declspec(property(get=GetResidualSmoothingExponent,put=PutResidualSmoothingExponent))
    double ResidualSmoothingExponent;
    __declspec(property(get=GetInputPointType,put=PutInputPointType))
    enum CSPointConstants InputPointType;
    __declspec(property(get=GetInputSpaceID,put=PutInputSpaceID))
    long InputSpaceID;
    __declspec(property(get=GetOutputPointType,put=PutOutputPointType))
    enum CSPointConstants OutputPointType;
    __declspec(property(get=GetOutputSpaceID,put=PutOutputSpaceID))
    long OutputSpaceID;
    __declspec(property(get=GetConstraintsUsage,put=PutConstraintsUsage))
    VARIANT_BOOL ConstraintsUsage;
    __declspec(property(get=GetSingleParameterConstraints))
    struct DGMSingleParameterConstraints * SingleParameterConstraints;
    __declspec(property(get=GetObservations))
    struct DGMObservations * Observations;
    __declspec(property(get=GetLeastSquaresModelTypeStrings))
    struct DGMStringCollection * LeastSquaresModelTypeStrings;

    //
    // Wrapper methods for error-handling
    //

    BSTR GetName ( );
    void PutName (
        BSTR Name );
    BSTR GetDescription ( );
    void PutDescription (
        BSTR Description );
    BSTR GetModelTypeStr ( );
    void PutModelTypeStr (
        BSTR ModelTypeStr );
    enum LeastSquaresModelConstants GetModelTypeVal ( );
    void PutModelTypeVal (
        enum LeastSquaresModelConstants ModelTypeVal );
    long GetDegree ( );
    void PutDegree (
        long Degree );
    long GetNumberControlPointsNeeded ( );
    long GetDegreesOfFreedom ( );
    VARIANT_BOOL GetIs3d ( );
    VARIANT_BOOL GetIsLinear ( );
    enum LeastSquaresWeightsUsageConstants GetWeightsUsage ( );
    void PutWeightsUsage (
        enum LeastSquaresWeightsUsageConstants WeightsUsage );
    long GetNumberTransformationParameters ( );
    SAFEARRAY * GetTransformationParameters ( );
    SAFEARRAY * GetParameterCovarianceMatrix ( );
    long GetObservationMatrixSize ( );
    SAFEARRAY * GetAdjObservationCovarianceMatrix ( );
    SAFEARRAY * GetResidualCovarianceMatrix ( );
    enum LeastSquaresHomogeneousMatrixConstants GetHomogeneousParamMatrixType ( );
    void PutHomogeneousParamMatrixType (
        enum LeastSquaresHomogeneousMatrixConstants HomogeneousParamMatrixType );
    SAFEARRAY * GetHomogeneousParameterMatrix ( );
    double GetVarianceFactor ( );
    double GetRootMeanSquareOfResiduals ( );
    VARIANT_BOOL GetApplyResidualSmoothing ( );
    void PutApplyResidualSmoothing (
        VARIANT_BOOL ApplyResidualSmoothing );
    double GetResidualSmoothingExponent ( );
    void PutResidualSmoothingExponent (
        double ResidualSmoothingExponent );
    enum CSPointConstants GetInputPointType ( );
    void PutInputPointType (
        enum CSPointConstants InputPointType );
    long GetInputSpaceID ( );
    void PutInputSpaceID (
        long InputSpaceID );
    enum CSPointConstants GetOutputPointType ( );
    void PutOutputPointType (
        enum CSPointConstants OutputPointType );
    long GetOutputSpaceID ( );
    void PutOutputSpaceID (
        long OutputSpaceID );
    VARIANT_BOOL GetConstraintsUsage ( );
    void PutConstraintsUsage (
        VARIANT_BOOL ConstraintsUsage );
    struct DGMSingleParameterConstraints * GetSingleParameterConstraints ( );
    struct DGMObservations * GetObservations ( );
    struct DGMStringCollection * GetLeastSquaresModelTypeStrings ( );
    HRESULT CopyTo (
        struct DGMLeastSquares * LeastSquaresDest );
    HRESULT IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid );
    HRESULT TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points );
    HRESULT TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z );
    HRESULT CalculateTransformation ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Description (
        BSTR * Description ) = 0;
    virtual HRESULT __stdcall put_Description (
        BSTR Description ) = 0;
    virtual HRESULT __stdcall get_ModelTypeStr (
        BSTR * ModelTypeStr ) = 0;
    virtual HRESULT __stdcall put_ModelTypeStr (
        BSTR ModelTypeStr ) = 0;
    virtual HRESULT __stdcall get_ModelTypeVal (
        enum LeastSquaresModelConstants * ModelTypeVal ) = 0;
    virtual HRESULT __stdcall put_ModelTypeVal (
        enum LeastSquaresModelConstants ModelTypeVal ) = 0;
    virtual HRESULT __stdcall get_Degree (
        long * Degree ) = 0;
    virtual HRESULT __stdcall put_Degree (
        long Degree ) = 0;
    virtual HRESULT __stdcall get_NumberControlPointsNeeded (
        long * NumberControlPointsNeeded ) = 0;
    virtual HRESULT __stdcall get_DegreesOfFreedom (
        long * DegreesOfFreedom ) = 0;
    virtual HRESULT __stdcall get_Is3d (
        VARIANT_BOOL * Is3d ) = 0;
    virtual HRESULT __stdcall get_IsLinear (
        VARIANT_BOOL * IsLinear ) = 0;
    virtual HRESULT __stdcall get_WeightsUsage (
        enum LeastSquaresWeightsUsageConstants * WeightsUsage ) = 0;
    virtual HRESULT __stdcall put_WeightsUsage (
        enum LeastSquaresWeightsUsageConstants WeightsUsage ) = 0;
    virtual HRESULT __stdcall get_NumberTransformationParameters (
        long * NumberTransformationParameters ) = 0;
    virtual HRESULT __stdcall get_TransformationParameters (
        SAFEARRAY * * TransformationParameters ) = 0;
    virtual HRESULT __stdcall get_ParameterCovarianceMatrix (
        SAFEARRAY * * ParameterCovarianceMatrix ) = 0;
    virtual HRESULT __stdcall get_ObservationMatrixSize (
        long * ObservationMatrixSize ) = 0;
    virtual HRESULT __stdcall get_AdjObservationCovarianceMatrix (
        SAFEARRAY * * AdjObservationCovarianceMatrix ) = 0;
    virtual HRESULT __stdcall get_ResidualCovarianceMatrix (
        SAFEARRAY * * ResidualCovarianceMatrix ) = 0;
    virtual HRESULT __stdcall get_HomogeneousParamMatrixType (
        enum LeastSquaresHomogeneousMatrixConstants * HomogeneousParamMatrixType ) = 0;
    virtual HRESULT __stdcall put_HomogeneousParamMatrixType (
        enum LeastSquaresHomogeneousMatrixConstants HomogeneousParamMatrixType ) = 0;
    virtual HRESULT __stdcall get_HomogeneousParameterMatrix (
        SAFEARRAY * * HomogeneousParameterMatrix ) = 0;
    virtual HRESULT __stdcall get_VarianceFactor (
        double * VarianceFactor ) = 0;
    virtual HRESULT __stdcall get_RootMeanSquareOfResiduals (
        double * RootMeanSquareOfResiduals ) = 0;
    virtual HRESULT __stdcall get_ApplyResidualSmoothing (
        VARIANT_BOOL * ApplyResidualSmoothing ) = 0;
    virtual HRESULT __stdcall put_ApplyResidualSmoothing (
        VARIANT_BOOL ApplyResidualSmoothing ) = 0;
    virtual HRESULT __stdcall get_ResidualSmoothingExponent (
        double * ResidualSmoothingExponent ) = 0;
    virtual HRESULT __stdcall put_ResidualSmoothingExponent (
        double ResidualSmoothingExponent ) = 0;
    virtual HRESULT __stdcall get_InputPointType (
        enum CSPointConstants * InputPointType ) = 0;
    virtual HRESULT __stdcall put_InputPointType (
        enum CSPointConstants InputPointType ) = 0;
    virtual HRESULT __stdcall get_InputSpaceID (
        long * InputSpaceID ) = 0;
    virtual HRESULT __stdcall put_InputSpaceID (
        long InputSpaceID ) = 0;
    virtual HRESULT __stdcall get_OutputPointType (
        enum CSPointConstants * OutputPointType ) = 0;
    virtual HRESULT __stdcall put_OutputPointType (
        enum CSPointConstants OutputPointType ) = 0;
    virtual HRESULT __stdcall get_OutputSpaceID (
        long * OutputSpaceID ) = 0;
    virtual HRESULT __stdcall put_OutputSpaceID (
        long OutputSpaceID ) = 0;
    virtual HRESULT __stdcall get_ConstraintsUsage (
        VARIANT_BOOL * ConstraintsUsage ) = 0;
    virtual HRESULT __stdcall put_ConstraintsUsage (
        VARIANT_BOOL ConstraintsUsage ) = 0;
    virtual HRESULT __stdcall get_SingleParameterConstraints (
        struct DGMSingleParameterConstraints * * SingleParameterConstraints ) = 0;
    virtual HRESULT __stdcall get_Observations (
        struct DGMObservations * * Observations ) = 0;
    virtual HRESULT __stdcall get_LeastSquaresModelTypeStrings (
        struct DGMStringCollection * * LeastSquaresModelTypeStrings ) = 0;
    virtual HRESULT __stdcall raw_CopyTo (
        struct DGMLeastSquares * LeastSquaresDest ) = 0;
    virtual HRESULT __stdcall raw_IsTransformationValid (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        VARIANT_BOOL * IsValid ) = 0;
    virtual HRESULT __stdcall raw_TransformPoints (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        long Count,
        SAFEARRAY * Points ) = 0;
    virtual HRESULT __stdcall raw_TransformPoint (
        enum CSPointConstants InputPointType,
        long InputSpaceID,
        enum CSPointConstants OutputPointType,
        long OutputSpaceID,
        double * X,
        double * Y,
        double * Z ) = 0;
    virtual HRESULT __stdcall raw_CalculateTransformation ( ) = 0;
};

enum LeastSquaresModelConstants
{
    cslsmUndefined = 0,
    cslsmAffine = 1,
    cslsmGeometricallyInterpretedAffine = 2,
    cslsmHelmert = 3,
    cslsmLinearProjective = 4,
    cslsmProjective = 5,
    cslsmLinear2Dim2ndDegPolynomial = 6,
    cslsmLinear2DimNDegPolynomial = 7,
    cslsmLinear2DimNDegConformalPolynomial = 8,
    cslsm2DimNDegPolynomial = 9,
    cslsm2DimNDegConformalPolynomial = 10,
    cslsmLinear3DimNDegPolynomial = 11,
    cslsm3DimNDegPolynomial = 12,
    cslsm7ParameterConformal = 13,
    cslsmBursaWolf = 14
};

enum LeastSquaresWeightsUsageConstants
{
    cslswNone = 0,
    cslswSystem1Only = 1,
    cslswSystem2Only = 2,
    cslswSystem1AndSystem2 = 3
};

enum LeastSquaresHomogeneousMatrixConstants
{
    cslshmRightHanded = 0,
    cslshmLeftHanded = 1
};

struct __declspec(uuid("0fdda0f8-f967-11d0-bc0c-080036ea3003"))
DGMSingleParameterConstraints : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    struct DGMSingleParameterConstraint * Add ( );
    HRESULT Delete (
        long index );
    HRESULT DeleteAll ( );
    struct DGMSingleParameterConstraint * Item (
        long index );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct DGMSingleParameterConstraint * * Constraint ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        long index ) = 0;
    virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
    virtual HRESULT __stdcall raw_Item (
        long index,
        struct DGMSingleParameterConstraint * * Constraint ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * ppEnum ) = 0;
};

struct __declspec(uuid("cca27fff-08fc-11d1-bc0f-080036ea3003"))
DGMSingleParameterConstraint : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetTransformationParameterIndex,put=PutTransformationParameterIndex))
    long TransformationParameterIndex;
    __declspec(property(get=GetValue,put=PutValue))
    double Value;

    //
    // Wrapper methods for error-handling
    //

    long GetTransformationParameterIndex ( );
    void PutTransformationParameterIndex (
        long TransformationParameterIndex );
    double GetValue ( );
    void PutValue (
        double Value );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_TransformationParameterIndex (
        long * TransformationParameterIndex ) = 0;
    virtual HRESULT __stdcall put_TransformationParameterIndex (
        long TransformationParameterIndex ) = 0;
    virtual HRESULT __stdcall get_Value (
        double * Value ) = 0;
    virtual HRESULT __stdcall put_Value (
        double Value ) = 0;
};

struct __declspec(uuid("cca27ffd-08fc-11d1-bc0f-080036ea3003"))
DGMObservations : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetCount))
    long Count;
    __declspec(property(get=GetControlPointCount))
    long ControlPointCount;
    __declspec(property(get=GetCheckPointCount))
    long CheckPointCount;

    //
    // Wrapper methods for error-handling
    //

    long GetCount ( );
    long GetControlPointCount ( );
    long GetCheckPointCount ( );
    struct DGMObservation * Add ( );
    HRESULT Delete (
        const VARIANT & index );
    HRESULT DeleteAll ( );
    struct DGMObservation * Item (
        const VARIANT & index );
    IUnknown * _NewEnum ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Count (
        long * Count ) = 0;
    virtual HRESULT __stdcall get_ControlPointCount (
        long * ControlPointCount ) = 0;
    virtual HRESULT __stdcall get_CheckPointCount (
        long * CheckPointCount ) = 0;
    virtual HRESULT __stdcall raw_Add (
        struct DGMObservation * * Observation ) = 0;
    virtual HRESULT __stdcall raw_Delete (
        VARIANT index ) = 0;
    virtual HRESULT __stdcall raw_DeleteAll ( ) = 0;
    virtual HRESULT __stdcall raw_Item (
        VARIANT index,
        struct DGMObservation * * Observation ) = 0;
    virtual HRESULT __stdcall raw__NewEnum (
        IUnknown * * ppEnum ) = 0;
};

struct __declspec(uuid("cca28001-08fc-11d1-bc0f-080036ea3003"))
DGMObservation : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetName,put=PutName))
    BSTR Name;
    __declspec(property(get=GetDescription,put=PutDescription))
    BSTR Description;
    __declspec(property(get=GetSystem1X,put=PutSystem1X))
    double System1X;
    __declspec(property(get=GetSystem1Y,put=PutSystem1Y))
    double System1Y;
    __declspec(property(get=GetSystem1Z,put=PutSystem1Z))
    double System1Z;
    __declspec(property(get=GetSystem2X,put=PutSystem2X))
    double System2X;
    __declspec(property(get=GetSystem2Y,put=PutSystem2Y))
    double System2Y;
    __declspec(property(get=GetSystem2Z,put=PutSystem2Z))
    double System2Z;
    __declspec(property(get=GetAdjustedSystem1X))
    double AdjustedSystem1X;
    __declspec(property(get=GetAdjustedSystem1Y))
    double AdjustedSystem1Y;
    __declspec(property(get=GetAdjustedSystem1Z))
    double AdjustedSystem1Z;
    __declspec(property(get=GetAdjustedSystem2X))
    double AdjustedSystem2X;
    __declspec(property(get=GetAdjustedSystem2Y))
    double AdjustedSystem2Y;
    __declspec(property(get=GetAdjustedSystem2Z))
    double AdjustedSystem2Z;
    __declspec(property(get=GetSystem1StdDeviationX,put=PutSystem1StdDeviationX))
    double System1StdDeviationX;
    __declspec(property(get=GetSystem1StdDeviationY,put=PutSystem1StdDeviationY))
    double System1StdDeviationY;
    __declspec(property(get=GetSystem1StdDeviationZ,put=PutSystem1StdDeviationZ))
    double System1StdDeviationZ;
    __declspec(property(get=GetSystem2StdDeviationX,put=PutSystem2StdDeviationX))
    double System2StdDeviationX;
    __declspec(property(get=GetSystem2StdDeviationY,put=PutSystem2StdDeviationY))
    double System2StdDeviationY;
    __declspec(property(get=GetSystem2StdDeviationZ,put=PutSystem2StdDeviationZ))
    double System2StdDeviationZ;
    __declspec(property(get=GetType,put=PutType))
    enum LeastSquaresObservationConstants Type;
    __declspec(property(get=GetLinearModelResidual))
    struct DGMLinearModelResidual * LinearModelResidual;
    __declspec(property(get=GetNonlinearModelResidual))
    struct DGMNonlinearModelResidual * NonlinearModelResidual;

    //
    // Wrapper methods for error-handling
    //

    BSTR GetName ( );
    void PutName (
        BSTR Name );
    BSTR GetDescription ( );
    void PutDescription (
        BSTR Description );
    double GetSystem1X ( );
    void PutSystem1X (
        double System1X );
    double GetSystem1Y ( );
    void PutSystem1Y (
        double System1Y );
    double GetSystem1Z ( );
    void PutSystem1Z (
        double System1Z );
    double GetSystem2X ( );
    void PutSystem2X (
        double System2X );
    double GetSystem2Y ( );
    void PutSystem2Y (
        double System2Y );
    double GetSystem2Z ( );
    void PutSystem2Z (
        double System2Z );
    double GetAdjustedSystem1X ( );
    double GetAdjustedSystem1Y ( );
    double GetAdjustedSystem1Z ( );
    double GetAdjustedSystem2X ( );
    double GetAdjustedSystem2Y ( );
    double GetAdjustedSystem2Z ( );
    double GetSystem1StdDeviationX ( );
    void PutSystem1StdDeviationX (
        double System1StdDeviationX );
    double GetSystem1StdDeviationY ( );
    void PutSystem1StdDeviationY (
        double System1StdDeviationY );
    double GetSystem1StdDeviationZ ( );
    void PutSystem1StdDeviationZ (
        double System1StdDeviationZ );
    double GetSystem2StdDeviationX ( );
    void PutSystem2StdDeviationX (
        double System2StdDeviationX );
    double GetSystem2StdDeviationY ( );
    void PutSystem2StdDeviationY (
        double System2StdDeviationY );
    double GetSystem2StdDeviationZ ( );
    void PutSystem2StdDeviationZ (
        double System2StdDeviationZ );
    enum LeastSquaresObservationConstants GetType ( );
    void PutType (
        enum LeastSquaresObservationConstants Type );
    struct DGMLinearModelResidual * GetLinearModelResidual ( );
    struct DGMNonlinearModelResidual * GetNonlinearModelResidual ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_Name (
        BSTR * Name ) = 0;
    virtual HRESULT __stdcall put_Name (
        BSTR Name ) = 0;
    virtual HRESULT __stdcall get_Description (
        BSTR * Description ) = 0;
    virtual HRESULT __stdcall put_Description (
        BSTR Description ) = 0;
    virtual HRESULT __stdcall get_System1X (
        double * System1X ) = 0;
    virtual HRESULT __stdcall put_System1X (
        double System1X ) = 0;
    virtual HRESULT __stdcall get_System1Y (
        double * System1Y ) = 0;
    virtual HRESULT __stdcall put_System1Y (
        double System1Y ) = 0;
    virtual HRESULT __stdcall get_System1Z (
        double * System1Z ) = 0;
    virtual HRESULT __stdcall put_System1Z (
        double System1Z ) = 0;
    virtual HRESULT __stdcall get_System2X (
        double * System2X ) = 0;
    virtual HRESULT __stdcall put_System2X (
        double System2X ) = 0;
    virtual HRESULT __stdcall get_System2Y (
        double * System2Y ) = 0;
    virtual HRESULT __stdcall put_System2Y (
        double System2Y ) = 0;
    virtual HRESULT __stdcall get_System2Z (
        double * System2Z ) = 0;
    virtual HRESULT __stdcall put_System2Z (
        double System2Z ) = 0;
    virtual HRESULT __stdcall get_AdjustedSystem1X (
        double * AdjustedSystem1X ) = 0;
    virtual HRESULT __stdcall get_AdjustedSystem1Y (
        double * AdjustedSystem1Y ) = 0;
    virtual HRESULT __stdcall get_AdjustedSystem1Z (
        double * AdjustedSystem1Z ) = 0;
    virtual HRESULT __stdcall get_AdjustedSystem2X (
        double * AdjustedSystem2X ) = 0;
    virtual HRESULT __stdcall get_AdjustedSystem2Y (
        double * AdjustedSystem2Y ) = 0;
    virtual HRESULT __stdcall get_AdjustedSystem2Z (
        double * AdjustedSystem2Z ) = 0;
    virtual HRESULT __stdcall get_System1StdDeviationX (
        double * System1StdDeviationX ) = 0;
    virtual HRESULT __stdcall put_System1StdDeviationX (
        double System1StdDeviationX ) = 0;
    virtual HRESULT __stdcall get_System1StdDeviationY (
        double * System1StdDeviationY ) = 0;
    virtual HRESULT __stdcall put_System1StdDeviationY (
        double System1StdDeviationY ) = 0;
    virtual HRESULT __stdcall get_System1StdDeviationZ (
        double * System1StdDeviationZ ) = 0;
    virtual HRESULT __stdcall put_System1StdDeviationZ (
        double System1StdDeviationZ ) = 0;
    virtual HRESULT __stdcall get_System2StdDeviationX (
        double * System2StdDeviationX ) = 0;
    virtual HRESULT __stdcall put_System2StdDeviationX (
        double System2StdDeviationX ) = 0;
    virtual HRESULT __stdcall get_System2StdDeviationY (
        double * System2StdDeviationY ) = 0;
    virtual HRESULT __stdcall put_System2StdDeviationY (
        double System2StdDeviationY ) = 0;
    virtual HRESULT __stdcall get_System2StdDeviationZ (
        double * System2StdDeviationZ ) = 0;
    virtual HRESULT __stdcall put_System2StdDeviationZ (
        double System2StdDeviationZ ) = 0;
    virtual HRESULT __stdcall get_Type (
        enum LeastSquaresObservationConstants * Type ) = 0;
    virtual HRESULT __stdcall put_Type (
        enum LeastSquaresObservationConstants Type ) = 0;
    virtual HRESULT __stdcall get_LinearModelResidual (
        struct DGMLinearModelResidual * * LinearModelResidual ) = 0;
    virtual HRESULT __stdcall get_NonlinearModelResidual (
        struct DGMNonlinearModelResidual * * NonlinearModelResidual ) = 0;
};

enum LeastSquaresObservationConstants
{
    cslsoCheckPoint = 0,
    cslsoControlPoint = 1
};

struct __declspec(uuid("36f830df-0913-11d1-bc10-080036ea3003"))
DGMLinearModelResidual : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetX))
    double X;
    __declspec(property(get=GetY))
    double Y;
    __declspec(property(get=GetZ))
    double Z;
    __declspec(property(get=GetNorm))
    double Norm;
    __declspec(property(get=GetStandardizedX))
    double StandardizedX;
    __declspec(property(get=GetStandardizedY))
    double StandardizedY;
    __declspec(property(get=GetStandardizedZ))
    double StandardizedZ;
    __declspec(property(get=GetStandardizedNorm))
    double StandardizedNorm;

    //
    // Wrapper methods for error-handling
    //

    double GetX ( );
    double GetY ( );
    double GetZ ( );
    double GetNorm ( );
    double GetStandardizedX ( );
    double GetStandardizedY ( );
    double GetStandardizedZ ( );
    double GetStandardizedNorm ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_X (
        double * X ) = 0;
    virtual HRESULT __stdcall get_Y (
        double * Y ) = 0;
    virtual HRESULT __stdcall get_Z (
        double * Z ) = 0;
    virtual HRESULT __stdcall get_Norm (
        double * Norm ) = 0;
    virtual HRESULT __stdcall get_StandardizedX (
        double * StandardizedX ) = 0;
    virtual HRESULT __stdcall get_StandardizedY (
        double * StandardizedY ) = 0;
    virtual HRESULT __stdcall get_StandardizedZ (
        double * StandardizedZ ) = 0;
    virtual HRESULT __stdcall get_StandardizedNorm (
        double * StandardizedNorm ) = 0;
};

struct __declspec(uuid("36f830e1-0913-11d1-bc10-080036ea3003"))
DGMNonlinearModelResidual : IDispatch
{
    //
    // Property data
    //

    __declspec(property(get=GetSystem1X))
    double System1X;
    __declspec(property(get=GetSystem1Y))
    double System1Y;
    __declspec(property(get=GetSystem1Z))
    double System1Z;
    __declspec(property(get=GetSystem1Norm))
    double System1Norm;
    __declspec(property(get=GetSystem2X))
    double System2X;
    __declspec(property(get=GetSystem2Y))
    double System2Y;
    __declspec(property(get=GetSystem2Z))
    double System2Z;
    __declspec(property(get=GetSystem2Norm))
    double System2Norm;
    __declspec(property(get=GetSystem1StandardizedX))
    double System1StandardizedX;
    __declspec(property(get=GetSystem1StandardizedY))
    double System1StandardizedY;
    __declspec(property(get=GetSystem1StandardizedZ))
    double System1StandardizedZ;
    __declspec(property(get=GetSystem1StandardizedNorm))
    double System1StandardizedNorm;
    __declspec(property(get=GetSystem2StandardizedX))
    double System2StandardizedX;
    __declspec(property(get=GetSystem2StandardizedY))
    double System2StandardizedY;
    __declspec(property(get=GetSystem2StandardizedZ))
    double System2StandardizedZ;
    __declspec(property(get=GetSystem2StandardizedNorm))
    double System2StandardizedNorm;
    __declspec(property(get=GetSys2MinusTransformedSys1X))
    double Sys2MinusTransformedSys1X;
    __declspec(property(get=GetSys2MinusTransformedSys1Y))
    double Sys2MinusTransformedSys1Y;
    __declspec(property(get=GetSys2MinusTransformedSys1Z))
    double Sys2MinusTransformedSys1Z;
    __declspec(property(get=GetSys2MinusTransformedSys1Norm))
    double Sys2MinusTransformedSys1Norm;

    //
    // Wrapper methods for error-handling
    //

    double GetSystem1X ( );
    double GetSystem1Y ( );
    double GetSystem1Z ( );
    double GetSystem1Norm ( );
    double GetSystem2X ( );
    double GetSystem2Y ( );
    double GetSystem2Z ( );
    double GetSystem2Norm ( );
    double GetSystem1StandardizedX ( );
    double GetSystem1StandardizedY ( );
    double GetSystem1StandardizedZ ( );
    double GetSystem1StandardizedNorm ( );
    double GetSystem2StandardizedX ( );
    double GetSystem2StandardizedY ( );
    double GetSystem2StandardizedZ ( );
    double GetSystem2StandardizedNorm ( );
    double GetSys2MinusTransformedSys1X ( );
    double GetSys2MinusTransformedSys1Y ( );
    double GetSys2MinusTransformedSys1Z ( );
    double GetSys2MinusTransformedSys1Norm ( );

    //
    // Raw methods provided by interface
    //

    virtual HRESULT __stdcall get_System1X (
        double * System1X ) = 0;
    virtual HRESULT __stdcall get_System1Y (
        double * System1Y ) = 0;
    virtual HRESULT __stdcall get_System1Z (
        double * System1Z ) = 0;
    virtual HRESULT __stdcall get_System1Norm (
        double * System1Norm ) = 0;
    virtual HRESULT __stdcall get_System2X (
        double * System2X ) = 0;
    virtual HRESULT __stdcall get_System2Y (
        double * System2Y ) = 0;
    virtual HRESULT __stdcall get_System2Z (
        double * System2Z ) = 0;
    virtual HRESULT __stdcall get_System2Norm (
        double * System2Norm ) = 0;
    virtual HRESULT __stdcall get_System1StandardizedX (
        double * System1StandardizedX ) = 0;
    virtual HRESULT __stdcall get_System1StandardizedY (
        double * System1StandardizedY ) = 0;
    virtual HRESULT __stdcall get_System1StandardizedZ (
        double * System1StandardizedZ ) = 0;
    virtual HRESULT __stdcall get_System1StandardizedNorm (
        double * System1StandardizedNorm ) = 0;
    virtual HRESULT __stdcall get_System2StandardizedX (
        double * System2StandardizedX ) = 0;
    virtual HRESULT __stdcall get_System2StandardizedY (
        double * System2StandardizedY ) = 0;
    virtual HRESULT __stdcall get_System2StandardizedZ (
        double * System2StandardizedZ ) = 0;
    virtual HRESULT __stdcall get_System2StandardizedNorm (
        double * System2StandardizedNorm ) = 0;
    virtual HRESULT __stdcall get_Sys2MinusTransformedSys1X (
        double * Sys2MinusTransformedSys1X ) = 0;
    virtual HRESULT __stdcall get_Sys2MinusTransformedSys1Y (
        double * Sys2MinusTransformedSys1Y ) = 0;
    virtual HRESULT __stdcall get_Sys2MinusTransformedSys1Z (
        double * Sys2MinusTransformedSys1Z ) = 0;
    virtual HRESULT __stdcall get_Sys2MinusTransformedSys1Norm (
        double * Sys2MinusTransformedSys1Norm ) = 0;
};

struct CSSpoint
{
    double X;
    double Y;
    double Z;
};

enum CSSReferenceSpaceConstants
{
    gmcssGeographic = 0,
    gmcssProjection = 1
};

enum CSUnitConstants
{
    csuProjectionCoordinate = 0,
    csuGeographicCoordinate = 1,
    csuGeocentricCoordinate = 2,
    csuPaperCoordinate = 3,
    csuHeight = 4,
    csuPaperHeight = 5,
    csuZHeight = 6,
    csuDistance = 7,
    csuPaperDistance = 8,
    csuAngle = 9,
    csuAzimuth = 10,
    csuArea = 11,
    csuPaperArea = 12,
    csuVolume = 13,
    csuPaperVolume = 14,
    csuTime = 15,
    csuBearing = 16
};

struct CSStransDesc
{
    enum CSPointConstants InputPointType;
    long InputSpaceID;
    enum CSPointConstants OutputPointType;
    long OutputSpaceID;
};

enum UnitConstants
{
    igDistanceMeter = 59,
    igDistanceNanometer = 60,
    igDistanceMillimeter = 61,
    igDistanceCentimeter = 62,
    igDistanceKilometer = 63,
    igDistanceInch = 64,
    igDistanceFoot = 65,
    igDistanceYard = 66,
    igDistanceMile = 67,
    igDistanceTenth = 68,
    igDistanceHundredth = 69,
    igDistanceThousandth = 70,
    igDistanceRod = 71,
    igDistancePole = 72,
    igDistanceLink = 73,
    igDistanceChain = 74,
    igDistancePoint = 75,
    igDistanceFurlong = 76,
    igAngleRadian = 77,
    igAngleDegree = 78,
    igAngleMinute = 79,
    igAngleSecond = 80,
    igAngleGradian = 81,
    igAngleRevolution = 82,
    igMassKilogram = 83,
    igMassGram = 84,
    igMassMilligram = 85,
    igMassMegagram = 86,
    igMassGrain = 87,
    igMassSlug = 88,
    igMassPoundMass = 89,
    igMassSlinch = 90,
    igMassOunce = 91,
    igMassMetricTon = 92,
    igMassLongTon = 93,
    igMassShortTon = 94,
    igTimeSecond = 95,
    igTimeMinute = 96,
    igTimeHour = 97,
    igTimeDay = 98,
    igTimeWeek = 99,
    igTimeYear = 100,
    igTimeMillisecond = 101,
    igTimeNanosecond = 102,
    igTemperatureKelvin = 103,
    igTemperatureFahrenheit = 104,
    igTemperatureCelcius = 105,
    igTemperatureRankine = 106,
    igElectricChargeAmpere = 107,
    igLuminousIntensityCandela = 108,
    igAmountOfSubstanceMole = 109,
    igSolidAngleSteradian = 110,
    igAngularAccelerationRadianPerSqrSecond = 111,
    igAngularAccelerationDegreePerSqrSecond = 112,
    igAngularAccelerationCyclePerSqrSecond = 113,
    igAngularMomentumKilogramSqrMeterPerSecond = 114,
    igAngularVelocityRadianPerSecond = 115,
    igAngularVelocityRadianPerMinute = 116,
    igAngularVelocityRadianPerHour = 117,
    igAngularVelocityCyclePerSecond = 118,
    igAngularVelocityCyclePerMinute = 119,
    igAngularVelocityCyclePerHour = 120,
    igAngularVelocityDegreePerSecond = 121,
    igAngularVelocityDegreePerMinute = 122,
    igAngularVelocityDegreePerHour = 123,
    igAreaSquareMeter = 124,
    igAreaSquareMillimeter = 125,
    igAreaSquareCentimeter = 126,
    igAreaSquareKilometer = 127,
    igAreaSquareInch = 128,
    igAreaSquareFoot = 129,
    igAreaSquareYard = 130,
    igAreaSquareMile = 131,
    igAreaAcre = 132,
    igBodyForceNewtonPerCubicMeter = 133,
    igBodyForceNewtonPerCubicCentimeter = 134,
    igBodyForceNewtonPerCubicMillimeter = 135,
    igBodyForceKilonewtonPerCubicMeter = 136,
    igBodyForcePoundForcePerCubicInch = 137,
    igBodyForcePoundForcePerCubicFoot = 138,
    igCoefficientOfThermalExpansionPerKelvin = 139,
    igCoefficientOfThermalExpansionPerCelcius = 140,
    igCoefficientOfThermalExpansionPerFahrenheit = 141,
    igCoefficientOfThermalExpansionPerRankine = 142,
    igDensityKilogramPerCubicMeter = 143,
    igDensityKilogramPerCubicMillimeter = 144,
    igDensityKilogramPerCubicCentimeter = 145,
    igDensityPoundMassPerCubicFoot = 146,
    igDensityPoundMassPerCubicInch = 147,
    igDensitySlugPerCubicFoot = 148,
    igDensitySlinchPerCubicInch = 149,
    igElectricalCapacitanceFarad = 150,
    igElectricalConductanceSiemens = 151,
    igElectricalFieldStrengthVoltPerMeter = 152,
    igElectricalPotentialVolt = 153,
    igElectricalResistanceOhm = 154,
    igEnergyJoule = 155,
    igEnergyMicrojoule = 156,
    igEnergyKilojoule = 157,
    igEnergyWattSecond = 158,
    igEnergyWattHour = 159,
    igEnergyKilowattHour = 160,
    igEnergyInchPoundForce = 161,
    igEnergyFootPoundForce = 162,
    igEnergyBtu = 163,
    igEnergyErg = 164,
    igEnergyElectronVolt = 165,
    igEntropyJoulePerKelvin = 166,
    igFilmCoefficientWattPerSqrMeterKelvin = 167,
    igFilmCoefficientBtuPerHourSqrFootFahrenheit = 168,
    igFilmCoefficientFootPoundPerSqrFootFahrenheit = 169,
    igFilmCoefficientInchPoundPerSqrInchFahrenheit = 170,
    igForceNewton = 171,
    igForceNanonewton = 172,
    igForceMillinewton = 173,
    igForceKilonewton = 174,
    igForcePoundForce = 175,
    igForceDyne = 176,
    igForceKip = 177,
    igForcePerAreaPascal = 178,
    igForcePerAreaMillipascal = 179,
    igForcePerAreaKilopascal = 180,
    igForcePerAreaMegapascal = 181,
    igForcePerAreaPoundForcePerSqrInch = 182,
    igForcePerAreaKipPerSqrInch = 183,
    igForcePerAreaPoundForcePerSqrFoot = 184,
    igForcePerAreaKipPerSqrFoot = 185,
    igForcePerAreaBar = 186,
    igForcePerAreaMillibar = 187,
    igForcePerAreaAtmosphere = 188,
    igForcePerDistanceNewtonPerMeter = 189,
    igForcePerDistanceNewtonPerMillimeter = 190,
    igForcePerDistanceNewtonPerCentimeter = 191,
    igForcePerDistanceKilonewtonPerMeter = 192,
    igForcePerDistancePoundForcePerInch = 193,
    igForcePerDistancePoundForcePerFoot = 194,
    igForcePerDistanceKipPerInch = 195,
    igForcePerDistanceKipPerFoot = 196,
    igForcePerDistanceDynePerMeter = 197,
    igForcePerDistanceDynePerMillimeter = 198,
    igFrequencyPerSecond = 199,
    igFrequencyPerMinute = 200,
    igFrequencyPerHour = 201,
    igHeatCapacityJoulePerKilogramKelvin = 202,
    igHeatCapacityBtuPerPoundMassFahrenheit = 203,
    igHeatFluxPerAreaWattPerSqrMeter = 204,
    igHeatFluxPerAreaKilowattPerSqrMeter = 205,
    igHeatFluxPerAreaInchPoundForcePerSecondSqrInch = 206,
    igHeatFluxPerAreaFootPoundForcePerSecondSqrFoot = 207,
    igHeatFluxPerAreaBtuPerHourSqrFoot = 208,
    igHeatFluxPerAreaHorsepowerPerSqrFoot = 209,
    igHeatFluxPerDistanceWattPerMeter = 210,
    igHeatFluxPerDistanceKilowattPerMeter = 211,
    igHeatFluxPerDistanceMicrowattPerMeter = 212,
    igHeatFluxPerDistanceMicrowattPerMillimeter = 213,
    igHeatFluxPerDistanceInchPoundForcePerSecondInch = 214,
    igHeatFluxPerDistanceBtuPerHourFoot = 215,
    igHeatFluxPerDistanceHorsepowerPerFoot = 216,
    igHeatSourceWattPerCubicMeter = 217,
    igHeatSourceKilowattPerCubicMeter = 218,
    igHeatSourceInchPoundForcePerSecondCubicInch = 219,
    igHeatSourceFootPoundForcePerSecondCubicFoot = 220,
    igHeatSourceBtuPerHourCubicFoot = 221,
    igHeatSourceHorsepowerPerCubicFoot = 222,
    igIlluminanceLux = 223,
    igLinearAccelerationMeterPerSqrSecond = 224,
    igLinearAccelerationKilometerPerSqrSecond = 225,
    igLinearAccelerationMillimeterPerSqrSecond = 226,
    igLinearAccelerationCentimeterPerSqrSecond = 227,
    igLinearAccelerationInchPerSqrSecond = 228,
    igLinearAccelerationFootPerSqrSecond = 229,
    igLinearAccelerationMilePerSqrSecond = 230,
    igLinearAccelerationMilePerSqrHour = 231,
    igLinearAccelerationKilometerPerSqrHour = 232,
    igLinearPerAngularMeterPerRadian = 233,
    igLinearPerAngularMeterPerRevolution = 234,
    igLinearPerAngularMillimeterPerRevolution = 235,
    igLinearPerAngularInchPerRevolution = 236,
    igLinearPerAngularFootPerRevolution = 237,
    igLinearVelocityMeterPerSecond = 238,
    igLinearVelocityMillimeterPerSecond = 239,
    igLinearVelocityCentimeterPerSecond = 240,
    igLinearVelocityKilometerPerSecond = 241,
    igLinearVelocityKilometerPerHour = 242,
    igLinearVelocityInchPerSecond = 243,
    igLinearVelocityFootPerSecond = 244,
    igLinearVelocityMilePerSecond = 245,
    igLinearVelocityMilePerHour = 246,
    igLuminousFluxLumen = 247,
    igMagneticFieldStrengthAmperePerMeter = 248,
    igMagneticFluxWeber = 249,
    igMagneticFluxDensityTesla = 250,
    igMassFlowRateKilogramPerSecond = 251,
    igMassFlowRateGramPerSecond = 252,
    igMassFlowRateMegagramPerSecond = 253,
    igMassFlowRatePoundMassPerSecond = 254,
    igMassFlowRateSlugPerSecond = 255,
    igMassFlowRateSlinchPerSecond = 256,
    igMassMomentOfInertiaKilogramSqrMeter = 257,
    igMassMomentOfInertiaKilogramSqrMillimeter = 258,
    igMassMomentOfInertiaGramSqrMillimeter = 259,
    igMassMomentOfInertiaGramSqrCentimeter = 260,
    igMassMomentOfInertiaSlugSqrFoot = 261,
    igMassMomentOfInertiaSlugSqrInch = 262,
    igMassMomentOfInertiaSlinchSqrInch = 263,
    igMassMomentOfInertiaPoundMassSqrInch = 264,
    igMassMomentOfInertiaPoundMassSqrFoot = 265,
    igMassPerAreaKilogramPerSqrMeter = 266,
    igMassPerAreaKilogramPerSqrMillimeter = 267,
    igMassPerAreaGramPerSqrMillimeter = 268,
    igMassPerAreaGramPerSqrCentimeter = 269,
    igMassPerAreaSlugPerSqrInch = 270,
    igMassPerAreaSlugPerSqrFoot = 271,
    igMassPerAreaSlinchPerSqrInch = 272,
    igMassPerAreaPoundMassPerSqrInch = 273,
    igMassPerAreaPoundMassPerSqrFoot = 274,
    igMassPerLengthKilogramPerMeter = 275,
    igMassPerLengthKilogramPerMillimeter = 276,
    igMassPerLengthGramPerMillimeter = 277,
    igMassPerLengthGramPerCentimeter = 278,
    igMassPerLengthSlugPerInch = 279,
    igMassPerLengthSlugPerFoot = 280,
    igMassPerLengthSlinchPerInch = 281,
    igMassPerLengthPoundMassPerInch = 282,
    igMassPerLengthPoundMassPerFoot = 283,
    igMomentumKilogramMeterPerSecond = 284,
    igPerDistancePerMeter = 285,
    igPerDistancePerNanometer = 286,
    igPerDistancePerMillimeter = 287,
    igPerDistancePerCentimeter = 288,
    igPerDistancePerKilometer = 289,
    igPerDistancePerInch = 290,
    igPerDistancePerFoot = 291,
    igPerDistancePerYard = 292,
    igPerDistancePerMile = 293,
    igPerDistancePerTenth = 294,
    igPerDistancePerHundredth = 295,
    igPerDistancePerMil = 296,
    igPowerWatt = 297,
    igPowerKilowatt = 298,
    igPowerMicrowatt = 299,
    igPowerInchPoundForcePerSecond = 300,
    igPowerFootPoundForcePerSecond = 301,
    igPowerBtuPerHour = 302,
    igPowerHorsepower = 303,
    igQuantityOfElectricityCoulomb = 304,
    igRadiantIntensityWattPerSteradian = 305,
    igRotationalStiffnessNewtonMeterPerRadian = 306,
    igRotationalStiffnessNewtonMeterPerDegree = 307,
    igRotationalStiffnessNewtonMillimeterPerRadian = 308,
    igRotationalStiffnessNewtonMillimeterPerDegree = 309,
    igRotationalStiffnessKilonewtonMeterPerRadian = 310,
    igRotationalStiffnessKilonewtonMeterPerDegree = 311,
    igRotationalStiffnessPoundForceInchPerRadian = 312,
    igRotationalStiffnessPoundForceInchPerDegree = 313,
    igRotationalStiffnessPoundForceFootPerRadian = 314,
    igRotationalStiffnessPoundForceFootPerDegree = 315,
    igSecondMomentOfAreaMeterToFourth = 316,
    igSecondMomentOfAreaMillimeterToFourth = 317,
    igSecondMomentOfAreaCentimeterToFourth = 318,
    igSecondMomentOfAreaInchToFourth = 319,
    igSecondMomentOfAreaFootToFourth = 320,
    igThermalConductivityWattPerMeterCelcius = 321,
    igThermalConductivityKilowattPerMeterCelcius = 322,
    igThermalConductivityBtuPerHourFahrenheit = 323,
    igThermalConductivityInchPoundForcePerSecondInchFahrenheit = 324,
    igDynamicViscosityPascalSecond = 325,
    igDynamicViscosityKilopascalSecond = 326,
    igDynamicViscosityMegapascalSecond = 327,
    igDynamicViscosityPoundForceSecondPerSqrInch = 328,
    igKinematicViscositySqrMeterPerSecond = 329,
    igKinematicViscositySqrMillimeterPerSecond = 330,
    igKinematicViscositySqrCentimeterPerSecond = 331,
    igKinematicViscositySqrInchPerSecond = 332,
    igKinematicViscositySqrFootPerSecond = 333,
    igVolumeCubicMeter = 334,
    igVolumeCubicMillimeter = 335,
    igVolumeLiter = 336,
    igVolumeMilliliter = 337,
    igVolumeCubicInch = 338,
    igVolumeCubicFoot = 339,
    igVolumeCubicYard = 340,
    igVolumeGallon = 341,
    igVolumeQuart = 342,
    igVolumePint = 343,
    igVolumeFluidOunce = 344,
    igScalarNull = 346,
    igVolumeFlowRateCubicMeterPerSecond = 347,
    igVolumeFlowRateCubicMillimeterPerSecond = 348,
    igVolumeFlowRateLiterPerSecond = 349,
    igVolumeFlowRateMilliliterPerSecond = 350,
    igVolumeFlowRateCubicInchPerSecond = 351,
    igVolumeFlowRateCubicFootPerSecond = 352,
    igVolumeFlowRateCubicYardPerSecond = 353,
    igVolumeFlowRateGallonPerSecond = 354,
    igVolumeFlowRateGallonPerMinute = 355,
    igElectricalInductanceHenry = 356,
    igAngleDegreeSymbol = 357,
    igAngleMinuteSymbol = 358,
    igAngleSecondSymbol = 359,
    igDistanceFootSymbol = 360,
    igDistanceInchSymbol = 361,
    igAreaHectare = 362,
    igForcePerAreaNewtonPerSqrMillimeter = 363,
    igDynamicViscosityPoise = 364,
    igDynamicViscosityCentipoise = 365,
    igVolumeCubicCentimeter = 366,
    igAngleDegreesMinutesSeconds = 65536,
    igAngleHPFormat = 65537,
    igDistanceSurveyInchTwoCharacters = 65538,
    igDistanceSurveyKilofootTwoCharacters = 65539,
    igDistanceSurveyFootTwoCharacters = 65540,
    igDistanceNauticalMile = 65541,
    igDistanceKilofoot = 65542,
    igDistanceSurveyInch = 65543,
    igDistanceSurveyFoot = 65544,
    igDistanceSurveyKilofoot = 65545,
    igAreaDeciare = 65546,
    igAreaAres = 65547,
    igAreaCentare = 65548,
    igAreaSquareRod = 65549,
    igAreaPerch = 65550,
    igAreaSquareChain = 65551,
    igAreaSquareLink = 65552
};

struct CSSedge
{
    struct CSStransDesc TransDesc;
    double Cost;
};

enum MatrixConstants
{
    gmmIdentity = 1,
    gmmScale = 2,
    gmmTranslation = 3,
    gmmScalePlusTranslation = 4,
    gmmTwoByTwo = 5,
    gmmTwoByTwoPlusTranslation = 6,
    gmmGeneral = 7,
    gmmGeneralMinusProjAndOverallScale = 8
};

struct __declspec(uuid("28607600-106d-11ce-8943-08003601e529"))
UnitAndFormatSpec;
    // [ default ] dispinterface UnitFormatSpec
    // interface IGMUnitFormatSpec

struct __declspec(uuid("f9796220-1876-11ce-9cb5-08003601c1af"))
CoordSystem;
    // [ default ] dispinterface DGMCoordSystem
    // interface IGMCoordSystem

struct __declspec(uuid("0f02bc00-cbca-11d0-afc5-08003601e529"))
DatumTransformation;
    // [ default ] interface DGMDatumTransformation

struct __declspec(uuid("535f6210-2996-11ce-9bc7-08003622ff01"))
CoordSystemsMgr;
    // [ default ] dispinterface DGMCoordSystemsMgr
    // interface IGMCoordSystemsMgr

struct __declspec(uuid("bb814580-c2dd-11ce-af4f-08003601e529"))
UnitsOfMeasure;
    // [ default ] dispinterface DGMUnitsOfMeasure
    // interface IGMUnitsOfMeasureTables

struct __declspec(uuid("329cf2c0-f6e2-11d0-a26d-08003601d502"))
BursaWolf;
    // [ default ] interface DGMBursaWolf

struct __declspec(uuid("aae227b0-f6e2-11d0-a26d-08003601d502"))
ComplexPolynomial;
    // [ default ] interface DGMComplexPolynomial

struct __declspec(uuid("d5ed1cc0-f6e2-11d0-a26d-08003601d502"))
MultipleRegression;
    // [ default ] interface DGMMultipleRegression

struct __declspec(uuid("fa3adf20-f6e2-11d0-a26d-08003601d502"))
SecondDegreePolynomial;
    // [ default ] interface DGMSecondDegreePolynomial

struct __declspec(uuid("10cf9570-f6e3-11d0-a26d-08003601d502"))
StandardMolodensky;
    // [ default ] interface DGMStandardMolodensky

struct __declspec(uuid("75692b94-f328-11d0-bc0c-080036ea3003"))
LeastSquares;
    // [ default ] interface DGMLeastSquares

struct __declspec(uuid("0fdda0f9-f967-11d0-bc0c-080036ea3003"))
SingleParameterConstraints;
    // [ default ] interface DGMSingleParameterConstraints

struct __declspec(uuid("cca27ffe-08fc-11d1-bc0f-080036ea3003"))
SingleParameterConstraint;
    // [ default ] interface DGMSingleParameterConstraint

struct __declspec(uuid("cca27ffc-08fc-11d1-bc0f-080036ea3003"))
Observations;
    // [ default ] interface DGMObservations

struct __declspec(uuid("cca28000-08fc-11d1-bc0f-080036ea3003"))
Observation;
    // [ default ] interface DGMObservation

struct __declspec(uuid("36f830de-0913-11d1-bc10-080036ea3003"))
LinearModelResidual;
    // [ default ] interface DGMLinearModelResidual

struct __declspec(uuid("36f830e0-0913-11d1-bc10-080036ea3003"))
NonlinearModelResidual;
    // [ default ] interface DGMNonlinearModelResidual

//
// Named GUID constants initializations
//

extern "C" const GUID __declspec(selectany) LIBID_PCSS =
    {0x7d377100,0x8137,0x11d0,{0x91,0xc4,0x08,0x00,0x36,0x01,0xe0,0xc4}};
extern "C" const GUID __declspec(selectany) IID_IGMProjAlgorithmStrings =
    {0x887bc700,0xd9a4,0x11ce,{0x96,0x56,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_ProjAlgorithmStrings =
    {0x887bc702,0xd9a4,0x11ce,{0x96,0x56,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMGeodeticDatumStrings =
    {0x9a107e90,0xe0b9,0x11ce,{0x96,0x57,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_GeodeticDatumStrings =
    {0x9a107e91,0xe0b9,0x11ce,{0x96,0x57,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMEllipsoidStrings =
    {0x9a107e92,0xe0b9,0x11ce,{0x96,0x57,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_EllipsoidStrings =
    {0x9a107e94,0xe0b9,0x11ce,{0x96,0x57,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMProjSpace =
    {0x803e6bf0,0xb312,0x11ce,{0x96,0x4d,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_ProjSpace =
    {0x803e6bf2,0xb312,0x11ce,{0x96,0x4d,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMGeogSpace =
    {0x76416de0,0xc82d,0x11ce,{0x96,0x53,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_GeogSpace =
    {0x76416de1,0xc82d,0x11ce,{0x96,0x53,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMUnitFormatSpec =
    {0xff65cae0,0x4e8a,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_UnitFormatSpec =
    {0x2457b700,0x4e96,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMPaperSpace =
    {0xd74800a0,0x3762,0x11d0,{0xaf,0x9c,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) DIID_PaperSpace =
    {0xd74800a1,0x3762,0x11d0,{0xaf,0x9c,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) IID_IGMRefSpaceMgr =
    {0xc85d2720,0x49a1,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_RefSpaceMgr =
    {0x06e855c0,0x49a2,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMCoordSystem =
    {0xa94cd060,0x33df,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_DGMCoordSystem =
    {0x15626fd0,0x33e0,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_DGMDatumTransformation =
    {0xe3e00be0,0xcb04,0x11d0,{0xaf,0xc5,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) IID_DGMBursaWolf =
    {0x75184600,0xf3c4,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_DGMComplexPolynomial =
    {0xbd405000,0xf3c9,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_DGMStringCollection =
    {0x6d3d6f80,0xf7b9,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_DGMMultipleRegression =
    {0xc60b4cb0,0xf3ca,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_DGMSecondDegreePolynomial =
    {0x46935d20,0xf3cb,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_DGMStandardMolodensky =
    {0x2a76de30,0xf3c5,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_IGMLink =
    {0x7080a269,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) DIID_Link =
    {0x7080a26a,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_IGMLinks =
    {0x7080a264,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) DIID_Links =
    {0x7080a265,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_IGMTransLinks =
    {0x7080a267,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) DIID_TransLinks =
    {0x7080a268,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_IGMAltCoordSystemPath =
    {0x7080a262,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) DIID_AltCoordSystemPath =
    {0x7080a263,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_IGMAltCoordSystemPaths =
    {0x7080a260,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) DIID_AltCoordSystemPaths =
    {0x7080a261,0x80f3,0x11cf,{0xa1,0x83,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) IID_IGMCoordSystemsMgr =
    {0xe4b5e810,0x3de4,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) DIID_DGMCoordSystemsMgr =
    {0xc8f007a0,0x3de6,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) IID_IGMUnitIDs =
    {0x116f4080,0xe3d7,0x11cf,{0xaf,0x86,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) DIID_UnitIDs =
    {0x116f4081,0xe3d7,0x11cf,{0xaf,0x86,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) IID_IGMUnitsOfMeasureTables =
    {0xd009af70,0xdcc2,0x11ce,{0xaf,0x56,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) DIID_DGMUnitsOfMeasure =
    {0xd009af71,0xdcc2,0x11ce,{0xaf,0x56,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) IID_DGMLeastSquares =
    {0xe054829e,0xf325,0x11d0,{0xbc,0x0c,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) IID_DGMSingleParameterConstraints =
    {0x0fdda0f8,0xf967,0x11d0,{0xbc,0x0c,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) IID_DGMSingleParameterConstraint =
    {0xcca27fff,0x08fc,0x11d1,{0xbc,0x0f,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) IID_DGMObservations =
    {0xcca27ffd,0x08fc,0x11d1,{0xbc,0x0f,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) IID_DGMObservation =
    {0xcca28001,0x08fc,0x11d1,{0xbc,0x0f,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) IID_DGMLinearModelResidual =
    {0x36f830df,0x0913,0x11d1,{0xbc,0x10,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) IID_DGMNonlinearModelResidual =
    {0x36f830e1,0x0913,0x11d1,{0xbc,0x10,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_UnitAndFormatSpec =
    {0x28607600,0x106d,0x11ce,{0x89,0x43,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) CLSID_CoordSystem =
    {0xf9796220,0x1876,0x11ce,{0x9c,0xb5,0x08,0x00,0x36,0x01,0xc1,0xaf}};
extern "C" const GUID __declspec(selectany) CLSID_DatumTransformation =
    {0x0f02bc00,0xcbca,0x11d0,{0xaf,0xc5,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) CLSID_CoordSystemsMgr =
    {0x535f6210,0x2996,0x11ce,{0x9b,0xc7,0x08,0x00,0x36,0x22,0xff,0x01}};
extern "C" const GUID __declspec(selectany) CLSID_UnitsOfMeasure =
    {0xbb814580,0xc2dd,0x11ce,{0xaf,0x4f,0x08,0x00,0x36,0x01,0xe5,0x29}};
extern "C" const GUID __declspec(selectany) CLSID_BursaWolf =
    {0x329cf2c0,0xf6e2,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) CLSID_ComplexPolynomial =
    {0xaae227b0,0xf6e2,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) CLSID_MultipleRegression =
    {0xd5ed1cc0,0xf6e2,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) CLSID_SecondDegreePolynomial =
    {0xfa3adf20,0xf6e2,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) CLSID_StandardMolodensky =
    {0x10cf9570,0xf6e3,0x11d0,{0xa2,0x6d,0x08,0x00,0x36,0x01,0xd5,0x02}};
extern "C" const GUID __declspec(selectany) CLSID_LeastSquares =
    {0x75692b94,0xf328,0x11d0,{0xbc,0x0c,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_SingleParameterConstraints =
    {0x0fdda0f9,0xf967,0x11d0,{0xbc,0x0c,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_SingleParameterConstraint =
    {0xcca27ffe,0x08fc,0x11d1,{0xbc,0x0f,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_Observations =
    {0xcca27ffc,0x08fc,0x11d1,{0xbc,0x0f,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_Observation =
    {0xcca28000,0x08fc,0x11d1,{0xbc,0x0f,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_LinearModelResidual =
    {0x36f830de,0x0913,0x11d1,{0xbc,0x10,0x08,0x00,0x36,0xea,0x30,0x03}};
extern "C" const GUID __declspec(selectany) CLSID_NonlinearModelResidual =
    {0x36f830e0,0x0913,0x11d1,{0xbc,0x10,0x08,0x00,0x36,0xea,0x30,0x03}};

#pragma pack(pop)
