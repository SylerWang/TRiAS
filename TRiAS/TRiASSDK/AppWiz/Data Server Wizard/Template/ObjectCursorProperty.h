// $Header: $
// Copyright© 1998-$$year$$ $$company$$, All rights reserved
// Created: $$date_n_time$$ 
//
// This file was generated by the TRiASDB Data Server Wizard $$this_version$$
//
$$IF(EMIT_WARRANTIES)
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY 
// KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR 
// PURPOSE.
//
$$ENDIF // EMIT_WARRANTIES
// @doc
// @module $$root$$CursorProperty.h | Declaration of the <c C$$safe_root$$ObjectCursorProperty> class

#if !defined(_$$SAFE_ROOT$$OBJECTCURSORPROPERTY_H__$$GUID_OBJECTCURSORPROPERTY_H$$__INCLUDED_)
#define _$$SAFE_ROOT$$OBJECTCURSORPROPERTY_H__$$GUID_OBJECTCURSORPROPERTY_H$$__INCLUDED_

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

// Header include diagnostics
#if defined(_TRIAS_DBG_HEADER_DIAGNOSTICS)
#pragma message(__TIME__": include " __FILE__ )
#endif

#include "resource.h"       // main symbols

/////////////////////////////////////////////////////////////////////////////
// C$$safe_root$$ObjectCursorProperty
class ATL_NO_VTABLE C$$safe_root$$ObjectCursorProperty : 
	public CComObjectRootEx<CComObjectThreadModel>,
	public CComCoClass<C$$safe_root$$ObjectCursorProperty, &CLSID_$$safe_root$$ObjectCursorProperty>,
	public ITRiASPropertyCallback,
	public IObjectWithSite
{
public:
	C$$safe_root$$ObjectCursorProperty()
	{
	}

$$IF(EMIT_OBJECTCOUNT_DEBUG)
	_ATLX_DEBUG_OBJECTCOUNT_IMPL(C$$safe_root$$ObjectCursorProperty)
$$ENDIF // IF(EMIT_OBJECTCOUNT_DEBUG)

	DECLARE_REGISTRY_RESOURCEID(IDR_$$SAFE_ROOT$$OBJECTCURSORPROPERTY_RGS)
	DECLARE_NOT_AGGREGATABLE(C$$safe_root$$ObjectCursorProperty)

	BEGIN_COM_MAP(C$$safe_root$$ObjectCursorProperty)
		COM_INTERFACE_ENTRY(ITRiASPropertyCallback)
		COM_INTERFACE_ENTRY(IObjectWithSite)
	END_COM_MAP()

	HRESULT FinalConstruct()
	{
		return S_OK;
	}
	void FinalRelease();

// ITRiASPropertyCallback
public:
	STDMETHOD(PutValue)(BSTR Name, VARIANT newVal);
	STDMETHOD(GetValue)(BSTR Name, VARIANT *pVal);
	STDMETHOD(PutType)(BSTR Name, PROPERTY_TYPE newVal);
	STDMETHOD(GetType)(BSTR Name, PROPERTY_TYPE *pVal);
	STDMETHOD(GetValueAndType)(BSTR Name, VARIANT *pVal, PROPERTY_TYPE *pType);
	STDMETHOD(PutValueAndType)(BSTR Name, VARIANT Val, PROPERTY_TYPE Type);
	STDMETHOD(Refresh)(BSTR Name);

// IObjectWithSite
	STDMETHOD(SetSite)(IUnknown *pISite);
	STDMETHOD(GetSite)(REFIID riid, void **ppvSite);

protected:
	HRESULT GetObjectCursorMap (ITRiASObjectHandleMap **ppIMap);
	HRESULT SetCursor();
	HRESULT ResetCursor();

private:
	WTRiASObject m_Obj;		// hängt an diesem Objekt
	CComVariant m_Value;	// Wert des ObjektCursors
};

#endif // !defined(_$$SAFE_ROOT$$OBJECTCURSORPROPERTY_H__$$GUID_OBJECTCURSORPROPERTY_H$$__INCLUDED_)
