// TRiASHelper.idl : IDL source for objects in TRiAS03.dll
//

#include <basetsd.h>

#if !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100
#include <TRiASDBDispIds.h>
#endif // !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100

// forward declarations
interface DMatchString;
interface DSearchObjects;

interface ITRiASRegistryHelper;
interface IInitScriptPropAct;
#if !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100
interface ITRiASLockFeature;
#endif // !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100

///////////////////////////////////////////////////////////////////////////////
// Interface für RegistryHelper
cpp_quote("#ifndef _TRIASREGISTRYHELPER_DEFINED")
cpp_quote("#define _TRIASREGISTRYHELPER_DEFINED")
[
	object,
	uuid(0796388C-3123-101C-BB62-00AA0018497C),
	dual,
	helpstring("ITRiASRegistryHelper Interface"),
	pointer_default(unique)
]
interface ITRiASRegistryHelper : IDispatch
{
	import "oaidl.idl";

//////////////////////////////////////////////////////////
// Script based methods
//////////////////////////////////////////////////////////
	[id(100)] HRESULT AddReplacement([in] BSTR key, [in] BSTR item);
	[id(101)] HRESULT ClearReplacements();
	[id(102)] HRESULT ResourceRegister([in] BSTR resFileName, [in] VARIANT ID, [in] VARIANT type);
	[id(103)] HRESULT ResourceUnregister([in] BSTR resFileName, [in] VARIANT ID, [in] VARIANT type);
	[id(104)] HRESULT FileRegister([in] BSTR fileName);
	[id(105)] HRESULT FileUnregister([in] BSTR fileName);
	[id(106)] HRESULT StringRegister([in] BSTR data);
	[id(107)] HRESULT StringUnregister([in] BSTR data);

//////////////////////////////////////////////////////////
// Key based methods
//////////////////////////////////////////////////////////
	[id(108)] HRESULT AddKey([in] BSTR keyName);
	[id(109)] HRESULT DeleteKey([in] BSTR keyName);
	[id(110)] HRESULT AddKeyValue([in] BSTR keyName, [in] BSTR valueName, [in] VARIANT value);
	[id(111)] HRESULT GetKeyValue([in] BSTR keyName, [in] BSTR valueName, [out, retval] VARIANT* value);
	[id(112)] HRESULT SetKeyValue([in] BSTR keyName, [in] BSTR valueName, [in] VARIANT value);
};
cpp_quote("#endif // _TRIASREGISTRYHELPER_DEFINED")

///////////////////////////////////////////////////////////////////////////////
// Registrybehandlung für eine TRiASExtension
cpp_quote("#ifndef _REGISTERTRIASEXTENSION_DEFINED")
cpp_quote("#define _REGISTERTRIASEXTENSION_DEFINED")
[
	uuid(079638E8-3123-101C-BB62-00AA0018497C),
	helpstring("Registrierung eines Objektes als TRiAS® Zusatzmodul."),
	pointer_default(unique)
]
interface IRegisterTRiASExtension : IUnknown
{
	import "oaidl.idl";

	typedef [public] enum _tagEXTENSIONFLAGS {
		EXTENSIONFLAGS_NoFlags = 0x00,
		EXTENSIONFLAGS_Global = 0x01,
		EXTENSIONFLAGS_UnLoadable = 0x02,
		EXTENSIONFLAGS_Visible = 0x04,
		EXTENSIONFLAGS_CanImport = 0x08,
		EXTENSIONFLAGS_Aggregate = 0x10,
	} EXTENSIONFLAGS;
	
	[helpstring("Registrieren eines Objektes als TRiAS Zusatzmodul.")] 
		HRESULT RegisterTRiASExtension([in] BSTR bstrTarget, [in, out] BSTR *pbstrName, [in, out] BSTR *pbstrID, [in, out] EXTENSIONFLAGS *prgFlags);
	[helpstring("Registrieren eines Objektes als projektbezogenes TRiAS Zusatzmodul.")] 
		HRESULT RegisterProjectExtension([in] long hPr, [in] BSTR bstrName, [in] BSTR bstrID, [in] BSTR bstrTarget);
	[helpstring("Entfernen der Registrierung für ein Objekt als TRiAS Zusatzmodul.")] 
		HRESULT UnRegisterTRiASExtension([in] BSTR bstrName, [in] BSTR bstrID, [in] long hPr);
};
cpp_quote("#endif // _REGISTERTRIASEXTENSION_DEFINED")

#include <idl/EnumONr.idl>
#include <idl/ProgInd2.idl>
#include <idl/MatchString.idl>

///////////////////////////////////////////////////////////////////////////////
// Interface für ObjektEigenschaft, das beim Suchen von Objekten hilft,
// sollte von jeder Objekteigenschaft implementiert werden
interface IEnumObjectsByNumber;		// forward decl

[
	object,
	uuid(079638C4-3123-101C-BB62-00AA0018497C),
	dual, oleautomation,
	helpstring("DSearchObjects Interface"),
	pointer_default(unique)
]
interface DSearchObjects : IDispatch
{
	import "oaidl.idl";

	typedef enum tagSEARCHMODE {
	// Matching
		SEARCHMODE_NORMAL = 0,
		SEARCHMODE_REGEXPR = 0x01,
		SEARCHMODE_LIKE = 0x02,
		SEARCHMODE_ONLYEXISTANCE = 0x04,

	// MatchMode
		SEARCHMODE_FULLMATCH = 0,
		SEARCHMODE_PARTIALMATCH = 0x0100,
		SEARCHMODE_PARTIALMATCHBOB = 0x0200,
		SEARCHMODE_NOMATCHCASE = 0x0400,
		SEARCHMODE_NEGATERESULT = 0x0800,

	// alle Flags zusammen
		SEARCHMODE_SEARCHMODIFIERS = 0x0F00,
	} SEARCHMODE;

	[id(300)] HRESULT ConsiderSearch (
		[in] BSTR bstrToMatch, [in] SEARCHMODE rgFlags, [in] ULONG ulCnt);
	[id(301)] HRESULT SearchObjects (
		[in] BSTR bstrToMatch, [in] SEARCHMODE rgFlags,
		[out] IEnumObjectsByNumber **ppvObj);
};

[
	object,
	uuid(50AECBE6-46E8-11D2-9EBF-006008447800),
	helpstring("IInitScriptPropAct Interface"),
	pointer_default(unique)
]
interface IInitScriptPropAct : IUnknown
{
	[helpstring("Legt den zu verwendenden BasicScript fest.")] HRESULT InitScript ([in] BSTR Script, [in] INT_PTR hInst, [in] UINT uiResID);
};

// Initialisierungsinterface für ein Objekt, welches als äußeres Aggregationsobjekt
// verwendet werden soll
[
	object,
	uuid(58DAD7D6-6F34-11D2-9EEC-006008447800),
	helpstring("IInitInnerObject Interface"),
	pointer_default(unique)
]
interface IInitInnerObject : IUnknown
{
	[helpstring("Vorgeben des inneren Objektes.")] HRESULT SetInnerObject ([in] IUnknown *pIInner, [in] REFIID riid, [out, retval] IUnknown **ppIUnkOuter);
};

#if !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100
///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE TRIAS03
// @interface ITRiASLockFeature | Das Interface <i ITRiASLockFeature> legt eine Objekteigenschaft 
// bis auf weiteres auf ein bestimmtes Bezugsobjekt fest.
// @comm Das <i ITRiASLockFeature> Interface wird benötigt, um für einen gewissen Zeitraum eine 
// Objekteigenschaft fest auf ein bestimmtes Objekt zu beziehen, d.h. alle Zugriffe auf die 
// <op .Feature> Eigenschaft beziehen sich auf den Wert dieser Objekteigenschaft für das Bezugsobjekt.
// @supby <o TRiASFeature>
// @group Methoden und Eigenschaften von <i ITRiASLockFeature> 
// @index | ILOCKFEATURE
// @doc ILOCKFEATURE
	[
		object,
		uuid(AF0CE5D5-57D8-11D2-9ED0-006008447800),
		dual,
		helpstring("ITRiASLockFeature Interface"),
		pointer_default(unique)
	]
	interface ITRiASLockFeature : IDispatch
	{
	// @property VARIANT | ITRiASLockFeature | Feature | Die <op .Feature>- Eigenschaft
	// setzt bzw. liefert den Wert der Objekteigenschaft für das festgelegte Bezugsobjekt.
	// @comm Die <op .Feature> Eigenschaft kann nur dann erfolgreich gesetzt bzw. ausgewertet 
	// werden, wenn _vorher_ mit der <om. LockFeature> -Methode ein Bezugsobjekt festgelegt wurde.
	// @rvalue <cv TRIASDB_E_FEATURENOTLOCKED> | Es wurde kein Bezugsobjekt festgelegt, auf welches 
	// sich die <op .Feature> -Eigenschaft beziehen könnte.
	// @supby <o TRiASFeature>
	// @xref <i ITRiASLockFeature>
		[propget, id(DISPID_LOCKEDFEATURE), helpstring("Liefert den Wert der Objekteigenschaft für das festgelegte Bezugsobjekt.")] HRESULT Feature([out, retval] VARIANT *pVal);
		[propput, id(DISPID_LOCKEDFEATURE), helpstring("Setzt den Wert der Objekteigenschaft für das festgelegte Bezugsobjekt.")] HRESULT Feature([in] VARIANT newVal);

	// @property BSTR | ITRiASLockFeature | Name | Die <op .Name>- Eigenschaft
	// setzt bzw. liefert den Namen der Objekteigenschaft für das festgelegte Bezugsobjekt.
	// @comm Die <op .Name> Eigenschaft kann nur gelesen werden.
	// @comm Die <op .Name> Eigenschaft kann nur dann erfolgreich gesetzt bzw. ausgewertet 
	// werden, wenn _vorher_ mit der <om. LockFeature> -Methode ein Bezugsobjekt festgelegt wurde.
	// @rvalue <cv TRIASDB_E_FEATURENOTLOCKED> | Es wurde kein Bezugsobjekt festgelegt, auf welches 
	// sich die <op .Name> -Eigenschaft beziehen könnte.
	// @supby <o TRiASFeature>
	// @xref <i ITRiASLockFeature>
		[propget, id(DISPID_LOCKEDNAME), helpstring("Liefert den Namen der Objekteigenschaft für das festgelegte Bezugsobjekt.")] HRESULT Name([out, retval] BSTR *pVal);

	// @property BSTR | ITRiASLockFeature | Description | Die <op .Description>- Eigenschaft
	// setzt bzw. liefert eine etwas ausführlichere Beschreibung der Objekteigenschaft für 
	// das festgelegte Bezugsobjekt.
	// @comm Die <op .Description> Eigenschaft kann nur gelesen werden.
	// @comm Die <op .Description> Eigenschaft kann nur dann erfolgreich gesetzt bzw. ausgewertet 
	// werden, wenn _vorher_ mit der <om. LockFeature> -Methode ein Bezugsobjekt festgelegt wurde.
	// @rvalue <cv TRIASDB_E_FEATURENOTLOCKED> | Es wurde kein Bezugsobjekt festgelegt, auf welches 
	// sich die <op .Description> -Eigenschaft beziehen könnte.
	// @supby <o TRiASFeature>
	// @xref <i ITRiASLockFeature>
		[propget, id(DISPID_LOCKEDDESCRIPTION), helpstring("Liefert eine etwas ausführlichere Beschreibung der Objekteigenschaft für das festgelegte Bezugsobjekt.")] HRESULT Description([out, retval] BSTR *pVal);

	// @property VARIANT_BOOL | ITRiASLockFeature | IsRO | Die <op .IsRO>- Eigenschaft
	// setzt bzw. liefert, ob die Objekteigenschaft für das festgelegte Bezugsobjekt schreibgeschützt ist
	// @comm Die <op .IsRO> Eigenschaft kann nur gelesen werden.
	// @comm Die <op .IsRO> Eigenschaft kann nur dann erfolgreich gesetzt bzw. ausgewertet 
	// werden, wenn _vorher_ mit der <om. LockFeature> -Methode ein Bezugsobjekt festgelegt wurde.
	// @rvalue <cv TRIASDB_E_FEATURENOTLOCKED> | Es wurde kein Bezugsobjekt festgelegt, auf welches 
	// sich die <op .IsRO> -Eigenschaft beziehen könnte.
	// @supby <o TRiASFeature>
	// @xref <i ITRiASLockFeature>
		[propget, id(DISPID_LOCKEDISRO), helpstring("Liefert, ob die Objekteigenschaft für das festgelegte Bezugsobjekt schreibgeschützt ist.")] HRESULT IsRO([out, retval] VARIANT_BOOL *pVal);

	// @property VARIANT_BOOL | ITRiASLockFeature | IsLocked | Die <op .IsLocked>- Eigenschaft
	// liefert, ob die für Objekteigenschaft ein Bezugsobjekt festgelegt wurde.
	// @comm Die Eigenschaft <op .IsLocked> kann nicht gesetzt werden.
	// @supby <o TRiASFeature>
	// @xref <i ITRiASLockFeature>
		[propget, id(2), helpstring("Liefert, ob die für Objekteigenschaft ein Bezugsobjekt festgelegt wurde.")] HRESULT IsLocked([out, retval] VARIANT_BOOL *pVal);

	// @method HRESULT | ITRiASLockFeature | LockFeature | Die <om .LockFeature>- Methode
	// legt das Bezugsobjekt für diese Objekteigenschaft fest.
	// @parm <i IDispatch> | Obj | Der Parameter <p Obj> enthält das festzulegende Bezugsobjekt. 
	// @comm Im allgemeinen wird dieses Interface dann genutzt, wenn für einen längeren Zeitraum alle
	// weiteren Operationen mit dieser Objekteigenschaft sich auf ein bestimmtes Objekt beziehen sollen
	// (.z.B. während einer Interaktion/Dialog etc.).
	// @supby <o TRiASFeature>
	// @xref <i ITRiASLockFeature>
		[id(100), helpstring("Festlegen des Bezugsobjektes für diese Objekteigenschaft.")] HRESULT LockFeature([in] IDispatch *Obj);

	// @method HRESULT | ITRiASLockFeature | UnlockFeature | Die <om .UnlockFeature>- Methode
	// hebt die Bindung der Objekteigenschaft an ein Bezugsobjekt auf.
	// @parm VARIANT_BOOL | Commit | Der Parameter <p Commit> legt fest, ob evtl. Veränderungen 
	// zurückgeschrieben werden sollen.
	// @comm Im allgemeinen wird dieses Interface dann genutzt, wenn für einen längeren Zeitraum alle
	// weiteren Operationen mit dieser Objekteigenschaft sich auf ein bestimmtes Objekt beziehen sollen
	// (.z.B. während einer Interaktion/Dialog etc.).
	// @rvalue <cv S_OK> | Die Bindung an ein Bezugsobjekt wurde erfolgreich aufgehoben.
	// @rvalue <cv S_FALSE> | Deie Objekteigenschaft war nicht an ein Bezugsobjekt gebunden.
	// @supby <o TRiASFeature>
	// @xref <i ITRiASLockFeature>
		[id(101), helpstring("Aufhebung der Bindung der Objekteigenschaft an ein Bezugsobjekt.")] HRESULT UnlockFeature([in] VARIANT_BOOL Commit);
	};
#endif // !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100

///////////////////////////////////////////////////////////////////////////////
// Typelibrary für ITRiASRegistryHelper et. al.

cpp_quote("#define TYPELIB_HELPER_VERSION_MAJOR 1")
cpp_quote("#define TYPELIB_HELPER_VERSION_MINOR 0")
cpp_quote("#define TYPELIB_HELPER_VERSION \"1.0\"")
cpp_quote("#define TYPELIB_HELPER_LCID 0")

#define TYPELIB_HELPER_VERSION 1.0
#define TYPELIB_HELPER_LCID 0

[
	uuid(0796388E-3123-101C-BB62-00AA0018497C),
	version(TYPELIB_HELPER_VERSION), lcid(TYPELIB_HELPER_LCID),
	helpstring("TRiAS Helper 1.0 Type Library")
]
library TRiASHelperLib
{
	importlib("stdole32.tlb");

	interface DMatchString;
	interface DSearchObjects;
	
	interface ITRiASRegistryHelper;
	interface IRegisterTRiASExtension;

///////////////////////////////////////////////////////////////////////////////
// CoClass für RegistryHelper
	[
		uuid(0796388D-3123-101C-BB62-00AA0018497C),
		helpstring("TRiAS Registry Helper Class")
	]
	coclass TRiASRegistryHelper
	{
		[default] interface ITRiASRegistryHelper;
	};

///////////////////////////////////////////////////////////////////////////////
// CoClass für EnumObjectsByNumer
	[
		uuid(0796381C-3123-101C-BB62-00AA0018497C),		// GUID identisch mit CLSID_EnumObjectsByNumber
		helpstring("Enumerator für Objektnummern")
	]
	coclass EnumObjectNumbers
	{
		[default] interface IEnumObjectsByNumber;
	};

///////////////////////////////////////////////////////////////////////////////
// CoClass für ProgressIndicator
	[
		uuid(07963819-3123-101C-BB62-00AA0018497C),
		helpstring("General purpose ProgressIndcator")
	]
	coclass ProgressIndicator
	{
		[default] interface IProgressIndicator2;
	}

///////////////////////////////////////////////////////////////////////////////
// CoClass für MultiProgressIndicator
	[
		uuid(079638D2-3123-101C-BB62-00AA0018497C),
		helpstring("Multi-ProgressIndicator")
	]
	coclass MultiProgressIndicator
	{
		[default] interface IMultiProgressIndicator;
	};

///////////////////////////////////////////////////////////////////////////////
// CoClass für RegisterExt
	[
		uuid(C939B5BF-EA2D-11D0-9611-00A024D6F582),
		helpstring("Registrieren von TRiAS Zusatzmodulen")
	]
	coclass RegisterExt
	{
		[default] interface IRegisterTRiASExtension;
	};

#if !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100
///////////////////////////////////////////////////////////////////////////////
// CoClass für RegisterExt
	[
		uuid(26A3BD85-6D09-11D2-9EE7-006008447800),
		helpstring("Implementation für TRiASLockFeature")
	]
	coclass FakeTRiASLockFeature
	{
		[default] interface IInitInnerObject;
		interface ITRiASLockFeature;
	};

///////////////////////////////////////////////////////////////////////////////
// @doc INTERFACE TRIAS03
// CoClass und Initialisierungsinterface für Delegator
	[
		uuid(58DAD7D7-6F34-11D2-9EEC-006008447800),
		object
	]
	interface IDelegatorFactory : IUnknown
	{
		HRESULT CreateDelegator([in] IUnknown *pUnkOuter, [in] IUnknown *pUnkInner, [in] REFIID iid, [out] void **ppv);
	}

	[
		uuid(58DAD7D5-6F34-11D2-9EEC-006008447800)
	]
	coclass CoDelegator
	{
		interface IDelegatorFactory;
	}
#endif // !defined(_FORCE_LEGACY_CODE) && _MSC_VER >= 1100
};
