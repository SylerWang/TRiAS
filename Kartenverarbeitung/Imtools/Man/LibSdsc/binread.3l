


     BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))           SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))            BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))



     NNNNAAAAMMMMEEEE
          BinRead  -  read from a binary file
          BinFRead  -  read from a binary file
          BinSRead  -  read from a binary string

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          #include "sdsc.h"

          extern int BinErrNo;

          int BinRead( fd, buf, type, nbytes, count )
               int fd;
               ? buf[ ];
               int type, nbytes, count;

          int BinFRead( fp, buf, type, nbytes, count )
               FILE *fp;
               ? buf[ ];
               int type, nbytes, count;

          int BinSRead( data, buf, type, nbytes, count )
               char data[ ];
               ? buf[ ];
               int type, nbytes, count;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _B_i_n_R_e_a_d, _B_i_n_F_R_e_a_d, and _B_i_n_S_R_e_a_d read binary data from a
          source, break it up into multiple _n_b_y_t_e quantities, and
          return it in _b_u_f.

          _B_i_n_R_e_a_d reads from the open file or stream indicated by the
          UNIX file descriptor _f_d.

          _B_i_n_F_R_e_a_d reads from the open file or stream indicated by the
          UNIX buffered I/O _F_I_L_E pointer _f_p.

          _B_i_n_S_R_e_a_d reads from the caller's character string _d_a_t_a.
          _d_a_t_a is expected to contain raw binary data, possibly
          including NULLs, and other unprintable characters.

          All calls read _c_o_u_n_t items, each of length _n_b_y_t_e_s, into the
          caller's _b_u_f array, declared as of type _t_y_p_e.  _b_u_f is
          assumed to point to the first element of an array declared
          by the caller to be of sufficient length to hold all of the
          incoming data.

          _c_o_u_n_t and _n_b_y_t_e_s must both be greater than 0.

          The known values of _t_y_p_e may vary from site to site and may
          be found in the include file "bin.h" (automatically included
          by "sdsc.h").  The following types are considered standard
          and should be available at all sites:



     Page 1                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))           SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))            BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))



               _t_y_p_e      MMMMeeeeaaaannnniiiinnnngggg
               BOOLEAN   boolean
               CHAR      signed character
               DOUBLE    double-precision floating-point
               FLOAT     single-precision floating-point
               INT       signed int
               INT16     signed 16-bit (or greater) integer
               INT32     signed 32-bit (or greater) integer
               INT64     signed 64-bit (or greater) integer
               INT8      signed 8-bit (or greater) integer
               LONG      signed long
               SHORT     signed short
               UCHAR     unsigned character
               UINT      unsigned int
               UINT16    unsigned 16-bit (or greater) integer
               UINT32    unsigned 32-bit (or greater) integer
               UINT64    unsigned 64-bit (or greater) integer
               UINT8     unsigned 8-bit (or greater) integer
               ULONG     unsigned long
               USHORT    unsigned short

          INT64 and UINT64 are only available on systems supporting
          integer types of at least 64-bits in length, such as a CRAY.

     RRRREEEETTTTUUUURRRRNNNNSSSS
          _B_i_n_R_e_a_d, _B_i_n_F_R_e_a_d, and _B_i_n_S_R_e_a_d return the number of bytes
          read in.  On an error, all calls return -1 and set the
          global _B_i_n_E_r_r_N_o to an error code indicating the cause of the
          error.  The following error codes may be returned by the
          calls:

          _B_I_N_E_C_O_U_N_T = count cannot be <= 0
               The _c_o_u_n_t argument was less than or equal to zero.

          _B_I_N_E_F_L_O_A_T_U_N_S_U_P_P_O_R_T_E_D = unsupported size for file float selection
               The _n_b_y_t_e_s argument selected a size of floating-point
               item to be read in that is undefined for the file
               floating-point format selected by _B_i_n_F_l_o_a_t_F_o_r_m_a_t(3BIN).

          _B_I_N_E_M_A_L_L_O_C = Cannot malloc more host memory
               Dynamic allocation of host memory needed by the read
               call could not be completed.

          _B_I_N_E_N_B_Y_T_E_S = nbytes cannot be <= 0
               The _n_b_y_t_e_s argument was less than or equal to zero.

          _B_I_N_E_S_Y_S = System error:  see errno
               A system call error occurred when a read was attempted
               on the file.  The global _e_r_r_n_o, set by UNIX system
               calls, contains an error code indicating the cause of
               the error (see _e_r_r_n_o(2)).




     Page 2                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))           SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))            BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))



          _B_I_N_E_T_Y_P_E = Unknown type selection
               The _t_y_p_e argument did not indicate a type known by the
               binary I/O package.  The include file "bin.h" includes
               a list of #defined constants for the names of the known
               types.

     NNNNOOOOTTTTEEEESSSS
          Binary data files and streams are a compact and speedy way
          to store and transfer data.  The binary format of a value
          can take fewer bytes to store than using the equivalent
          ASCII format.  For instance, the number "32767" takes 16
          bits to represent on a 2's complement integer machine.  When
          written to a binary file or stream, the number can be stored
          in 2 bytes.  The same number written to an ASCII file or
          stream requires 5 bytes:  "3", "2", "7", "6", and "7".

          While the UNIX _r_e_a_d(2) and _w_r_i_t_e(2) calls support reading
          and writing binary data, they do not create binary files
          that can be read in again on a machine with a different byte
          order or larger or smaller word size (without additional
          programing).  The calls in the binary I/O package provide a
          portable means of reading and writing binary files and
          streams.  Application code that calls _B_i_n_R_e_a_d to read in an
          array of 32-bit integers from a binary file remains
          unchanged whether being compiled for a SPARCstation, a VAX
          running VMS, or a CRAY X-MP.  Differences in byte ordering,
          word sizes, floating-point formats, and structure field
          padding are handled by the binary I/O package.

          The size (number of bytes) of an item in a binary file may
          differ from the size of the same item when in memory in a C
          variable.  This is the case, for instance, when reading a
          32-bit integer from a binary file into a CRAY's 64-bit _i_n_t
          variable.

          The _t_y_p_e argument indicates the declared type of the
          caller's _b_u_f array.  From the type the read routines
          determine the number of bytes in _b_u_f that are used for each
          data item read in.

          The _n_b_y_t_e_s argument indicates the number of bytes used IIIINNNN
          TTTTHHHHEEEE FFFFIIIILLLLEEEE for the item being read in.  This may be larger or
          smaller than the size of the item as stored in the _b_u_f
          array.

          IIIInnnntttteeeeggggeeeerrrr TTTTyyyyppppeeeessss

               _n_b_y_t_e_s need not be a multiple of 2 or of the word-size
               of the host.  Reading in 3 byte or 11 byte integers is
               acceptable.

               When _n_b_y_t_e_s is smaller than the size of _t_y_p_e, zero-



     Page 3                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))           SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))            BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))



               padding and sign-extension (signed types only) occur as
               the data are placed into _b_u_f.

               When _n_b_y_t_e_s is greater than the size of _t_y_p_e, incoming
               data are truncated to the least-significant bits.  If
               significant bits are lost due to the truncation, the
               error handling function nominated by
               _B_i_n_E_r_r_H_a_n_d_l_e_r(3BIN) is called:

                    handler( fd, BINOPREAD, BINEINTEGERTRUNC, data,
                    frombits, tobits )

               _f_d is the file's file descriptor.  _d_a_t_a is _u_c_h_a_r
               pointer to the array of bytes read from the file that
               represents the integer that is too large to be stored
               in the host's buffer.  _f_r_o_m_b_i_t_s is the length in bits
               of the file integer, and _t_o_b_i_t_s is the length of an
               integer on the host.

          FFFFllllooooaaaattttiiiinnnngggg----PPPPooooiiiinnnntttt TTTTyyyyppppeeeessss

               _n_b_y_t_e_s is restricted to those sizes supported by the
               selected file floating-point format using
               _B_i_n_F_l_o_a_t_F_o_r_m_a_t(3BIN).  For instance, IEEE floating-
               point supports only 4- and 8-byte lengths, so an _n_b_y_t_e_s
               value of 5 would be illegal.  When _n_b_y_t_e_s is a legal
               size for the current floating-point format selection,
               the error _B_I_N_E_F_L_O_A_T_U_N_S_U_P_P_O_R_T_E_D is returned.

               When the file's floating-point format selected by
               _B_i_n_F_l_o_a_t_F_o_r_m_a_t(3BIN) has a smaller exponent and
               mantissa than the host's floating-point format, zero
               padding of the exponent and mantissa occurs as the data
               is placed into _b_u_f_F_R.

               When the file's floating-point format has a larger
               mantissa than the host's format, the least-significant
               bits of the mantissa are silently truncated, causing a
               reduction in the accuracy of the number.

               When the file's floating-point format has a larger
               exponent than the host's format, then the file's format
               may be able to represent floating-point numbers that
               are too large (overflow) or too small (underflow) for
               the host.  The error handling function indicated by
               _B_i_n_E_r_r_H_a_n_d_l_e_r(3BIN) is called

                    handler( fd, BINOPREAD, reason, data, frombits,
                    tobits )

               where reason is _B_I_N_E_F_L_O_A_T_O_V_E_R_F_L_O_W or
               _B_I_N_E_F_L_O_A_T_U_N_D_E_R_F_L_O_W.



     Page 4                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))           SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))            BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))



               _f_d is the file's file descriptor.  _d_a_t_a is _u_c_h_a_r
               pointer to the array of bytes read from the file that
               represents the float whose exponent is too large or
               small to be stored in the host's buffer.  _f_r_o_m_b_i_t_s is
               the length in bits of the file float exponent, and
               _t_o_b_i_t_s is the length of a float's exponent on the host.

          If the programmer has not indicated an error handling
          function, the default handler prints a warning message to
          _s_t_d_e_r_r.

          To maintain portability of code written using the binary I/O
          package, NNNNEEEEVVVVEEEERRRR use the C construct _s_i_z_e_o_f() to compute the
          _n_b_y_t_e_s argument.  If a 32-bit quantity is to be read in,
          pass a "4", not "sizeof(int)".  The size of an _i_n_t is only
          "4" on 32-bit machines.  Such code does not work properly on
          a CRAY where integers are 64-bits long.

          The byte order of data in the file may be selected by
          calling _B_i_n_B_y_t_e_O_r_d_e_r(3BIN) prior to making read calls.  If
          the file byte order differs from that expected by the
          program, then data read in will be incorrect.

          Entire C structures may be read in using the
          _B_i_n_R_e_a_d_S_t_r_u_c_t(3BIN) and _B_i_n_F_R_e_a_d_S_t_r_u_c_t(3BIN) calls.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
        EEEExxxxaaaammmmpppplllleeee 1111
          Read in an array of 6 32-bit integers from a binary file:

               int buf[6];
               int fd;

               BinRead( fd, buf, INT, 4, 6 );

          The _t_y_p_e argument is "INT" because the _b_u_f array was
          declared as of type _i_n_t.

          The _n_b_y_t_e_s argument is "4" to indicate that 4-byte
          quantities are to be read in from the file.

        EEEExxxxaaaammmmpppplllleeee 2222
          Read in an array of run-length-encoded pixel values where
          each encoded pixel is a 4-byte quantity consisting of a 1-
          byte count and one byte each of red (R), green (G), and blue
          (B).  Expand each 4-byte pixel value into 4 integers.

               uint scanline[WIDTH][4];
               FILE *fp;

               BinFRead( fp, scanline, UINT, 1, WIDTH*4 );




     Page 5                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))           SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))            BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))



          The _t_y_p_e is "INT", but _n_b_y_t_e_s is only 1.  Since _n_b_y_t_e_s is
          less than the size of _t_y_p_e (at least on non-8-bit machines),
          each byte read in will be zero-padded or sign-extended as it
          is stored into the next slot in the integer _s_c_a_n_l_i_n_e array.

        EEEExxxxaaaammmmpppplllleeee 3333
          Read in an array of 64-bit integers and store them into an
          _i_n_t array.

               int data[COUNT];
               int fd;

               BinRead( fd, data, INT, 8, COUNT );

          The _t_y_p_e is "INT" and _n_b_y_t_e_s is 8 (64-bits).  If the host
          represents _i_n_ts in less than 64-bits, incoming data will be
          truncated to the least-significant bits.  If significant
          bits are lost because of the truncation, the nominated error
          handler function will be called.

        EEEExxxxaaaammmmpppplllleeee 4444
          Read in a 2-byte magic number at the top of a file.  If the
          magic number is "0xABCD", assume the file is in MBF (Most-
          significant Byte First) byte order.  If the magic number is
          "0xDCBA", assume the file is in LBF (Least-significant Byte
          First) byte order.  If the magic number is neither of these,
          issue an error.

               int magic;
               int fd;

               BinRead( fd, &magic, INT, 2, 1 );
               magic &= 0xFFFF;
               if ( magic == 0xABCD )
                    BinByteOrder( BINMBF );
               else if ( magic == 0xDCBA )
                    BinByteOrder( BINLBF );
               else
                    issue an error

          Note that the byte order of the host is not an issue.  The
          binary I/O package automatically converts from the file's
          byte order, as selected by the _B_i_n_B_y_t_e_O_r_d_e_r(3BIN) calls, to
          the byte order of the host.

        EEEExxxxaaaammmmpppplllleeee 5555
          Read in 3 IEEE single-precision (4-byte) floating-point
          numbers and save them into an array.

               float numbers[3];
               FILE *fp;




     Page 6                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))           SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))            BBBBIIIINNNNRRRREEEEAAAADDDD((((3333BBBBIIIINNNN))))



               BinFloatFormat( BINIEEE );
               BinFRead( fp, numbers, FLOAT, 4, 3 );

          Note that the floating-point format of the host is not
          relevant.  The IEEE single-precision values are converted to
          the host's format automatically.

        EEEExxxxaaaammmmpppplllleeee 6666
          Use _r_e_a_d(2) to read in an array of raw data.  Then use
          _B_i_n_S_R_e_a_d to parse that raw data into 4 64-bit CRAY floating
          point values and store them into four double-precision
          floats in the current host's floating point format.

               double numbers[4];
               char   data[4*8];

               read( fd, data, 4 * 8 );
               BinFloatFormat( BINCRAY );
               BinSRead( data, numbers, DOUBLE, 8, 4 );

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          BinByteOrder(3BIN), BinErrorHandler(3BIN),
          BinFReadStruct(3BIN), BinFWrite(3BIN),
          BinFWriteStruct(3BIN), BinFloatFormat(3BIN),
          BinPError(3BIN), BinQByteOrder(3BIN), BinQFloatFormat(3BIN),
          BinQMachine(3BIN), BinReadStruct(3BIN), BinSWrite(3BIN),
          BinWrite(3BIN), BinWriteStruct(3BIN), errno(2), perror(3)

     AAAAUUUUTTTTHHHHOOOORRRRSSSS
          Dave Nadeau
          San Diego Supercomputer Center

     CCCCOOOONNNNTTTTAAAACCCCTTTT
          SDSC consultants, (619)534-5100, ccccoooonnnnssssuuuulllltttt@@@@yyyy1111....ssssddddsssscccc....eeeedddduuuu





















     Page 7                                          (printed 6/30/95)



