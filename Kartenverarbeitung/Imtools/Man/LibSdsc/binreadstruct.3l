


     BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))



     NNNNAAAAMMMMEEEE
          BinReadStruct  -  read structure from a binary file
          BinFReadStruct  -  read structure from a binary file
          BinSReadStruct  -  read structure from a binary string

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          #include "sdsc.h"

          extern int BinErrNo;

          int BinReadStruct( fd, structure, fields )
               int fd;
               struct ? *structure;
               BinField fields[ ];

          int BinFReadStruct( fp, structure, fields )
               FILE *fp;
               struct ? *structure;
               BinField fields[ ];

          int BinSReadStruct( data, structure, fields )
               char data[ ];
               struct ? *structure;
               BinField fields[ ];

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _B_i_n_R_e_a_d_S_t_r_u_c_t and _B_i_n_F_R_e_a_d_S_t_r_u_c_t read binary data from an
          open file or stream, while _B_i_n_S_R_e_a_d_S_t_r_u_c_t reads binary data
          from the caller's raw character _d_a_t_a array.  _B_i_n_R_e_a_d_S_t_r_u_c_t
          takes a UNIX file descriptor _f_d.  _B_i_n_F_R_e_a_d_S_t_r_u_c_t takes a
          UNIX-buffered I/O _F_I_L_E pointer _f_p.

          All calls read items from the file or data array and store
          them into the C structure pointed to by _s_t_r_u_c_t_u_r_e, taking
          into account the structure padding characteristics of the
          host C compiler.  Structure fields in _s_t_r_u_c_t_u_r_e are
          described by entries in the _f_i_e_l_d_s array.

               typedef struct BinField
               {
                    int bin_type;
                    int bin_nbytes;
                    int bin_count;
               } BinField;

          _b_i_n__t_y_p_e is the declared type of the field in the caller's
          structure.  The known values of _b_i_n__t_y_p_e may vary from site
          to site and may be found in the include file "bin.h"
          (automatically included by "sdsc.h").  The following types
          are considered standard and should be available at all
          sites:




     Page 1                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))



               _b_i_n__t_y_p_e   MMMMeeeeaaaannnniiiinnnngggg
               BOOLEAN    boolean
               CHAR       signed character
               DOUBLE     double-percision floating point
               FLOAT      single-percision floating point
               INT        signed int
               INT16      signed 16-bit (or greater) integer
               INT32      signed 32-bit (or greater) integer
               INT64      signed 64-bit (or greater) integer
               INT8       signed 8-bit (or greater) integer
               LONG       signed long
               SHORT      signed short
               UCHAR      unsigned character
               UINT       unsigned int
               UINT16     unsigned 16-bit (or greater) integer
               UINT32     unsigned 32-bit (or greater) integer
               UINT64     unsigned 64-bit (or greater) integer
               UINT8      unsigned 8-bit (or greater) integer
               ULONG      unsigned long
               USHORT     unsigned short

          INT64 and UINT64 are only available on systems supporting
          integer types of at least 64-bits in length.

          _b_i_n__n_b_y_t_e_s is the number of bytes the item occupies in the
          file.  This may be larger or smaller than the size of the
          field in host memory.  _b_i_n__n_b_y_t_e_s must be greater than 0.

          _b_i_n__c_o_u_n_t is the number of items of this type and size that
          are to be read in to successive entries in the caller's
          structure.

          The _f_i_e_l_d_s array is terminated on the first entry with a
          _b_i_n__c_o_u_n_t field of 0.

     RRRREEEETTTTUUUURRRRNNNNSSSS
          _B_i_n_R_e_a_d_S_t_r_u_c_t, _B_i_n_F_R_e_a_d_S_t_r_u_c_t, and _B_i_n_S_R_e_a_d_S_t_r_u_c_t return the
          number of bytes read in.  On an error, all calls return -1
          and set the global _B_i_n_E_r_r_N_o to an error code indicating the
          cause of the error.  The following error codes may be
          returned by the calls:

          _B_I_N_E_F_L_O_A_T_U_N_S_U_P_P_O_R_T_E_D = unsupported size for file float selection
               The _n_b_y_t_e_s argument selected a size of floating-point
               item to be read in that is undefined for the file
               floating-point format selected by _B_i_n_F_l_o_a_t_F_o_r_m_a_t(3BIN).

          _B_I_N_E_M_A_L_L_O_C = Cannot malloc more host memory
               Dynamic allocation of host memory needed by the read
               call could not be completed.

          _B_I_N_E_N_B_Y_T_E_S = nbytes cannot be <= 0



     Page 2                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))



               A _b_i_n__n_b_y_t_e_s field was less than or equal to zero.

          _B_I_N_E_S_Y_S = System error:  see errno
               A system call error occurred when a read was attempted
               on the file.  The global _e_r_r_n_o, set by UNIX system
               calls, contains an error code indicating the cause of
               the error (see _e_r_r_n_o(2)).

          _B_I_N_E_T_Y_P_E = Unknown type selection
               A _b_i_n__t_y_p_e field did not indicate a type known by the
               binary I/O package.  The include file "bin.h" includes
               a list of #defined constants for the names of the known
               types.

     NNNNOOOOTTTTEEEESSSS
          Binary data files and streams are a compact and speedy way
          to store and transfer data.  The binary format of a value
          can take fewer bytes to store than using the equivalent
          ASCII format.  For instance, the number "32767" takes 16
          bits to represent on a 2's complement integer machine.  When
          written to a binary file or stream, the number can be stored
          in 2 bytes.  The same number written to an ASCII file or
          stream requires 5 bytes:  "3", "2", "7", "6", and "7".

          While the UNIX _r_e_a_d(2) and _w_r_i_t_e(2) calls support reading
          and writing binary data, they do not create binary files
          that can be read in again on a machine with a different byte
          order or larger or smaller word size (without additional
          programing).  The calls in the binary I/O package provide a
          portable means of reading and writing binary files and
          streams.  Application code that calls _B_i_n_R_e_a_d_S_t_r_u_c_t to read
          in a structure of 32-bit integers, 16-bit shorts, and 64-bit
          doubles from a binary file remains unchanged whether being
          compiled for a SPARCstation, a VAX running VMS, or a CRAY
          X-MP.  Differences in byte ordering, word sizes, and
          structure field padding are handled by the binary I/O
          package.

          The size (number of bytes) of an item in a binary file may
          differ from the size of the same item when in memory in a C
          variable or structure field.  This is the case, for
          instance, when reading a 32-bit integer from a binary file
          into a CRAY's 64-bit _i_n_t variable.

          The _b_i_n__t_y_p_e field indicates the declared type of the field
          in the caller's _s_t_r_u_c_t_u_r_e struct.  From the type the read
          routines determine the number of bytes in _s_t_r_u_c_t_u_r_e that are
          used for each data item read in.  Appropriate sign extension
          or zero padding then takes place as data is read in.

          The _b_i_n__n_b_y_t_e_s field indicates the number of bytes used IIIINNNN
          TTTTHHHHEEEE FFFFIIIILLLLEEEE for the item being read in.  This may be larger or



     Page 3                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))



          smaller than the size of the item as stored in the _s_t_r_u_c_t_u_r_e
          struct.

          IIIInnnntttteeeeggggeeeerrrr TTTTyyyyppppeeeessss

               _b_i_n__n_b_y_t_e_s need not be a multiple of 2 or of the word-
               size of the host.  Reading in 3- or 11-byte integers is
               acceptable.

               When _b_i_n__n_b_y_t_e_s is smaller than the size of _b_i_n__t_y_p_e,
               zero padding and sign extension (signed types only)
               occurs as the data is placed into _s_t_r_u_c_t_u_r_e.

               When _b_i_n__n_b_y_t_e_s is greater than the size of _b_i_n__t_y_p_e,
               incoming data is truncated to the least-significant
               bits.  If significant bits are lost due to the
               truncation, the error handling function nominated by
               _B_i_n_E_r_r_H_a_n_d_l_e_r(3BIN) is called:

                    handler( fd, BINOPREADSTRUCT, BINEINTEGERTRUNC,
                    data, frombits, tobits )

               _f_d is the file's file descriptor.  _d_a_t_a is _u_c_h_a_r
               pointer to the array of bytes read from the file that
               represents the integer that is too large to be stored
               in the host's buffer.  _f_r_o_m_b_i_t_s is the length in bits
               of the file integer, and _t_o_b_i_t_s is the length of an
               integer on the host.

          FFFFllllooooaaaattttiiiinnnngggg----PPPPooooiiiinnnntttt TTTTyyyyppppeeeessss

               _b_i_n__n_b_y_t_e_s is restricted to those sizes supported by
               the selected file floating-point format using
               _B_i_n_F_l_o_a_t_F_o_r_m_a_t(3BIN).  For instance, IEEE floating-
               point supports only 4- and 8-byte lengths, so an
               _b_i_n__n_b_y_t_e_s value of 5 would be illegal.  When
               _b_i_n__n_b_y_t_e_s is inconsistent with any legal size of the
               current floating point format selection, the error
               _B_I_N_E_F_L_O_A_T_U_N_S_U_P_P_O_R_T_E_D error is returned without reading
               anything.

               When the file's floating-point format selected by
               _B_i_n_F_l_o_a_t_F_o_r_m_a_t(3BIN) has a smaller exponent and
               mantissa than the host's floating-point format, zero-
               padding of the exponent and mantissa occurs as the data
               is placed into _s_t_r_u_c_t_u_r_e_F_R.

               When the file's floating-point format has a larger
               mantissa than the host's format, the least-significant
               bits of the mantissa are silently truncated, causing a
               reduction in the accuracy of the number.




     Page 4                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))



               When the file's floating-point format has a larger
               exponent than the host's format, then the file's format
               may be able to represent floating-point numbers that
               are too large (overflow) or too small (underflow) for
               the host.  The error handling function nominated by
               _B_i_n_E_r_r_H_a_n_d_l_e_r(3BIN) is called

                    handler( fd, BINOPREADSTRUCT, reason, data,
                    frombits, tobits )

               where reason is _B_I_N_E_F_L_O_A_T_O_V_E_R_F_L_O_W or
               _B_I_N_E_F_L_O_A_T_U_N_D_E_R_F_L_O_W.

               _f_d is the file's file descriptor.  _d_a_t_a is _u_c_h_a_r
               pointer to the array of bytes read from the file that
               represents the float whose exponent is too large or
               small to be stored in the host's buffer.  _f_r_o_m_b_i_t_s is
               the length in bits of the file float exponent, and
               _t_o_b_i_t_s is the length of a float's exponent on the host.

          If the programmer has not indicated an error handling
          function, the default handler prints a warning message to
          _s_t_d_e_r_r.

          In a C structure like the following:

               struct thing
               {
                    char byte;
                    int  integer;
               };

          there may, or may not, be empty storage space between the
          _b_y_t_e field and the _i_n_t_e_g_e_r field.  Some CPUs can only access
          integers or floats at word boundaries.  On such CPUs the
          address of the _i_n_t_e_g_e_r field in the above structure must be
          advanced to the next legal boundary.  On a SPARC processor,
          _i_n_ts must be aligned to 4-byte boundaries, forcing the
          addition of 3-padding bytes between the _b_y_t_e and _i_n_t_e_g_e_r
          fields in the structure above.  On a VAX running VMS the C
          compiler does not require _i_n_ts to be at any boundary so
          there would be no padding bytes added in the above
          structure.

          Structure padding is handled automatically by _B_i_n_R_e_a_d_S_t_r_u_c_t
          and _B_i_n_F_R_e_a_d_S_t_r_u_c_t.

          To maintain portability of code written using the binary I/O
          package, NNNNEEEEVVVVEEEERRRR use the C construct _s_i_z_e_o_f() to compute the
          _b_i_n__n_b_y_t_e_s field.  If a 32-bit quantity is to be read in,
          pass a "4", not "sizeof(int)".  The size of an _i_n_t is only
          "4" on 32-bit machines.  Such code does not work properly on



     Page 5                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))



          a CRAY where integers are 64-bits long.

          The byte order and floating-point format of data in the file
          may be selected by calling _B_i_n_B_y_t_e_O_r_d_e_r(3BIN) and
          _B_i_n_F_l_o_a_t_F_o_r_m_a_t(3BIN) prior to making read calls.  If the
          byte order and floating-point format selected by the program
          is not correct for the file, then data read in will be
          incorrect.

          Arrays of data may be read in using _B_i_n_R_e_a_d(3BIN),
          _B_i_n_F_R_e_a_d(3BIN), and _B_i_n_S_R_e_a_d(3BIN).

     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
          Read in a structure defined as:

               struct thing
               {
                    int     magic;
                    char    name[MAXNAME];
                    int     sizes[4];
                    short   flag1, flag2;
                    float   gamma;
               };

          Integers in the file are 32-bits long.  Shorts in the file
          are 16-bits long.  Floats in the file are 32-bits long.

               BinField fields[ ] =
               {
                    /* magic */   INT,     4,   1,
                    /* name */    CHAR,    1,   MAXNAME,
                    /* sizes */   INT,     4,   4,
                    /* flag1 */   SHORT,   2,   1,
                    /* flag2 */   SHORT,   2,   1,
                    /* gamma */   FLOAT,   4,   1,
                                  0,       0,   0
               };
               struct thing mystruct;
               int fd;

               BinReadStruct( fd, &mystruct, fields );

          Each entry in _f_i_e_l_d_s describes one field in the structure
          _t_h_i_n_g.  One 4-byte integer, MAXNAME 1-byte characters, four
          4-byte integers, two 2-byte shorts, and one 4-byte float are
          to be read in.

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          BinByteOrder(3BIN), BinErrorHandler(3BIN), BinFRead(3BIN),
          BinFWrite(3BIN), BinFWriteStruct(3BIN),
          BinFloatFormat(3BIN), BinPError(3BIN), BinQByteOrder(3BIN),
          BinQFloatFormat(3BIN), BinQMachine(3BIN), BinRead(3BIN),



     Page 6                                          (printed 6/30/95)






     BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      BBBBIIIINNNNRRRREEEEAAAADDDDSSSSTTTTRRRRUUUUCCCCTTTT((((3333BBBBIIIINNNN))))



          BinSRead(3BIN), BinSWrite(3BIN), BinWrite(3BIN),
          BinWriteStruct(3BIN), errno(2), perror(3)

     AAAAUUUUTTTTHHHHOOOORRRRSSSS
          Dave Nadeau
          San Diego Supercomputer Center

     CCCCOOOONNNNTTTTAAAACCCCTTTT
          SDSC consultants, (619)534-5100, ccccoooonnnnssssuuuulllltttt@@@@yyyy1111....ssssddddsssscccc....eeeedddduuuu














































     Page 7                                          (printed 6/30/95)



