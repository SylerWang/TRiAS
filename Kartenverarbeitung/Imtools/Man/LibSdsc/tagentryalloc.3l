


     TTTTAAAAGGGGEEEENNNNTTTTRRRRYYYYAAAALLLLLLLLOOOOCCCC((((3333TTTTAAAAGGGG))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      TTTTAAAAGGGGEEEENNNNTTTTRRRRYYYYAAAALLLLLLLLOOOOCCCC((((3333TTTTAAAAGGGG))))



     NNNNAAAAMMMMEEEE
          TagEntryAlloc - allocate a new tag table entry

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          ####iiiinnnncccclllluuuuddddeeee """"ssssddddsssscccc....hhhh""""

          eeeexxxxtttteeeerrrrnnnn iiiinnnntttt TTTTaaaaggggEEEErrrrrrrrNNNNoooo;;;;

          TTTTaaaaggggEEEEnnnnttttrrrryyyy ****TTTTaaaaggggEEEEnnnnttttrrrryyyyAAAAlllllllloooocccc(((( ttttaaaagggg,,,, ttttyyyyppppeeee,,,, ppppVVVVaaaalllluuuueeee ))))
               cccchhhhaaaarrrr ****ttttaaaagggg;;;;
               iiiinnnntttt   ttttyyyyppppeeee;;;;
               vvvvooooiiiidddd ****ppppVVVVaaaalllluuuueeee;;;;


     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _T_a_g_E_n_t_r_y_A_l_l_o_c allocates a new tag table entry.  The entry's
          tag is set to _t_a_g, its value type set to _t_y_p_e, and its value
          set to the data pointed to by _p_V_a_l_u_e.

     NNNNOOOOTTTTEEEESSSS
          Tag table entries contain public and private data.  Public
          data is set at the time the entry is allocated by
          _T_a_g_E_n_t_r_y_A_l_l_o_c and includes the following fields:

          tag  The tag field of an entry contains a NULL-terminated
               character string of _T_A_G_M_A_X_L_E_N characters or less.
               _T_a_g_E_n_t_r_y_A_l_l_o_c copies the _t_a_g argument into the new
               entry's tag field.
               Searches of a tag table based on a tag may be made
               using _T_a_g_T_a_b_l_e_Q_D_i_r_e_c_t(3TAG).

          type The type field of an entry indicates the basic C type
               for the value.  _T_a_g_E_n_t_r_y_A_l_l_o_c copies the _t_y_p_e argument
               into the new entry's type field.
               The type is used to determine the number of bytes of
               value data to store along with the tag in the new
               entry.  _T_a_g_E_n_t_r_y_A_l_l_o_c recognizes all types defined by
               the Binary I/O package (see _B_i_n_I_n_t_r_o(3BIN)), plus the
               special type _P_O_I_N_T_E_R.  _P_O_I_N_T_E_R may be used to
               generically indicate that the value is a pointer to
               something, such as a character string, or a user
               structure.
               At least the following types are currently recognized:

                    _t_y_p_e      MMMMeeeeaaaannnniiiinnnngggg
                    BOOLEAN   boolean
                    CHAR      signed character
                    DOUBLE    double-precision floating point
                    FLOAT     single-precision floating point
                    INT       signed int





     Page 1                                          (printed 6/30/95)






     TTTTAAAAGGGGEEEENNNNTTTTRRRRYYYYAAAALLLLLLLLOOOOCCCC((((3333TTTTAAAAGGGG))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      TTTTAAAAGGGGEEEENNNNTTTTRRRRYYYYAAAALLLLLLLLOOOOCCCC((((3333TTTTAAAAGGGG))))



                    INT16     signed 16-bit (or greater) integer
                    INT32     signed 32-bit (or greater) integer
                    INT64     signed 64-bit (or greater) integer
                    INT8      signed 8-bit (or greater) integer
                    LONG      signed long
                    POINTER   pointer to something
                    SHORT     signed short
                    UCHAR     unsigned character
                    UINT      unsigned int
                    UINT16    unsigned 16-bit (or greater) integer
                    UINT32    unsigned 32-bit (or greater) integer
                    UINT64    unsigned 64-bit (or greater) integer
                    UINT8     unsigned 8-bit (or greater) integer
                    ULONG     unsigned long
                    USHORT    unsigned short

          pValue
               The value field of an entry contains the integer,
               float, char, or whatever value to be stored with the
               tag.  _T_a_g_E_n_t_r_y_A_l_l_o_c copies the consecutive bytes
               pointed to by _p_V_a_l_u_e into the new entry's value field.
               The number of bytes to copy is determined by the _t_y_p_e
               and varies with different machine architectures and
               compiler flags.  However, since the same number of
               bytes will be copied back out when the value is
               retrieved by _T_a_g_E_n_t_r_y_Q_V_a_l_u_e(3TAG), machine architecture
               differences should go unnoticed.
               Note that the argument _p_V_a_l_u_e is a pointer to the value
               to put into the entry, so integer and floating-point
               literals cannot be passed in as the value argument.
               Such literals should first be assigned to a temporary
               variable, and then a pointer to that variable passed
               in.
               This use of a pointer to the value to copy is necessary
               to avoid machine-specific quirks relating to argument
               passing and variably-sized argument lists.

          Tag entry private data is set at the time the entry is added
          to a tag table using _T_a_g_T_a_b_l_e_A_p_p_e_n_d(3TAG),
          _T_a_g_T_a_b_l_e_I_n_s_e_r_t(3TAG), or _T_a_g_T_a_b_l_e_R_e_p_l_a_c_e(3TAG) and includes
          the following fields:

          nthEntry
               The nthEntry field of an entry contains an integer
               count indicating the placement of the entry in the tag
               table.  The first entry in the table has an nthEntry
               field value of 0.  The second is nthEntry 1, and so on
               in increasing order.
               Using _T_a_g_T_a_b_l_e_Q_L_i_n_e_a_r(3TAG), specific entries in a tag
               table may be retrieved by nthEntry number.  This may be
               used to search a table from start to finish.
               This field is not set if the entry is not yet in a tag



     Page 2                                          (printed 6/30/95)






     TTTTAAAAGGGGEEEENNNNTTTTRRRRYYYYAAAALLLLLLLLOOOOCCCC((((3333TTTTAAAAGGGG))))     SSSSDDDDSSSSCCCC ((((JJJJuuuullllyyyy 1111999999990000))))      TTTTAAAAGGGGEEEENNNNTTTTRRRRYYYYAAAALLLLLLLLOOOOCCCC((((3333TTTTAAAAGGGG))))



               table.

          nthOccur
               The nthOccur field of an entry contains an integer
               count indicating the placement of the entry among
               others in the table with the same tag.  The first entry
               in the table with this tag has an nthOccur field of 0.
               The second is nthOccur 1, and so on in increasing
               order.
               Using _T_a_g_T_a_b_l_e_Q_D_i_r_e_c_t(3TAG), specific entries in a tag
               table may be retrieved based on a tag and the nthOccur
               number.  This may be used to search a table for all
               entries with a specific tag.
               This field is not set if the entry is not yet in a tag
               table.

          A tag table entry may only be in one table at a time and may
          not have its tag, type, or value changed after it has been
          allocated.

          Fields in tag table entries may be queried individually
          using _T_a_g_E_n_t_r_y_Q_N_t_h_E_n_t_r_y(3TAG), _T_a_g_E_n_t_r_y_Q_N_t_h_O_c_c_u_r(3TAG),
          _T_a_g_E_n_t_r_y_Q_T_a_g(3TAG), _T_a_g_E_n_t_r_y_Q_V_a_l_u_e_T_y_p_e(3TAG),
          _T_a_g_E_n_t_r_y_Q_V_a_l_u_e(3TAG).

     RRRREEEETTTTUUUURRRRNNNNSSSS
          _T_a_g_E_n_t_r_y_A_l_l_o_c returns a new _T_a_g_E_n_t_r_y *.  If it fails to
          complete, _T_A_G_E_N_T_R_Y_N_U_L_L is returned and _T_a_g_E_r_r_N_o set to:

          TAGEMALLOC          Cannot allocate enough memory for
                              the new tag entry
          TAGEUNKVALUETYPE    The type argument is not a known type
          TAGENULLTAG         The tag argument is a NULL pointer
                              or an empty string

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          TagTableAppend(3TAG), TagTableDelete(3TAG),
          TagEntryFree(3TAG), TagTableInsert(3TAG),
          TagTableQDirect(3TAG), TagEntryQNthEntry(3TAG),
          TagEntryQNthOccur(3TAG), TagEntryQTag(3TAG),
          TagEntryQValue(3TAG), TagEntryQValueType(3TAG),
          TagTableQLinear(3TAG), TagTableQNEntry(3TAG),
          TagTableReplace(3TAG), TagTableFree(3TAG)

     AAAAUUUUTTTTHHHHOOOORRRRSSSS
          Dave Nadeau
          San Diego Supercomputer Center

     CCCCOOOONNNNTTTTAAAACCCCTTTT
          SDSC consultants, (619)534-5100, ccccoooonnnnssssuuuulllltttt@@@@yyyy1111....ssssddddsssscccc....eeeedddduuuu





     Page 3                                          (printed 6/30/95)



