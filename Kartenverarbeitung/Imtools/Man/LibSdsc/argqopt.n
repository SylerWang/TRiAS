'\"t
.TH ARGQOPT 3ARG "September 1991" "SDSC" "ARGUMENT PARSING"
.SH NAME
ArgQNOpt  -  query the number of options on the commandline
.br
ArgQOpt  -  query the keyword of the nth option on the commandline
.SH SYNOPSIS
.if t \fB
.ta +0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i
.nf
#include "arg.h"

int ArgErrNo;

int ArgQNOpt( )

char *ArgQOpt( nopt, noccur )
	int nopt;
	int *noccur;
.fi
.if t \fR
.SH DESCRIPTION
\fIArgQNOpt\fR and \fIArgQOpt(3ARG)\fR retrieve information about the
commandline, after it has been parsed by an earlier call to
\fIArgParse(3ARG)\fR. 
.LP
\fIArgQNOpt\fR queries the number of options found on the commandline.
Each option is a keyword (possibly implied) followed by zero or more values.
For example, in the following commandline, there are only two options,
though there are five commandline arguments (including the command name):
.LP
.in +0.5i
mycommand -infile myfile.hdf -outfile newfile.hdf
.in -0.5i
.LP
\fIArgQOpt\fR queries information on the commandline option selected
by \fInopt\fR.
Options are numbered starting with 0 for the first option
("-infile myfile.hdf" in the above example).
.LP
\fIArgQOpt\fR returns a pointer to a character string containing the
full name of the keyword for the option.
Even if the user entered an abbreviation for the keyword or left it implied,
\fIArgQOpt\fR returns the full name of the option's keyword.
Note that a leading dash ('-') is \fBNOT\fR included.
.LP
\fIArgQOpt\fR sets the integer pointed to by \fInoccur\fR to the
occurrence number of this option.
Commandline occurrences for an option are numbered starting at 0.
For example; in the following commandline
.LP
.in +0.5i
mycommand -infile file1.hdf -count 42 -infile file2.hdf
.in -0.5i
.LP
the option "-infile" is given twice: the first time with the value
"file1.hdf" and the second time with "file2.hdf". 
A call to \fIArgQOpt\fR with \fInopt == 0\fR returns
keyword "-infile" and \fInoccur == 0\fR, for the first (number 0)
occurrence of "-infile" on the commandline.
A call to \fIArgQOpt\fR with \fInopt == 1\fR returns
keyword "-count" and \fInoccur == 0\fR as well, for "-count"'s
first (and only) commandline occurrence.
Another call to \fIArgQOpt\fR with \fInopt == 2\fR returns
keyword "-infile" again and \fInoccur == 1\fR for the second (number 1)
occurrence of "-infile" on the commandline.
.SH RETURNS
\fIargnqopt\fR always succeeds and
returns the number of options found on the commandline.
.LP
\fIArgQOpt\fR returns a pointer to a character string containing
the full name of the keyword for the selected option on the commandline.
If \fIArgQOpt\fR fails to complete, it returns a NULL pointer and sets the
global \fIArgErrNo\fR to an error code indicating the cause of the failure.
The following error code may be generated by \fIArgQOpt\fR:
.LP
.IP "\fIARGENOPT\fR = option count is too high or too low"
The \fInopt\fR argument to \fIArgQNValue\fR was less than zero or
greater than the number of options on the commandline.
.SH NOTES
Placing a commandline's options in commandline order is usually not
necessary.  Programs typically just require checking for the option
and its value.  For such programs, use of \fIArgQNOccur(3ARG)\fR,
\fIArgQNValue(3X)\fR, and \fIArgQValue(3ARG)\fR is enough.
.LP
Programs needing to place the commandline's options in commandline order
typically call \fIArgQNOpt\fR to get the number of options on the
commandline, then use a \fIfor\fR-loop to step through the options.
Within the \fIfor\fR-loop body, \fIArgQOpt\fR is called to get the
keyword string and occurrence number, then \fIArgQValue\fR is called
to get the value(s) for that option.
For instance,
.LP
.ne 11
.in +0.5i
.ta +0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i
.nf
nopt = ArgQNOpt( );
for ( i=0; i<nopt; i++ )
{
	keyword = ArgQOpt( i, &noccur );
	if ( strcmp( keyword, "infile" ) == 0 )
	{
		infile = ArgQValue( keyword, noccur, 0 )->arg_s;
		...
	}
	...
}
.fi
.in -0.5i
.LP
.SH "SEE ALSO"
ArgIntro(3ARG),
ArgParse(3ARG),
ArgPError(3ARG),
ArgQNOccur(3ARG),
ArgQOccurOpt(3ARG),
ArgQNValue(3ARG),
ArgQValue(3ARG),
errno(2),
perror(3)
.br
.SH AUTHORS
Dave Nadeau
.br
San Diego Supercomputer Center
.SH CONTACT
SDSC consultants, (619)534-5100, \fBconsult@y1.sdsc.edu\fR
.br
