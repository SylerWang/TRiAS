'\"t
.TH BINBYTEORDER 3BIN "July 1990" "SDSC" "BINARY I/O"
.SH NAME
BinByteOrder  -  select the byte order for reading/writing binary files
.br
BinQByteOrder  -  query the current byte order used for binary files
.SH SYNOPSIS
.if t \fB
.nf
#include "sdsc.h"

extern int BinErrNo;

int BinByteOrder( order )
.in +0.5i
int order;
.in -0.5i

int BinQByteOrder( )
.fi
.if t \fR
.SH DESCRIPTION
\fIBinByteOrder\fR selects the byte order to use when writing data to or
reading data from binary files managed by the binary I/O package.
\fIorder\fR may be either of the following:
.LP
.in +0.5i
.TS
l l.
\fIorder\fR	\fBMeaning\fR
BINLBF	least-significant byte first
BINMBF	most-significant byte first
.TE
.in -0.5i
.LP
The default byte order is BINMBF.
.LP
\fIBinQByteOrder\fR queries the current byte order selection.
.SH RETURNS
\fIBinByteOrder\fR returns 0.  If and error occurs, -1 is returned and the
global \fIBinErrNo\fR set to an error code indicating the cause of the
error.  The following error codes may be returned:
.LP
.IP "\fIBINEBYTEORDER\fR = Unknown file byte order selection"
The \fIorder\fR argument was neither \fIBINLBF\fR nor \fIBINMBF\fR.
.LP
\fIBinQByteOrder\fR returns the current byte order selection.
.SH NOTES
Binary data files and streams are a compact and speedy
way to store and transfer data.
The binary format of a value can take fewer bytes to store than using the
equivalent ASCII format.
For instance, the number "32767" takes 16 bits to represent on a 2's complement
integer machine.
When written to a binary file or stream, the number can be stored in 2 bytes.
The same number written to an ASCII file or stream requires 5
bytes:  "3", "2", "7", "6", and "7".
.LP
While the UNIX \fIread\fR(2) and \fIwrite\fR(2) calls support reading and
writing binary data, they do not create binary files that can be read in again
on a machine with a different byte order or larger or smaller word size
(without additional programming).
The calls in the binary I/O package provide a portable means of reading and
writing binary files and streams.
Application code that calls \fIBinRead\fR to read in an array of 32-bit
integers from a binary file remains unchanged whether being compiled for
a SPARCstation, a VAX running VMS, or a CRAY X-MP.
Differences in byte ordering, word sizes, and structure field padding are
handled by the binary I/O package.
.LP
The byte order of a file may differ from that of the host trying to read or
write it.
Some standard file formats document the byte order they use.
Other formats include some flag near the top of the file (often the magic
number itself) that a program may read to determine the byte order of data in
the file.
.LP
Data may be read in using \fIBinRead\fR(3BIN) and \fIBinReadStruct\fR(3X),
and written out using \fIBinWrite\fR(3BIN) and \fIBinWriteStruct\fR(3X).
.LP
The characteristics of the host CPU, including its byte order, may be queried
using \fIBinQMachine\fR(3BIN).
.ne 5
.SH EXAMPLES
.SS "Example 1"
Read in a 2-byte magic number at the top of a file.
If the magic number is "0xABCD", assume the file is in MBF (Most-significant
Byte First) byte order.
If the magic number is "0xDCBA", assume the file is in LBF (Least-significant
Byte First) byte order.
If the magic number is neither of these, issue an error.
.LP
.in +0.5i
.nf
.ta +0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i
int magic;
int fd;

BinRead( fd, &magic, INT, 2, 1 );
magic &= 0xFFFF;
if ( magic == 0xABCD )
	BinByteOrder( BINMBF );
else if ( magic == 0xDCBA )
	BinByteOrder( BINLBF );
else
	issue an error
.in -0.5i
.fi
.LP
Note that the byte order of the host is not an issue.
The binary I/O package automatically converts from the file's byte
order to the byte order of the host. 
.SS "Example 2"
Query the current byte order selection.
.LP
.in +0.5i
.nf
.ta +0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i
int order;

order = BinQByteOrder( );
.in -0.5i
.fi
.LP
.ne 5
.SH "SEE ALSO"
BinErrorHandler(3BIN),
BinFRead(3BIN),
BinFReadStruct(3BIN),
BinFWrite(3BIN),
BinFWriteStruct(3BIN),
BinFloatFormat(3BIN),
BinPError(3BIN),
BinQFloatFormat(3BIN),
BinQMachine(3BIN),
BinRead(3BIN),
BinReadStruct(3BIN),
BinSRead(3BIN),
BinSWrite(3BIN),
BinWrite(3BIN),
BinWriteStruct(3BIN)
.br
.SH AUTHORS
Dave Nadeau
.br
San Diego Supercomputer Center
.SH CONTACT
SDSC consultants, (619)534-5100, \fBconsult@y1.sdsc.edu\fR
.br
