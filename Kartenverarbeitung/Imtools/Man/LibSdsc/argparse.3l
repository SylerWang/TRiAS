


     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



     NNNNAAAAMMMMEEEE
          ArgParse  -  parse commandline arguments

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          #include "sdsc.h"

          int ArgParse( argc, argv, cmnd, noptions, options, nequiv, equiv )
               int argc;
               char *argv[];
               ArgCommand *cmnd;
               int noptions;
               ArgOption *options;
               int nequiv;
               ArgEquiv *equiv;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _A_r_g_P_a_r_s_e is the primary entry point for the argument parsing
          package of _l_i_b_s_d_s_c._a.

          _A_r_g_P_a_r_s_e provides a simple, easy-to-use and easy-to-set-up,
          flexible, and standard way of parsing commandline arguments.
          Tools using this package have a standard commandline look
          and feel that is consistent with UNIX conventions.

          _A_r_g_P_a_r_s_e parses a commandline described by _a_r_g_c and _a_r_g_v[],
          and breaks it down into options (keyword-value combinations)
          using information provided it by the _o_p_t_i_o_n_s[ ] and _e_q_u_i_v[ ]
          arrays passed to _A_r_g_P_a_r_s_e.  While looking for command-
          specific options, _A_r_g_P_a_r_s_e also watchs for and automatically
          handles standard options like ----hhhheeeellllpppp, ----ffffuuuullllllllhhhheeeellllpppp, ----ffffeeeeeeeeddddbbbbaaaacccckkkk,
          ----rrrreeeeggggiiiisssstttteeeerrrr, and ----vvvveeeerrrrssssiiiioooonnnn.

          Parsed commandline information is stored in internal data
          structures that may be queried by later calls to any of the
          other routines of the argument parsing package (see SSSSEEEEEEEE
          AAAALLLLSSSSOOOO).

     AAAARRRRGGGGUUUUMMMMEEEENNNNTTTTSSSS
          _a_r_g_c and _a_r_g_v[]
               _a_r_g_c and _a_r_g_v[] are the standard argument count and
               argument vector passed to a C program's _m_a_i_n.  Per UNIX
               convention, _a_r_g_v[_0] is the name of the command as typed
               in by the user.

          _c_m_n_d
               _c_m_n_d is a pointer to an _A_r_g_C_o_m_m_a_n_d structure describing
               attributes of the command (see SSSSTTTTRRRRUUUUCCCCTTTTUUUURRRREEEESSSS).

          _n_o_p_t_i_o_n_s and _o_p_t_i_o_n_s[ ]
               _o_p_t_i_o_n_s[ ] is an array of _A_r_g_O_p_t_i_o_n structures, each
               one describing one possible option for the command (see
               SSSSTTTTRRRRUUUUCCCCTTTTUUUURRRREEEESSSS).  _n_o_p_t_i_o_n_s is the number of entries in the



     Page 1                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



               array.

          _n_e_q_u_i_v and _e_q_u_i_v[ ]
               _e_q_u_i_v[ ] is an array of _A_r_g_E_q_u_i_v structures, each one
               giving an equivalent name (alias) for one of the
               keywords in the _o_p_t_i_o_n_s[ ] array (see SSSSTTTTRRRRUUUUCCCCTTTTUUUURRRREEEESSSS).
               _n_e_q_u_i_v is the number of entries in the _e_q_u_i_v[ ] array.

     SSSSTTTTRRRRUUUUCCCCTTTTUUUURRRREEEESSSS
        TTTThhhheeee _A_r_g_C_o_m_m_a_n_d ssssttttrrrruuuucccctttt
          The _A_r_g_C_o_m_m_a_n_d structure gives general information about the
          command.  _A_r_g_C_o_m_m_a_n_d is defined as follows:

               typedef struct ArgCommand
               {
                   char   *arg_name;

                   int    arg_major;
                   int    arg_minor;
                   int    arg_subminor;

                   char   *arg_help1;
                   char   *arg_help2;

                   char   *arg_fullhelp1;
                   char   *arg_fullhelp2;

                   int    arg_flags;

                   char   *arg_usage;
                   char   *arg_fullusage;
                   char   *arg_version;
                   char   *arg_copyright;
                   char   *arg_register;
                   char   *arg_feedback;
               } ArgCommand;

          While there appear to be many fields, most are set to NULL
          string pointers.  _A_r_g_P_a_r_s_e has a reasonable set of default
          actions.  These fields are supplied to let the user override
          those defaults.

          _a_r_g__n_a_m_e
               _a_r_g__n_a_m_e is the name of the command.  Sometimes site
               administrators decide to install commands under
               different names.  In such cases, the name the user
               types in (_a_r_g_v[_0]) may differ from _a_r_g__n_a_m_e.

               _a_r_g__n_a_m_e is used when generating feedback (bug report)
               and registration forms for the standard ----ffffeeeeeeeeddddbbbbaaaacccckkkk and
               ----rrrreeeeggggiiiisssstttteeeerrrr options (see the _A_r_g_F_e_e_d_b_a_c_k(_3_A_R_G) and
               _A_r_g_R_e_g_i_s_t_e_r(3ARG) mmmmaaaannnn pages).



     Page 2                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



               _a_r_g__n_a_m_e is also printed out for the standard ----vvvveeeerrrrssssiiiioooonnnn
               option (see the _A_r_g_V_e_r_s_i_o_n(3ARG) mmmmaaaannnn page).

          _a_r_g__m_a_j_o_r, _a_r_g__m_i_n_o_r, and _a_r_g__s_u_b_m_i_n_o_r
               _a_r_g__m_a_j_o_r, _a_r_g__m_i_n_o_r, and _a_r_g__s_u_b_m_i_n_o_r are three parts
               to a command version number of the form:
               _m_a_j_o_r._m_i_n_o_r._s_u_b_m_i_n_o_r.  For instance, in a version
               number like "2.4.1," 2 is the major version number
               (_a_r_g__m_a_j_o_r), 4 is the minor version number (_a_r_g__m_i_n_o_r),
               and 1 is the subminor version number (_a_r_g__s_u_b_m_i_n_o_r).

               Version numbers are displayed for the standard
               ----vvvveeeerrrrssssiiiioooonnnn, ----ffffeeeeeeeeddddbbbbaaaacccckkkk and ----rrrreeeeggggiiiisssstttteeeerrrr options (see the
               _A_r_g_V_e_r_s_i_o_n(3ARG), _A_r_g_F_e_e_d_b_a_c_k(_3_A_R_G), and
               _A_r_g_R_e_g_i_s_t_e_r(3ARG) mmmmaaaannnn pages).

          _a_r_g__h_e_l_p_1 and _a_r_g__h_e_l_p_2
               _a_r_g__h_e_l_p_1 and _a_r_g__h_e_l_p_2 supply two parts to help text
               printed when the standard ----hhhheeeellllpppp option is given (see
               the _A_r_g_H_e_l_p(3ARG) mmmmaaaannnn page).

          _a_r_g__f_u_l_l_h_e_l_p_1 and _a_r_g__f_u_l_l_h_e_l_p_2
               These fields are similar to the _a_r_g__h_e_l_p_1 and _a_r_g__h_e_l_p_2
               fields, but they supply two parts to the full-length
               help text printed for the standard ----ffffuuuullllllllhhhheeeellllpppp option
               (see the _A_r_g_F_u_l_l_H_e_l_p(3ARG) mmmmaaaannnn page).

          _a_r_g__f_l_a_g_s
               The _a_r_g__f_l_a_g_s field controls how _A_r_g_P_a_r_s_e handles
               parsing the commandline.  _a_r_g__f_l_a_g_s is a bitwise OR of
               any or none of the following flags:

               FFFFllllaaaagggg                  MMMMeeeeaaaannnniiiinnnngggg
               ARGFNONE              No flags
               ARGFHELPONERROR       Call _A_r_g_H_e_l_p on commandline errors
               ARGFFULLHELPONERROR   Call _A_r_g_F_u_l_l_H_e_l_p on commandline errors

               If none of the flags are needed, _a_r_g__f_l_a_g_s should be
               set to _A_R_G_F_N_O_N_E.

               By default, _A_r_g_P_a_r_s_e displays a short error message
               when a user types an invalid commandline.  If either
               _A_R_G_F_H_E_L_P_O_N_E_R_R_O_R or _A_R_G_F_F_U_L_L_H_E_L_P_O_N_E_R_R_O_R are set in
               _a_r_g__f_l_a_g_s, _A_r_g_P_a_r_s_e also invokes _A_r_g_H_e_l_p(3ARG) or
               _A_r_g_F_u_l_l_H_e_l_p(3ARG) on commandline errors.

          _a_r_g__u_s_a_g_e
               The _a_r_g__u_s_a_g_e field is a text string giving argument
               usage text for a "Usage is" line printed for ----hhhheeeellllpppp and
               ----ffffuuuullllllllhhhheeeellllpppp options (see the _A_r_g_H_e_l_p(3ARG) and
               _A_r_g_F_u_l_l_H_e_l_p(3ARG) mmmmaaaannnn pages). A NULL text pointer
               directs the package to generate the "Usage is" line



     Page 3                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



               automatically using the option list information passed
               to _A_r_g_P_a_r_s_e.

          _a_r_g__f_u_l_l_u_s_a_g_e
               The _a_r_g__f_u_l_l_u_s_a_g_e field is a text string giving
               argument usage text for a "Usage is" line printed for
               the ----ffffuuuullllllllhhhheeeellllpppp option (see the _A_r_g_F_u_l_l_H_e_l_p(3ARG) mmmmaaaannnn
               page). A NULL text pointer directs the package to
               default to the value in _a_r_g__u_s_a_g_e.  If that value too
               is a NULL text pointer, a "Usage is" line is
               automatically generated using the option list
               information passed to _A_r_g_P_a_r_s_e.

          _a_r_g__v_e_r_s_i_o_n
               The _a_r_g__v_e_r_s_i_o_n field is a text string giving a version
               message displayed for the standard ----vvvveeeerrrrssssiiiioooonnnn option (see
               the AAAArrrrggggVVVVeeeerrrrssssiiiioooonnnn(3ARG) mmmmaaaannnn page).  A NULL text pointer
               suppresses display of a version message.

          _a_r_g__c_o_p_y_r_i_g_h_t
               The _a_r_g__c_o_p_y_r_i_g_h_t field is a text string giving the
               copyright message to be displayed for ----vvvveeeerrrrssssiiiioooonnnn, ----hhhheeeellllpppp,
               and ----ffffuuuullllllllhhhheeeellllpppp output (see the _A_r_g_V_e_r_s_i_o_n(3ARG),
               _A_r_g_H_e_l_p(3ARG), and _A_r_g_F_u_l_l_H_e_l_p_f_R(_3_A_R_G) mmmmaaaannnn pages).  A
               NULL text pointer supresses display of a copyright
               message.

          _a_r_g__r_e_g_i_s_t_e_r and _a_r_g__f_e_e_d_b_a_c_k
               These fields contain text strings used in printing user
               registration and feedback (bug) forms for the ----rrrreeeeggggiiiisssstttteeeerrrr
               and ----ffffeeeeeeeeddddbbbbaaaacccckkkk options (see the _A_r_g_R_e_g_i_s_t_e_r(3ARG) and
               _A_r_g_V_e_r_s_i_o_n(3ARG) mmmmaaaannnn pages).  NULL text pointers for
               these fields disables support for the ----rrrreeeeggggiiiisssstttteeeerrrr and
               ----ffffeeeeeeeeddddbbbbaaaacccckkkk options.

        TTTThhhheeee _A_r_g_O_p_t_i_o_n ssssttttrrrruuuucccctttt
          The _A_r_g_O_p_t_i_o_n structure describes an option that may be
          accepted by the command.  _A_r_g_O_p_t_i_o_n is defined as follows:

               typedef struct ArgOption
               {
                   char   *arg_keyword;
                   char   *arg_valuenames;
                   char   *arg_help;

                   int    arg_flags;
                   int    arg_minvalues;
                   int    arg_maxvalues;
                   int    arg_type;
               } ArgOption;

          _a_r_g__k_e_y_w_o_r_d



     Page 4                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



               _a_r_g__k_e_y_w_o_r_d is a text string for the name of an option,
               such as "verbose," "debug," "infile," "files," or
               "geometry".  The keyword name should be given WWWWIIIITTTTHHHHOOOOUUUUTTTT AAAA
               LLLLEEEEAAAADDDDIIIINNNNGGGG DDDDAAAASSSSHHHH!  The leading dash is assumed by _A_r_g_P_a_r_s_e
               and will be added automatically.

               All options must have keywords (see _a_r_g__f_l_a_g_s for
               caveats).  A NULL pointer or empty string for a keyword
               in the _o_p_t_i_o_n_s[ ] array causes _A_r_g_P_a_r_s_e( ) to exit the
               program with an error message.

               _a_r_g__k_e_y_w_o_r_d is used in commandline parsing and in the
               printing of the usage line and options list portions of
               help text.

               In commandline parsing, any unique abbreviation of the
               keyword is accepted.  For instance, if the keyword is
               "background," any of the following are accepted, unless
               an abbreviation is ambiguous:

                    -b
                    -ba
                    -bac
                    -back
                    -backg
                    -backgr
                    -backgro
                    -backgrou
                    -backgroun
                    -background

          _a_r_g__v_a_l_u_e_n_a_m_e_s
               _a_r_g__v_a_l_u_e_n_a_m_e_s is a text string describing the values,
               if any, that should follow the keyword in the option.
               If the option has no values after the keyword (see
               _a_r_g__m_i_n_v_a_l_u_e_s and _a_r_g__m_a_x_v_a_l_u_e_s), then _a_r_g__v_a_l_u_e_n_a_m_e_s
               should be a NULL pointer or empty string.

               For options with more than one value, _a_r_g__v_a_l_u_e_n_a_m_e_s
               should list them all within the same string.  For
               instance, a "-position" option that takes an X and Y
               screen location might set _a_r_g__v_a_l_u_e_n_a_m_e_s to "xscreen
               yscreen".

               _a_r_g__v_a_l_u_e_n_a_m_e_s is used in printing the usage line and
               option list of help text.  Per UNIX convention, values
               that are optional should be surrounded by square
               brackets ('[ ]').  Where a list of values may be given,
               an ellipses ('...') should be used.

          _a_r_g__h_e_l_p
               _a_r_g__h_e_l_p contains a brief (40 chars or less)



     Page 5                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



               description of this option.  This brief description is
               used when the option-list portion of the help text is
               displayed.

               _a_r_g__h_e_l_p may also contain a verbose description of the
               option.  This verbose description will be displayed
               when specific help is requested about this option.
               (i.e. both the -help and the -<option> flags are
               given.)  To include a verbose help message for an
               option, proceed as follows:  Use the first 40
               characters or less of the string for the brief message.
               Then put the word "%end".  Anything following "%end"
               will be considered option-specific help.  Anything
               before "%end" will be considered to be a brief
               description of the option.

               If the word "%option" is included in the help string
               for an option, then it will be replaced with the name
               of the option, when the string is printed.  If the word
               "%command" is included in the help string, it will be
               replaced with the name of the executable.


          _a_r_g__f_l_a_g_s
               _a_r_g__f_l_a_g_s controls how this option is parsed.  Flags
               are a bitwise or of any of the following:

                    FFFFllllaaaagggg             MMMMeeeeaaaannnniiiinnnngggg
                    ARGFNONE         No flags
                    ARGFHIDDEN       Don't show option in help text
                    ARGFMULTIPLE     Allow multiple occurrences of option
                    ARGFREQUIRED     Print error if option isn't given
                    ARGFIMPKEYWORD   Keyword may be implied
                    ARGFFULLHELP     Only show in full-length help text

               If none of the flags are needed, _a_r_g__f_l_a_g_s should be
               set to _A_R_G_F_N_O_N_E.

               _A_R_G_F_H_I_D_D_E_N indicates the option is hidden and should
               not be listed in the automatically generated usage line
               and option list of help text.  Typically options like
               ----ddddeeeebbbbuuuugggg are flagged as hidden.

               By default, an error is printed and the program exits
               if the same option occurs more than once on the
               commandline.  _A_R_G_F_M_U_L_T_I_P_L_E indicates that multiple
               occurrences are OK, and a second occurrence of the
               option ddddooooeeeessss nnnnooootttt overwrite the values for the first
               occurrence.  Each occurrence's values are saved and may
               be retrieved using separate calls to _A_r_g_Q_O_c_c_u_r(3ARG)
               and _A_r_g_Q_V_a_l_u_e(3ARG).




     Page 6                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



               _A_R_G_F_R_E_Q_U_I_R_E_D indicates that the option must be given.
               If not given _A_r_g_P_a_r_s_e issues an error message and exits
               the program.  Unless flagged as _A_R_G_F_R_E_Q_U_I_R_E_D, options
               are printed within square brackets ('[ ]') on the
               automatically generated usage line of help text
               displays.

               _A_R_G_F_I_M_P_K_E_Y_W_O_R_D indicates that the keyword given by
               _a_r_g__k_e_y_w_o_r_d is implied (optional).  Values that occur
               on the commandline and are not preceded by a keyword
               are assumed to be for implied keyword options and are
               assigned to options marked _A_R_G_F_I_M_P_K_E_Y_W_O_R_D, in the order
               in which those options appear in the _o_p_t_i_o_n_s[ ] array.
               Options for input and output filename lists are typical
               examples where the keyword is dropped.

               _A_R_G_F_F_U_L_L_H_E_L_P indicates that the option should only be
               listed in full-length help listings, such as that
               printed by _A_r_g_F_u_l_l_H_e_l_p(3ARG) and not in shorter help
               listings, such as printed by _A_r_g_H_e_l_p(3ARG).  By
               default, options are listed in both short and full-
               length help listings.

          _a_r_g__m_i_n_v_a_l_u_e_s and _a_r_g__m_a_x_v_a_l_u_e_s
               _a_r_g__m_i_n_v_a_l_u_e_s and _a_r_g__m_a_x_v_a_l_u_e_s give the minimum and
               maximum number of values that should follow the keyword
               for the option.  _a_r_g__m_a_x_v_a_l_u_e_s must be greater than, or
               equal to _a_r_g__m_i_n_v_a_l_u_e_s.

               If the option has no values, both _a_r_g__m_i_n_v_a_l_u_e_s and
               _a_r_g__m_a_x_v_a_l_u_e_s should be set to 0.  This would be the
               case, for instance, in options whose presence toggles a
               flag in the command, such as ----vvvveeeerrrrbbbboooosssseeee.

               If the option has a fixed number of values, both fields
               should be set to the same number.

               The special value _A_R_G_V_N_O_M_A_X for _a_r_g__m_a_x_v_a_l_u_e_s may be
               used if there is no maximum number of values for the
               option, such as in file lists.

          _a_r_g__t_y_p_e
               _a_r_g__t_y_p_e indicates the value type the option requires.
               All values for the same option have the same type.  The
               following types are recognized:

                    TTTTyyyyppppeeee         MMMMeeeeaaaannnniiiinnnngggg
                    ARGTNONE     No type
                    ARGTINT      Integer values
                    ARGTFLOAT    Floating point values





     Page 7                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



                    ARGTSTRING   Character string values

               If the option has no values, then _a_r_g__t_y_p_e should be
               set to _A_R_G_T_N_O_N_E.

               _A_R_G_T_I_N_T values are integers in decimal, octal, or
               hexidecimal.  Decimal is the default.  Numbers with a
               leading zero are assumed to be in octal.  Numbers with
               a leading '0x' are assumed to be in hexidecimal.  If an
               illegal octal or hexidecimal value is entered (such as
               '0xG') or if the commandline argument has non-numeric
               characters in it, an error is printed to _s_t_d_e_r_r and the
               program exits.

               _A_R_G_T_F_L_O_A_T values are floating-point values with or
               without an exponent.  If an illegal value is entered or
               if the commandline argument has non-numeric characters,
               an error is printed to _s_t_d_e_r_r and the program exits.

               _A_R_G_T_S_T_R_I_N_G values are arbitrary numbers of characters
               with or without white space.  An _A_R_G_T_S_T_R_I_N_G value is
               simply the raw _a_r_g_v[ ] string.

               _A_R_G_T_R_A_N_G_E may be bitwise OR'ed with _A_R_G_T_I_N_T and
               _A_R_G_T_F_L_O_A_T types to indicate that a numeric range may be
               given as a single value to the option.  The user can
               enter a numeric range with any of the following forms:

                    FFFFoooorrrrmmmm   MMMMeeeeaaaannnniiiinnnngggg
                    n-m    Numbers _n through _m
                    n-     Numbers _n through the end
                    n      Just the number _n

               The _n-_m form specifies both a starting and ending
               value.

               The _n- form is open-ended in that it extends from _n
               through the end of something, as determined by the
               command.  If the range refers to line numbers, for
               instance, the end might be the end of the file.

               The _n form is simply a single number and may be
               interpreted as the one element range _n-_n.

               For integer ranges, the implied increment is by whole
               numbers.

               For floating point ranges, there is no implied
               increment.  It is up to the command to establish a
               default and supply an option to specify an alternate
               increment.




     Page 8                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



        _A_r_g_E_q_u_i_v ssssttttrrrruuuucccctttt
          The _A_r_g_E_q_u_i_v structure describes an alternate keyword name
          (or alias) for one of the options in the _o_p_t_i_o_n_s[ ] array.
          This allows multiple names for the same thing to be
          supported in an easy way.  For instance, a ----bbbbaaaacccckkkkwwwwaaaarrrrddddssss option
          might have ----rrrreeeevvvveeeerrrrsssseeee and ----lllleeeefffftttt as equivalent keywords.

          _A_r_g_E_q_u_i_v is defined as follows:

               typedef struct ArgEquiv
               {
                   char   *arg_keyword;
                   char   *arg_equivkeyword;
               } ArgEquiv;

          _a_r_g__k_e_y_w_o_r_d
               _a_r_g__k_e_y_w_o_r_d is the name of a keyword (without the
               leading dash), as it appears in the _A_r_g_O_p_t_i_o_n structure
               of the _o_p_t_i_o_n_s[ ] array.

          _a_r_g__e_q_u_i_v_k_e_y_w_o_r_d
               _a_r_g__e_q_u_i_v_k_e_y_w_o_r_d is an alternate name for _a_r_g__k_e_y_w_o_r_d.

               As with option names, truncation abbreviations of
               equivalent keywords are also handled by _A_r_g_P_a_r_s_e.  For
               instance, if a keyword "name" has an equivalent keyword
               "title," each of the following would be accepted for
               the option (assuming the keyword is unambiguous):

                    -n
                    -na
                    -nam
                    -name
                    -t
                    -ti
                    -tit
                    -titl
                    -title

     RRRREEEETTTTUUUURRRRNNNNSSSS
          _A_r_g_P_a_r_s_e returns the number of options found on the
          commandline.  When counting options, an option is a keyword
          and its values or just the values if the keyword is implied.
          For instance, the following commandline has only two
          options, though there are five arguments, including the
          command's name:

               mycommand -count 34 -infile myfile.hdf

          ----ccccoooouuuunnnntttt 33334444 would be the first option, and ----iiiinnnnffffiiiilllleeee mmmmyyyyffffiiiilllleeee....hhhhddddffff
          would be the second.  _A_r_g_P_a_r_s_e would return 2 after parsing
          this commandline.



     Page 9                                          (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



          _A_r_g_P_a_r_s_e checks the validity of all of its incoming
          arguments before it starts parsing the commandline.  If
          anything is wrong with its arguments, it issues an error
          message to _s_t_d_e_r_r and exits the program.  This prevents
          programmer errors from getting into released products.

          The following error messages report user input errors:

               Extra characters following float value %f for '%s' option.
                    The value for an option requiring a float ended
                    with non-numeric characters.

               Extra characters following integer value %d for '%s' option.
                    The value for an option requiring a integer ended
                    with non-numeric characters.

               Option '%s' may only be given once.
                    An option not flagged with _A_R_G_F_M_U_L_T_I_P_L_E occurred
                    more than once on the commandline.

               Option '%s' must be given.
                    The option was flagged as _A_R_G_F_R_E_Q_U_I_R_E_D but was not
                    given.

               required.
               Too few values for implied option '%s'; at least %d values
                    Fewer than the required number of values for an
                    implied option were found.

               Too few values for option '%s'; at least %d values required.
                    Fewer than the required number of values for an
                    option were found.

               Unknown option '%s'.
                    The commandline argument was not recognized as any
                    legal option or a value for an implied option.

          The following error messages report programmer errors in the
          initialization of the _A_r_g_C_o_m_m_a_n_d, _A_r_g_O_p_t_i_o_n, and _A_r_g_E_q_u_i_v
          structures:

               Out of memory in argument parsing!
                    _A_r_g_P_a_r_s_e could not allocate sufficient host memory
                    while it was parsing commandline arguments.

               ArgCommand:  NULL ArgCommand struct pointer?
                    The _c_m_n_d pointer argument to _A_r_g_P_a_r_s_e is NULL.
                    This argument must point to an initialized
                    _A_r_g_C_o_m_m_a_n_d struct describing the command.

               ArgCommand:  arg_name == NULL or empty?
                    The _a_r_g__n_a_m_e field of the _A_r_g_C_o_m_m_a_n_d structure is



     Page 10                                         (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



                    a NULL pointer or points to an empty string (a
                    NULL character).  This field must point to a
                    character string giving the name of the command.

               ArgEquiv[%d]:  arg_keyword %s not found in option list?
                    The keyword %s in the _a_r_g__k_e_y_w_o_r_d field of the
                    %d-th _A_r_g_E_q_u_i_v structure is not in any of the
                    _A_r_g_O_p_t_i_o_n descriptions.  An equivalent keyword
                    cannot be established for a keyword that doesn't
                    exist.

               ArgEquiv[%d]:  arg_equivkeyword %s already used?
                    The equivalent keyword %s in the _a_r_g__e_q_u_i_v_k_e_y_w_o_r_d
                    field of the %d-th _A_r_g_E_q_u_i_v structure is already
                    in use as a keyword or equivalent keyword.

               ArgEquiv[%d]:  duplicate use of keyword %s
                    The _a_r_g__e_q_u_i_v_k_e_y_w_o_r_d field of the %d-th _A_r_g_E_q_u_i_v
                    structure uses a keyword that is already in use
                    either by earlier entries in the _o_p_t_i_o_n_s and _e_q_u_i_v
                    arrays or by one of the standard options
                    ----ffffeeeeeeeeddddbbbbaaaacccckkkk, ----hhhheeeellllpppp, ----rrrreeeeggggiiiisssstttteeeerrrr, and ----vvvveeeerrrrssssiiiioooonnnn.

               enough memory!
               ArgOption[-
                    ]: Too many options and equivalent keywords.  Not
                    _A_r_g_P_a_r_s_e could not allocate sufficient host memory
                    while it was setting up parsing tables before
                    parsing the commandline arguments.

               ArgOption[%d]:  arg_keyword == NULL or empty?
                    The _a_r_g__k_e_y_w_o_r_d field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure is a NULL pointer or points to an empty
                    string (a NULL character).  This field must point
                    to a character string giving the keyword for the
                    option.  If the keyword is to be optional
                    (implied), _A_R_G_F_I_M_P_K_E_Y_W_O_R_D can be OR'd into the
                    _a_r_g__f_l_a_g_s field for the option.

               ArgOption[%d]:  arg_keyword is illegal?
                    The _a_r_g__k_e_y_w_o_r_d field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure contains control characters or starts
                    with a numeric.

               ArgOption[%d]:  arg_maxvalues < 0?
                    The _a_r_g__m_a_x_v_a_l_u_e_s field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure is less than zero.  _a_r_g__m_a_x_v_a_l_u_e_s must
                    be greater than or equal to zero.

               ArgOption[%d]:  arg_minvalues < 0?
                    The _a_r_g__m_i_n_v_a_l_u_e_s field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure is less than zero.  _a_r_g__m_i_n_v_a_l_u_e_s must



     Page 11                                         (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



                    be greater than or equal to zero.

               ArgOption[%d]:  arg_minvalues > arg_maxvalues?
                    The _a_r_g__m_i_n_v_a_l_u_e_s field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure is greater than _a_r_g__m_a_x_v_a_l_u_e_s.
                    _a_r_g__m_i_n_v_a_l_u_e_s must be less than or equal to
                    _a_r_g__m_a_x_v_a_l_u_e_s.

               ArgOption[%d]:  arg_minvalues == ARGVNOMAX?
                    The _a_r_g__m_i_n_v_a_l_u_e_s field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure equals _A_R_G_V_N_O_M_A_X.  _a_r_g__m_i_n_v_a_l_u_e_s must be
                    specified as some minimum number of values to
                    follow the keyword.

               ArgOption[%d]:  arg_type == ARGTNONE, yet arg_minvalues > 0?
                    The _a_r_g__t_y_p_e field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure equals _A_R_G_T_N_O_N_E, indicating no type for
                    the option's values, and _a_r_g__m_i_n_v_a_l_u_e_s is greater
                    than zero.  _a_r_g__t_y_p_e should only be set to
                    _A_R_G_T_N_O_N_E for options with no values.

               ArgOption[%d]:  arg_type == (ARGTRANGE|ARGTSTRING)?
                    The _a_r_g__t_y_p_e field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure has _A_R_G_T_R_A_N_G_E set for a base type of
                    _A_R_G_T_S_T_R_I_N_G.  String ranges are not supported.

               ArgOption[%d]:  can only have one implied keyword option if
                                      that one is allowed multiple times."
                    If any option has both the _A_R_G_F_M_U_L_T_I_P_L_E and the
                    _A_R_G_F_I_M_P_K_E_Y_W_O_R_D flags set, then there can only be
                    one implied keyword option in the option list.
                    This error indicates this rule was violated on the
                    %d-th option.

               ArgOption[%d]:  duplicate use of keyword %s
                    The _a_r_g__k_e_y_w_o_r_d field of the %d-th _A_r_g_O_p_t_i_o_n
                    structure uses a keyword that is already in use
                    either by earlier entries in the _o_p_t_i_o_n_s array or
                    by one of the standard options ----ffffeeeeeeeeddddbbbbaaaacccckkkk, ----hhhheeeellllpppp,
                    ----rrrreeeeggggiiiisssstttteeeerrrr, and ----vvvveeeerrrrssssiiiioooonnnn.

     NNNNOOOOTTTTEEEESSSS
          When handling value lists of variable length, the value list
          is terminated on the following conditions:

          Numeric values
               First non-numeric argument on the commandline, or by
               the end of the commandline.  Plus and minus signs
               before numerics are allowed.

          String values
               First argument matching one of the keywords, equivalent



     Page 12                                         (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



               keywords, or truncated abbreviation keywords for any of
               the options or by the end of the commandline.

          These conditions imply that numeric implied keyword options
          are difficult  to give after a variable length numeric value
          list option.  For instance, if "-color" takes 1 to 3
          integers and the implied keyword option "-count" takes 1
          integer, the following input line would parse the "34" as
          part of "-color":

               mycommand -color 0 34

          To associate "34" with the "-count" option, the user could
          use any of the following:

               mycommand -color 0 -count 34
               mycommand -color 0 0 0 34
               mycommand 34 -color 0
               mycommand -count 34 -color 0

          Similar problems occur if the user tries to follow a
          variable length numeric value list with an implied keyword's
          string value that looks like a number, such as a numeric
          filename like "3.4".  Again, the user needs to supply a
          keyword before the value, rather than leaving it implied.

          The string value list termination condition implies that
          string values may not be given that match any of the keyword
          permutations.  For filenames, the user should enter a "./"
          preceding filenames that start with a dash (very rare).  For
          other string values, the user should enter a space or other
          non-dash character preceding the string value (remembering
          to quote the string with the leading space).

          Overuse of implied keywords and equivalent keywords can make
          command usage confusing.  Implied keywords should be
          reserved for filename options, and only where the order of
          filenames is obvious, such as "infile" then "outfile".
          Equivalent keywords should be reserved for common alternate
          abbreviations rather than waiting to chose the term that
          best fits the option's purpose.

          A single dash ('-') as an argument is legal and will be
          passed on as a string value rather than considered a NULL
          keyword.  This allows a single dash to be used for an input
          or output filename to indicate _s_t_d_i_n or _s_t_d_o_u_t, per UNIX
          convention.

          After all commandline arguments have been parsed, if any
          required options were not given, _A_r_g_P_a_r_s_e issues an error
          message to _s_t_d_e_r_r and exits the program.




     Page 13                                         (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



          _A_r_g_P_a_r_s_e prints help, feedback, registration, and version
          texts using _A_r_g_H_e_l_p(3ARG), _A_r_g_F_u_l_l_H_e_l_p(3ARG),
          _A_r_g_F_e_e_d_b_a_c_k(3ARG), _A_r_g_R_e_g_i_s_t_e_r(3ARG), and _A_r_g_V_e_r_s_i_o_n(3ARG),
          all of which are available to the program when necessary.

     EEEEXXXXAAAAMMMMPPPPLLLLEEEESSSS
        EEEExxxxaaaammmmpppplllleeee 1111
          A command named "mycommand" with no options other than the
          standard ones initializes its structures as follows:

               ArgCommand mycommand =
               {
                    /* Command name and version number */
                    "mycommand,"
                    2, 4, 1,

                    /* -help text */
                    "%command does whatever it does.,"
                    NULL,

                    /* -fullhelp text */
                    NULL,
                    NULL,

                    /* Parsing flags * /
                    ARGFNONE,

                    /* Usage, version, and copyright message */
                    NULL,
                    "Argument Parsing Package Example, September 1991,"
                    "Copyright (c) 1991 San Diego Supercomputer Center (SDSC), CA, USA,"

                    /* Registration and feedback text */
                    NULL,
                    NULL
               };

          The NULL passed as the _a_r_g__h_e_l_p_2 string prevents printing a
          second part to the help output.  See _A_r_g_H_e_l_p(3ARG) for
          details.

          The NULLs passed for _a_r_g__f_u_l_l_h_e_l_p_1 and _a_r_g__f_u_l_l_h_e_l_p_2 cause
          the _a_r_g__h_e_l_p_1 and _a_r_g__h_e_l_p_2 fields to be used instead.  See
          _A_r_g_H_e_l_p(3ARG) for details.

          _A_R_G_F_N_O_N_E just says there are no special parsing flags.

          A NULL usage line flags automatic generation of the usage
          line.  See _A_r_g_H_e_l_p(3ARG) for details.

          The NULLs for the registation and feedback form messages
          disable these options.  See _A_r_g_R_e_g_i_s_t_e_r(3ARG) and



     Page 14                                         (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



          _A_r_g_F_e_e_d_b_a_c_k(3ARG) for more details.

          For this command, _A_r_g_P_a_r_s_e would be invoked as follows:

               ArgParse( argc, argv, &mycommand, 0, NULL, 0, NULL );

          Since the command required no options and no equivalent
          keywords, the _n_o_p_t_i_o_n_s and _n_e_q_u_i_v arguments are both 0, and
          the _o_p_t_i_o_n_s[ ] and _e_q_u_i_v[ ] arrays are both NULL pointers.

        EEEExxxxaaaammmmpppplllleeee 2222
          A command named "mycommand" takes the following options in
          addition to the standard ones:

               -debug level       Turn on debugging messages
               -verbose           Be verbose
               -infile infile     Slect an input file
               -outfile outfile   Select an output file

          ----ddddeeeebbbbuuuugggg should be hidden.  ----vvvveeeerrrrbbbboooosssseeee should only show up in
          full help listings.  The ----iiiinnnnffffiiiilllleeee and ----oooouuuuttttffffiiiilllleeee keywords may
          be implied, but the options as a whole are required inputs
          (the user must give both an input file and an output file).

          The _A_r_g_C_o_m_m_a_n_d and _A_r_g_O_p_t_i_o_n structures are initialized as
          follows:

               ArgCommand mycommand =
               {
                    "mycommand," 1, 2, 3,
                    "%command converts an input file 'infile' to an output\n\
               file 'outfile'.  Options are:,"
                    "A - for 'infile' cause stdin to be read from.  A -\n\
               for 'outfile' causes stdout to be written to.,"
                    NULL,
                    NULL,
                    ARGFNONE,
                    "[options] infile outfile,"
                    "Argument Parsing Package Example, September 1991,"
                    "Copyright (c) 1991 San Diego Supercomputer Center (SDSC), CA, USA,"
                    NULL,
                    NULL
               };

               ArgOption options[4] =
               {
                    { "debug," "level," "turn on debugging messages,"
                    ARGFHIDDEN, 1, 1, ARGINT },
                    { "verbose," NULL, "be verbose,"
                    ARGFFULLHELP, 0, 0, ARGTNONE },
                    { "infile," "infile," "select an input file,"
                    ARGFREQUIRED | ARGFIMPKEYWORD, 1, 1, ARGTSTRING },



     Page 15                                         (printed 6/30/95)






     AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))          SSSSDDDDSSSSCCCC ((((JJJJuuuunnnneeee 1111999999995555))))           AAAARRRRGGGGPPPPAAAARRRRSSSSEEEE((((3333AAAARRRRGGGG))))



                    { "outfile," "outfile," "select an output file,"
                    ARGFREQUIRED | ARGFIMPKEYWORD, 1, 1, ARGTSTRING }
               };

          Note that the help strings in the _A_r_g_C_o_m_m_a_n_d initialization
          have embedded carriage returns and have been continued on
          the next line by ending the line with a backslash ('\').

          For ----vvvveeeerrrrbbbboooosssseeee, the _a_r_g__v_a_l_u_e_n_a_m_e_s field has been set to a
          NULL pointer because the option has no values.

          For this command, _A_r_g_P_a_r_s_e would be invoked as follows:

               ArgParse( argc, argv, &mycommand, 4, options, 0, NULL );

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          ArgFeedback(3ARG), ArgFullHelp(3ARG), ArgHelp(3ARG),
          ArgIntro(3ARG), ArgPError(3ARG), ArgQNOccur(3ARG),
          ArgQNOpt(3ARG), ArgQOccurOpt(3ARG), ArgQOpt(3ARG),
          ArgQNValue(3ARG), ArgQValue(3ARG), ArgRegister(3ARG),
          ArgVersion(3ARG), errno(2), perror(3)

     PPPPRRRROOOOBBBBLLLLEEEEMMMMSSSS
          The restriction that string values may not collide with
          keyword names and their abbreviations is annoying.  This is
          a common problem among UNIX tools.

     AAAAUUUUTTTTHHHHOOOORRRRSSSS
          Dave Nadeau, Brian Duggan
          San Diego Supercomputer Center

     CCCCOOOONNNNTTTTAAAACCCCTTTT
          SDSC consultants, (619)534-5100, ccccoooonnnnssssuuuulllltttt@@@@yyyy1111....ssssddddsssscccc....eeeedddduuuu






















     Page 16                                         (printed 6/30/95)



