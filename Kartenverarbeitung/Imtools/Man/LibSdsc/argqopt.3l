


     AAAARRRRGGGGQQQQOOOOPPPPTTTT((((3333AAAARRRRGGGG))))         SSSSDDDDSSSSCCCC ((((SSSSeeeepppptttteeeemmmmbbbbeeeerrrr 1111999999991111))))         AAAARRRRGGGGQQQQOOOOPPPPTTTT((((3333AAAARRRRGGGG))))



     NNNNAAAAMMMMEEEE
          ArgQNOpt  -  query the number of options on the commandline
          ArgQOpt  -  query the keyword of the nth option on the
          commandline

     SSSSYYYYNNNNOOOOPPPPSSSSIIIISSSS
          #include "arg.h"

          int ArgErrNo;

          int ArgQNOpt( )

          char *ArgQOpt( nopt, noccur )
               int nopt;
               int *noccur;

     DDDDEEEESSSSCCCCRRRRIIIIPPPPTTTTIIIIOOOONNNN
          _A_r_g_Q_N_O_p_t and _A_r_g_Q_O_p_t(_3_A_R_G) retrieve information about the
          commandline, after it has been parsed by an earlier call to
          _A_r_g_P_a_r_s_e(_3_A_R_G).

          _A_r_g_Q_N_O_p_t queries the number of options found on the
          commandline.  Each option is a keyword (possibly implied)
          followed by zero or more values.  For example, in the
          following commandline, there are only two options, though
          there are five commandline arguments (including the command
          name):

               mycommand -infile myfile.hdf -outfile newfile.hdf

          _A_r_g_Q_O_p_t queries information on the commandline option
          selected by _n_o_p_t.  Options are numbered starting with 0 for
          the first option ("-infile myfile.hdf" in the above
          example).

          _A_r_g_Q_O_p_t returns a pointer to a character string containing
          the full name of the keyword for the option.  Even if the
          user entered an abbreviation for the keyword or left it
          implied, _A_r_g_Q_O_p_t returns the full name of the option's
          keyword.  Note that a leading dash ('-') is NNNNOOOOTTTT included.

          _A_r_g_Q_O_p_t sets the integer pointed to by _n_o_c_c_u_r to the
          occurrence number of this option.  Commandline occurrences
          for an option are numbered starting at 0.  For example; in
          the following commandline

               mycommand -infile file1.hdf -count 42 -infile file2.hdf

          the option "-infile" is given twice: the first time with the
          value "file1.hdf" and the second time with "file2.hdf". A
          call to _A_r_g_Q_O_p_t with _n_o_p_t == _0 returns keyword "-infile" and
          _n_o_c_c_u_r == _0, for the first (number 0) occurrence of "-



     Page 1                                          (printed 6/30/95)






     AAAARRRRGGGGQQQQOOOOPPPPTTTT((((3333AAAARRRRGGGG))))         SSSSDDDDSSSSCCCC ((((SSSSeeeepppptttteeeemmmmbbbbeeeerrrr 1111999999991111))))         AAAARRRRGGGGQQQQOOOOPPPPTTTT((((3333AAAARRRRGGGG))))



          infile" on the commandline.  A call to _A_r_g_Q_O_p_t with _n_o_p_t ==
          _1 returns keyword "-count" and _n_o_c_c_u_r == _0 as well, for "-
          count"'s first (and only) commandline occurrence.  Another
          call to _A_r_g_Q_O_p_t with _n_o_p_t == _2 returns keyword "-infile"
          again and _n_o_c_c_u_r == _1 for the second (number 1) occurrence
          of "-infile" on the commandline.

     RRRREEEETTTTUUUURRRRNNNNSSSS
          _a_r_g_n_q_o_p_t always succeeds and returns the number of options
          found on the commandline.

          _A_r_g_Q_O_p_t returns a pointer to a character string containing
          the full name of the keyword for the selected option on the
          commandline.  If _A_r_g_Q_O_p_t fails to complete, it returns a
          NULL pointer and sets the global _A_r_g_E_r_r_N_o to an error code
          indicating the cause of the failure.  The following error
          code may be generated by _A_r_g_Q_O_p_t:

          _A_R_G_E_N_O_P_T = option count is too high or too low
               The _n_o_p_t argument to _A_r_g_Q_N_V_a_l_u_e was less than zero or
               greater than the number of options on the commandline.

     NNNNOOOOTTTTEEEESSSS
          Placing a commandline's options in commandline order is
          usually not necessary.  Programs typically just require
          checking for the option and its value.  For such programs,
          use of _A_r_g_Q_N_O_c_c_u_r(_3_A_R_G), _A_r_g_Q_N_V_a_l_u_e(_3_X), and _A_r_g_Q_V_a_l_u_e(_3_A_R_G)
          is enough.

          Programs needing to place the commandline's options in
          commandline order typically call _A_r_g_Q_N_O_p_t to get the number
          of options on the commandline, then use a _f_o_r-loop to step
          through the options.  Within the _f_o_r-loop body, _A_r_g_Q_O_p_t is
          called to get the keyword string and occurrence number, then
          _A_r_g_Q_V_a_l_u_e is called to get the value(s) for that option.
          For instance,

               nopt = ArgQNOpt( );
               for ( i=0; i<nopt; i++ )
               {
                    keyword = ArgQOpt( i, &noccur );
                    if ( strcmp( keyword, "infile" ) == 0 )
                    {
                         infile = ArgQValue( keyword, noccur, 0 )->arg_s;
                         ...
                    }
                    ...
               }

     SSSSEEEEEEEE AAAALLLLSSSSOOOO
          ArgIntro(3ARG), ArgParse(3ARG), ArgPError(3ARG),
          ArgQNOccur(3ARG), ArgQOccurOpt(3ARG), ArgQNValue(3ARG),



     Page 2                                          (printed 6/30/95)






     AAAARRRRGGGGQQQQOOOOPPPPTTTT((((3333AAAARRRRGGGG))))         SSSSDDDDSSSSCCCC ((((SSSSeeeepppptttteeeemmmmbbbbeeeerrrr 1111999999991111))))         AAAARRRRGGGGQQQQOOOOPPPPTTTT((((3333AAAARRRRGGGG))))



          ArgQValue(3ARG), errno(2), perror(3)

     AAAAUUUUTTTTHHHHOOOORRRRSSSS
          Dave Nadeau
          San Diego Supercomputer Center

     CCCCOOOONNNNTTTTAAAACCCCTTTT
          SDSC consultants, (619)534-5100, ccccoooonnnnssssuuuulllltttt@@@@yyyy1111....ssssddddsssscccc....eeeedddduuuu















































     Page 3                                          (printed 6/30/95)



