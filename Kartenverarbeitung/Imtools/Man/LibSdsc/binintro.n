'\"t
.de Cb		\" Courier Begin
.in +0.25i
.ft CW
\s-1
.nf
..
.de Ce		\" Courier End
.ft R
.fi
\s+1
.in -0.25i
..
.TH BININTRO 3BIN "July 1990" "SDSC" "BINARY I/O"
.SH NAME
BinIntro  -  general information on the binary I/O package
.SH SYNOPSIS
.if t \fB
#include "sdsc.h"
.if t \fR
.SH DESCRIPTION
Binary data files and streams are a compact and speedy
way to store and transfer data.
The binary format of a value can take fewer bytes to store than using the
equivalent ASCII format.
For instance, the number "32767" takes 16 bits to represent on a 2's compliment
integer machine.
When written to a binary file or stream, the number can be stored in 2 bytes.
The same number written to an ASCII file or stream requires 5
bytes:  "3", "2", "7", "6", and "7".
.LP
While the UNIX \fIread\fR(2) and \fIwrite\fR(2) calls support reading and
writing binary data, they do not create binary files that can be read in again
on a machine with a different byte order or larger or smaller word size
(or at least not without additional programmer effort).
The calls in the binary I/O package provide a portable means of reading and
writing these and other binary files and streams.
Application code that calls \fIBinRead\fR to read in an array of 32-bit
integers from a binary file remains unchanged whether being compiled for
a SPARCstation, a VAX running VMS, or a CRAY X-MP.
Differences in byte ordering, word sizes, floating point formats,
and structure field padding are handled by the binary I/O package.
.SH GOALS
The binary I/O package was designed to do the following:
.IP \(bu 0.25i
Read binary files written by programs not using the binary I/O package.
.IP \(bu 0.25i
Write binary files readable by programs not using the binary I/O package.
.IP \(bu 0.25i
Be portable among machines with widely different word sizes and
floating point formats.  The package must be as independent of
variations in UNIXes. 
.IP \(bu 0.25i
Intuit the host's attributes, such as byte order and floating point
format without the programmer having to state them explicitly.
.IP \(bu 0.25i
Read and write integers of any number of bytes with appropriate
zero-padding, sign-extension, and byte swapping taking place. 
.IP \(bu 0.25i
Read and write floating-point values of a variety of standard formats
and sizeswith appropriate format conversions and byte swapping taking place.
.IP \(bu 0.25i
Read and write structures with structure padding considerations
handled automatically as data is read in to and written out of host struct's.
.IP \(bu 0.25i
Read and write arrays of data to reduce the subroutine calling
overhead when dealing with large sets of data. 
.IP \(bu 0.25i
Equally access files and streams referenced by file descriptors and
file pointers.
.IP \(bu 0.25i
Easy to add support for additional basic types and floating
point formats.
.br
.ne 5
.SH "SELECTING FILE ATTRIBUTES"
Before any reading or writing operations take place, the programmer must
indicate the byte order and floating point format used by data in the file.
The byte order defaults to MBF (Most-significant Byte First) and the
floating point format to IEEE.
.LP
.RS 0.5i
.nf
BinByteOrder( BINMBF );
BinFloatFormat( BINIEEE );
.fi
.RE
.LP
The byte order and floating point format selections apply to all read and
write operations until superseded by additional calls to
\fIBinByteOrder\fR(3BIN) and \fIBinFloatFormat\fR(3BIN).
The current byte order and floating point format selections may be queried
using \fIBinQByteOrder\fR(3BIN) and \fIBinQFloatFormat\fR(3BIN):
.LP
.RS 0.5i
.nf
order = BinQByteOrder( );
format = BinQFloatFormat( );
.fi
.RE
.SH "READING AND WRITING ARRAYS"
Arrays of data may be read and written all at once using \fIBinRead\fR(3BIN),
\fIBinFRead\fR(3BIN), \fIBinSRead\fR(3BIN),
\fIBinWrite\fR(3BIN), \fIBinFWrite\fR(3BIN), and \fIBinSWrite\fR(3BIN):
.LP
.RS 0.5i
.nf
int fd;
FILE *fp;
int array[LOTS];

BinRead( fd, array, INT, 4, LOTS );
BinFRead( fp, array, INT, 4, LOTS );
BinSRead( data, array, INT, 4, LOTS );
BinWrite( fd, array, INT, 4, LOTS );
BinFWrite( fp, array, INT, 4, LOTS );
BinSWrite( data, array, INT, 4, LOTS );
.fi
.RE
.LP
To read and write, five pieces of information must be given:  the
file descriptor or pointer for the file, a pointer to the first element
in the array, the type of the array as declared on the host, the number
of bytes occupied by one element when in the file, and the number of
elements to read or write.
.LP
The type argument informs the binary I/O package of how the slot size in
the array so that it can correctly move from element to element during
the read or write.  It also informs the package if the type is a
signed integer, unsigned integer, or a float.  Signed integers require
sign-extension checks, while unsigned integers require zero padding.
Floating point values require floating point format conversion.
.LP
The number of bytes an item occupies in the file informs the binary I/O package
how to truncate, zero pad, sign extend, or float format convert the
data as it is read in or written out. 
.SH "READING AND WRITING STRUCTURES"
C struct's may be read and written at one time using \fIBinReadStruct\fR(3BIN),
\fIBinFReadStruct\fR(3BIN), \fIBinSReadStruct\fR(3BIN),
\fIBinWriteStruct\fR(3BIN), \fIBinWriteStruct\fR(3BIN), and
\fIBinSWriteStruct\fR(3BIN):
.LP
.RS 0.5i
.nf
.ta +0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i
int fd;
FILE *fp;
struct myStruct
{
	char my_chars[NUMCHARS];
	int my_integers[NUMINTS];
	float my_floats[NUMFLOATS];
} myStruct;
BinField myStructFields[] =
{
	CHAR, 4, NUMCHARS,
	INT, 4, NUMINTS,
	FLOAT, 4, NUMFLOATS,
	0, 0, 0
};

BinReadStruct( fd, &myStruct, myStructFields );
BinFReadStruct( fp, &myStruct, myStructFields );
BinSReadStruct( data, &myStruct, myStructFields );
BinWriteStruct( fd, &myStruct, myStructFields );
BinFWriteStruct( fp, &myStruct, myStructFields );
BinSWriteStruct( data, &myStruct, myStructFields );
.fi
.RE
.LP
To read and write structures, the type of each field, the number of
bytes that field's type
occupies in the file, and the number of such concequetive
items are each placed in an array of \fIBinField\fR
field information structures.
Each entry in the structure describes one struct field.
A pointer to the structure and a pointer to the first element in the
\fIBinField\fR array are passed to the read and write structure calls.
.LP
In a C structure like the following:
.LP
.in +0.5i
.nf
.ta +0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i,+0.5i
struct thing
{
	char byte;
	int  integer;
};
.in -0.5i
.fi
.LP
there may or may not be empty storage space between the \fIbyte\fR
field and the \fIinteger\fR field.
Some CPUs can only access integers or floats at word boundaries.
On such CPUs the address of the \fIinteger\fR field in the above structure
must be advanced to the next legal boundary.
On a SPARC processor, \fIint\fR's must be aligned to 4-byte boundaries,
forcing the addition of 3 padding bytes between the \fIbyte\fR and
\fIinteger\fR fields in the structure above.
On a VAX running VMS the C compiler does not require \fIint\fR's to be
at any boundary so there'd be no padding bytes added in the above structure.
.LP
The structure read and write calls handle such structure pading automatically.
.SH "ERROR HANDLING"
All binary I/O package routines check all of their incoming arguments
for correctness before doing any read or write operations.
However, errors such as integer truncation and floating point overflow
and underflow can only be reported as data is read in or written out.
Such errors are reported by invoking an error handling function nominated
using \fIBinErrorHandler\fR(3BIN):
.LP
.RS 0.5i
BinErrorHandler( myHandler );
.RE
.LP
The handler function notes that a data error occurred, then returns.
The default handler nominated by the package prints a warning message
to \fIstderr\fR when data errors occur. 
.SH "MACHINE QUERIES"
The attributes of the host may be queried from the binary I/O package by
calling \fIBinQMachine\fR(3BIN).
.LP
.RS 0.5i
BinQMachineInfo *info;

info = BinQMachine( );
.RE
.LP
The \fIBinQMachineInfo\fR structure includes information on the host's
byte order and floating-point format and the sizes and resolutions of all
its types.
The structure also contains the names for the host's vendor, machine type,
CPU type, and operating system type.  This kind of information is most
useful for debugging print statements and logging.
.SH "RETURNS"
All binary I/O package calls that can return errors do so by returning -1
on failure and 0 on success (per UNIX system call convention).
The global variable \fIBinErrNo\fR is set to an error code describing the
error (also per UNIX convention).
The error text associated with the error code may be retrieved from the
global \fIBinErrList\fR or printed to \fIstderr\fR using \fIBinPError\fR(3BIN).
.SH "SUMMARY OF BINARY I/O ROUTINES"
.nf
.TS
l l.
int	BinByteOrder( order )
void	BinErrorHandler( func )
int	BinFRead( fp, buf, type, nbytes, count )
int	BinFReadStruct( fp, structure, fields )
int	BinFWrite( fp, buf, type, nbytes, count )
int	BinFWriteStruct( fp, structure, fields )
int	BinFloatFormat( format )
int	BinPError( leader )
int	BinQByteOrder( )
int	BinQError( )
int	BinQFloatFormat( )
BinMachineInfo *	BinQMachine( )
int	BinRead( fd, buf, type, nbytes, count )
int	BinReadStruct( fd, structure, fields )
int	BinSRead( data, buf, type, nbytes, count )
int	BinSWrite( data, buf, type, nbytes, count )
int	BinWrite( fd, buf, type, nbytes, count )
int	BinWriteStruct( fd, structure, fields )
.TE
.fi
.SH "SEE ALSO"
BinByteOrder(3BIN),
BinErrorHandler(3BIN),
BinFRead(3BIN),
BinFReadStruct(3BIN),
BinFWrite(3BIN),
BinFWriteStruct(3BIN),
BinFloatFormat(3BIN),
BinPError(3BIN),
BinQByteOrder(3BIN),
BinQError(3BIN),
BinQFloatFormat(3BIN),
BinQMachine(3BIN),
BinRead(3BIN),
BinReadStruct(3BIN),
BinSRead(3BIN),
BinSWrite(3BIN),
BinWrite(3BIN),
BinWriteStruct(3BIN),
errno(3),
perror(3)
.br
.SH AUTHORS
Dave Nadeau
.br
San Diego Supercomputer Center
.SH CONTACT
SDSC consultants, (619)534-5100, \fBconsult@y1.sdsc.edu\fR
.br
